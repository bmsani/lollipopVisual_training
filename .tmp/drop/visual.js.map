{"version":3,"file":"visual.js","mappings":";;;;;;;;;AAAA;;AAEO;AACA;;;;;;;;;;;ACHP,6BAAe,oCAAS;AACxB;AACA;;;;;;;;;;;;;;ACFoC;AACF;;AAElC,sBAAsB,8DAAQ,CAAC,2DAAS;AACjC;AACA;AACP,iEAAe,WAAW,EAAC;;;;;;;;;;;;ACNS;;AAEpC,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,+DAAS;AACpB;AACA;;;;;;;;;;;AChC8B;AACA;AACI;AACJ;AACI;AACN;AACK;AACS;;AAE1C,6BAAe,sCAAW;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AC1EoE;AACnB;AACF;AACN;AACU;AACF;AACN;AACM;AACiC;AACtB;AACI;AAC3B;AACE;AACI;AACF;AACJ;AACI;AACI;AACE;AACN;AACF;AACM;AACR;AAC6B;AACjB;AACF;AACV;;;;;;;;;;;AC1BrC,6BAAe,oCAAS;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;ACZ6B;AACQ;AACN;AACI;;AAEnC,6BAAe,oCAAS;AACxB;AACA;AACA;;;;;;;;;;;;;ACRA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClDuC;AACF;AACA;AACE;AACI;AACE;;;;;;;;;;;;ACLtC;;AAEP;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,yEAAyE,8CAA8C;AACvH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gEAAgE,sBAAsB;;AAEtF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,iEAAe,GAAG,EAAC;;;;;;;;;AC1EK;;AAExB,6BAAe,sCAAW;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,YAAY,kCAAkC,IAAI;AACjG,yDAAyD,+BAA+B;AACxF;;AAEA;AACA,8BAA8B,kDAAkD;AAChF,2BAA2B,4CAA4C;AACvE,+BAA+B,wDAAwD;AACvF,uBAAuB,cAAc,cAAc;AACnD,gCAAgC,mCAAmC,cAAc;AACjF,kCAAkC,oBAAoB,cAAc;AACpE,0BAA0B,YAAY;AACtC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;ACxE6C;;AAE7C;;AAEA,YAAY,qDAAG;;AAEf;AACA;AACA;AACA;AACA;AACA,SAAS,iDAAM;AACf;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2DAA2D,iBAAiB;;AAE5E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,sEAAe,mDAAG,IAAC;;;;;;;;;;;;;;ACtCwB;;AAEpC;;AAEA;AACA;;AAEP;AACA;AACA;AACA,yBAAye;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA,+DAAM,WAAW,2DAAM;AACvB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAAM,WAAW,2DAAM;AACvB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClXA,6BAAe,oCAAS;AACxB;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;ACTuC;;AAEvC;AACO;AACA;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAEc;AACf,WAAW,+DAAY;AACvB;AACA;AACA;AACA;;;;;;;;;;;;ACnBsD;;AAEtD,6BAAe,oCAAS;AACxB,aAAa,8EAAkB;AAC/B;;;;;;;;;;;;ACJA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP,gGAAgG;AAChG;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;ACjBA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;ACNsD;;AAE/C;;AAEP,6BAAe,oCAAS;AACxB,UAAU,8EAAkB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8EAAkB,gCAAgC;AAC9F;;;;;;;;;;;;ACfsD;;AAEtD,6BAAe,oCAAS;AACxB,UAAU,8EAAkB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,uDAAuD;;AAEhD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC9CA;AACA,6BAAe,oCAAS;AACxB,kDAAkD,OAAO;AACzD;AACA,6BAA6B;AAC7B,sCAAsC,QAAQ;AAC9C,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;;;;;;;;;;;;;;ACV+C;AACM;AACN;;AAE/C,iEAAe;AACf,wBAAwB,8BAA8B;AACtD,qBAAqB,mCAAmC;AACxD,qBAAqB,gBAAgB;AACrC,OAAO,kEAAa;AACpB,wBAAwB,4BAA4B;AACpD,wBAAwB,sBAAsB;AAC9C,wBAAwB,0BAA0B;AAClD,qBAAqB,mCAAmC;AACxD,wBAAwB,OAAO,sEAAa,eAAe;AAC3D,OAAO,kEAAa;AACpB,OAAO,qEAAgB;AACvB,qBAAqB,kDAAkD;AACvE,qBAAqB;AACrB,CAAC,EAAC;;;;;;;;;;;AClBF,6BAAe,oCAAS;AACxB;AACA;;;;;;;;;;;;;;;;;;;ACFqC;AACM;AACM;AACE;AACV;AACE;AACU;AAChB;;AAErC;AACA;;AAEA,6BAAe,oCAAS;AACxB,gFAAgF,6DAAQ,GAAG,oEAAW;AACtG;AACA;AACA;AACA,iDAAiD,6DAAQ,GAAG,uEAAc;AAC1E;AACA;AACA;;AAEA;AACA,gBAAgB,wEAAe;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,gEAAW;;AAEzB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,gEAAW;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,mEAAU;;AAEpC;AACA;;AAEA;AACA;AACA,mDAAmD,yEAAc;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uEAAuE;AACvE,uEAAuE;AACvE,sIAAsI;AACtI,sEAAsE;AACtE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mCAAmC,wEAAe;AAClD,gDAAgD,iEAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnJqC;;AAErC,6BAAe,oCAAS;AACxB,sBAAsB,iEAAQ;AAC9B;;;;;;;;;;;;ACJqC;;AAErC,6BAAe,oCAAS;AACxB,yDAAyD,iEAAQ,qBAAqB,iEAAQ;AAC9F;;;;;;;;;;;;ACJqC;;AAErC,6BAAe,oCAAS;AACxB;AACA,qBAAqB,iEAAQ,QAAQ,iEAAQ;AAC7C;;;;;;;;;;;;ACL+B;AAC6B;;AAE5D,6BAAe,oCAAS;AACxB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA,cAAc,QAAQ,YAAY,8DAAK;AACvC,SAAS,QAAQ;;AAEjB;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;;;;;;;;;;;;ACrBO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClBiC;;AAEjC,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,yDAAK;AAChB;AACA;;;;;;;;;;;;;;ACZqC;;AAErC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA,0CAA0C,iEAAQ;AAClD;AACA;;AAEe;AACf;AACA,4BAA4B,iEAAQ;AACpC;;;;;;;;;;;AC5BA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;ACJA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;;;;;;;;;;;ACLA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;;ACJA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;;ACb+B;;AAE/B,6BAAe,oCAAS;AACxB,YAAY;AACZ,YAAY;AACZ;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,8DAAK;AAClB,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtByC;AACV;AACY;AACD;;AAE1C,iEAAe;AACf,cAAc,0DAAK;;AAEnB;AACA,2BAA2B,uDAAQ,mBAAmB,uDAAQ;AAC9D;AACA;AACA,kBAAkB,+DAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,CAAC,IAAI,EAAC;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,cAAc,uDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,yBAAyB,0DAAK;AAC9B,+BAA+B,gEAAW;;;;;;;;;;;ACtDjD,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;;ACJiC;;AAEjC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,4BAA4B;AAC5B;AACA;AACA,yCAAyC;AACzC,4BAA4B;AAC5B;AACA,MAAM,OAAO;AACb;AACA,cAAc,SAAS,+DAAM,SAAS;AACtC;AACA;AACA;;AAEA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO;AACpC;AACA,SAAS;AACT;;;;;;;;;;;;;;;;;;;;AC/D+B;AACJ;AACa;AACX;AACI;AACA;AACA;AACI;AACuB;;AAE5D,6BAAe,oCAAS;AACxB;AACA,wCAAwC,iEAAQ;AAChD,0BAA0B,2DAAM;AAChC,+BAA+B,8DAAK,eAAe,yDAAG,IAAI,2DAAM;AAChE,qBAAqB,0DAAK,GAAG,yDAAG;AAChC,4BAA4B,yDAAI;AAChC,QAAQ,uEAAa,MAAM,gEAAW;AACtC,2BAA2B,4DAAY;AACvC,0FAA0F,2DAAM;AAChG,QAAQ,2DAAM;AACd;;;;;;;;;;;;ACrBA;;AAEO;AACA;;;;;;;;;;;;;;;ACHoC;AACV;AACD;;AAEjB;AACf,cAAc,6DAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAQ,sBAAsB,0BAA0B;AACzE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS,qDAAS;AAClB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;ACnGA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACJgC;AACoE;AACjE;AACD;AACJ;;AAE9B;;AAEO;AACP;AACA;;AAEA;AACA;AACA,sBAAsB;AACtB,QAAQ,8DAAQ;AAChB;;AAEA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,YAAY,0DAAM;AAClB;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,oBAAoB,+DAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wFAAwF,+DAAiB;AACzG;;AAEA;AACA,wCAAwC,gDAAG,SAAS,wDAAM;AAC1D;;AAEA;AACA,uCAAuC,kDAAK;AAC5C;;AAEA;AACA,mBAAmB,kDAAK,wBAAwB,+DAAgB;AAChE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;;;;;;;;;;;;;;;AC3HsC;AACE;AACL;AACL;AACI;AACC;AACN;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;AC1F4B;AACO;AACL;;AAEf;AACf;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBgB;;AAII;;AAIF;;AAIH;;AAIG;;AAKC;;AAKJ;;AAIK;;AAIA;;AAIC;;AAIL;;AAIG;;AAQG;;AAIQ;;AAQT;;AAIC;;;;;;;;;;;;ACzEf;AACP;AACA;AACA,gCAAgC;AAChC,+CAA+C;AAC/C;AACA;AACA;;AAEO;AACP;AACA;AACA,uCAAuC;AACvC,6DAA6D;AAC7D;AACA;AACA;;;;;;;;;;;;;;;;AChB8C;AACU;AACvB;AACK;;AAE/B;AACP;;AAEA;AACA;AACA,WAAW,yDAAK;AAChB;;AAEA;AACA;AACA,WAAW,gEAAU;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,WAAW,iEAAa;;AAExB;AACA;AACA;AACA,aAAa,iEAAa;AAC1B,MAAM;AACN;AACA;AACA,aAAa,iEAAa;AAC1B;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEe;AACf,cAAc,iEAAU,CAAC,2DAAQ,EAAE,2DAAQ;;AAE3C;AACA,WAAW,2DAAI;AACf;;AAEA,EAAE,qDAAS;;AAEX;AACA;;;;;;;;;;;ACvE+B;AACE;AACP;AACqB;AACd;;AAEjC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA,+CAA+C,4BAA4B;AAC3E;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,OAAO;AAC/B,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA,QAAQ,YAAY,OAAO;AAC3B,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,mCAAmC;AAC9D,0BAA0B;AAC1B,KAAK;AACL;;AAEA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;AChJA,6BAAe,oCAAS;AACxB;AACA;;;;;;;;;;;;;;;ACFkC;AACJ;AACG;;AAE1B,gBAAgB;;AAER;AACf,cAAc,4DAAG;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,4DAAG;AAC5B;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,kDAAK;AAC5C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,qDAAS;;AAEX;AACA;;;;;;;;;;;AC5CmC;AACsB;AACxB;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;ACjDkE;AACpC;AACG;;AAElB;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;ACzDgC;AACF;AACK;AACF;;AAElB;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;ACxDsC;AACE;AACL;AACL;AACK;AACN;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;;;;;;;;;;AC9F2C;AACL;AACE;;AAEzB;AACf;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AC7BmC;AACY;AACd;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEe;AACf;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;AClCgC;AACF;AACG;;AAElB;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACvCkC;AAC+E;;AAEjH,6BAAe,oCAAS;AACxB,aAAa,4DAAQ;AACrB;AACA,cAAc,8DAAe;AAC7B;AACA;AACA;AACA,4DAA4D,8DAAe;AAC3E,aAAa,iEAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8DAAc;AAC1E;AACA;AACA;AACA;AACA,4DAA4D,8DAAc;AAC1E;AACA;AACA;AACA,SAAS,2DAAM;AACf;;;;;;;;;;;;AC5B4C;AACsE;AACxE;AACd;AAC4B;AACvB;AACP;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC,cAAc;AACnD;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,6BAAe,sCAAW;AAC1B;AACA;;;;;;;;;ACtIgC;AACS;AACiE;AACzE;;AAEjC,6BAAe,sCAAW;AAC1B;AACA;;;;;;;;;;;ACPA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;ACJoC;AACD;;AAEnC;AACA;AACA;AACA;AACA,mBAAmB,uDAAK,8CAA8C,uDAAK;AAC3E;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB,iBAAiB,+DAAS;AAC1B;AACA;AACA;AACA;;;;;;;;;;;ACxBA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;;ACJsC;;AAEtC,6BAAe,oCAAS;AACxB;AACA;AACA,SAAS,4DAAU,2BAA2B,OAAO,4DAAU,uBAAuB;AACtF;;;;;;;;;;;;ACNO;;AAEP,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;ACRgD;;AAElD,6BAAe,oCAAS;AACxB;AACA,YAAY,iEAAS;AACrB,YAAY,iEAAS,eAAe,4DAAI;AACxC;;;;;;;;;;;;ACNiC;;AAEjC,6BAAe,oCAAS;AACxB,mDAAmD,6DAAO;AAC1D;AACA;AACA,GAAG;AACH;;;;;;;;;;;;ACPqC;;AAErC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB,iBAAiB,+DAAS;;AAE1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxDA,6BAAe,sCAAW;AAC1B;AACA;AACA;AACA;AACA;;;;;;;;;;;ACLA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1EA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;;;;;;;;;;;;;;ACZkC;AACA;AACC;;AAEnC,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,gBAAgB;AACzB;AACA;AACA;AACA,MAAM;AACN,qBAAqB,sDAAS;AAC9B;AACA;;AAEA;AACA,SAAS,iBAAiB;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,qBAAqB,sDAAS;AAC9B;AACA;;AAEA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA,2CAA2C,8DAAQ;;AAEnD,uGAAuG,OAAO;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA6C,iBAAiB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,uDAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;ACrHA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;;ACJoC;;AAEpC;AACA,eAAe,4DAAW;AAC1B;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;ACjCA,6BAAe,oCAAS;;AAExB,4DAA4D,OAAO;AACnE,+DAA+D,OAAO;AACtE;AACA;AACA;;AAEA;AACA;;;;;;;;;;;ACTA,6BAAe,sCAAW;AAC1B;AACA;;;;;;;;;;;;;;ACF8B;AACI;;AAElC,6BAAe,sCAAW;AAC1B,aAAa,uDAAS,iCAAiC,wDAAM;AAC7D;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,sDAAsD;AACvF,wCAAwC,gDAAgD;AACxF,sCAAsC,8CAA8C;AACpF,yCAAyC;AACzC;;;;;;;;;;;;;ACrB8B;AACI;;AAElC,6BAAe,sCAAW;AAC1B,aAAa,uDAAS,gCAAgC,wDAAM;AAC5D;;;;;;;;;;;;;ACLkC;AACD;;AAEjC,6BAAe,oCAAS;AACxB,2CAA2C,6DAAO;;AAElD,sFAAsF,OAAO;AAC7F,6FAA6F,OAAO;AACpG;AACA;AACA;AACA;AACA;;AAEA,aAAa,uDAAS;AACtB;;;;;;;;;;;ACfA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBwC;AACM;AACN;AACJ;AACE;AACF;AACA;AACE;AACA;AACF;AACA;AACE;AACF;AACA;AACE;AACF;AACA;AACE;AACM;AACF;AACN;AACA;AACE;AACA;AACE;AACA;AACA;AACF;AACA;AACN;AACY;;AAErC;;AAEA;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU,wDAAgB;AAC1B,aAAa,2DAAmB;AAChC,UAAU,wDAAgB;AAC1B,QAAQ,sDAAc;AACtB,SAAS,uDAAe;AACxB,QAAQ,sDAAc;AACtB,QAAQ,sDAAc;AACtB,SAAS,uDAAe;AACxB,SAAS,uDAAe;AACxB,QAAQ,sDAAc;AACtB,QAAQ,uDAAc;AACtB,SAAS,wDAAe;AACxB,QAAQ,uDAAc;AACtB,QAAQ,uDAAc;AACtB,SAAS,wDAAe;AACxB,QAAQ,uDAAc;AACtB,QAAQ,uDAAc;AACtB,SAAS,wDAAe;AACxB,YAAY,2DAAkB;AAC9B,WAAW,0DAAiB;AAC5B,QAAQ,uDAAc;AACtB,QAAQ,uDAAc;AACtB,SAAS,wDAAe;AACxB,SAAS,wDAAe;AACxB,UAAU,yDAAgB;AAC1B,UAAU,yDAAgB;AAC1B,UAAU,yDAAgB;AAC1B,SAAS,wDAAe;AACxB,SAAS,wDAAe;AACxB,MAAM,sDAAY;AAClB,YAAY,2DAAkB;AAC9B;;AAEA,sEAAe,yDAAS,IAAC;;;;;;;;;;;;;AC9EQ;AACE;;AAEnC;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB,mDAAmD,6DAAO;AAC1D,uFAAuF,8DAAQ;AAC/F;AACA;AACA,GAAG;AACH;;;;;;;;;;;ACbA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA,qCAAqC;AACrC;AACA;;;;;;;;;;;ACNA;AACA;AACA;;AAEA,6BAAe,sCAAW;AAC1B;AACA;;;;;;;;;;;;ACNkC;;AAElC,6BAAe,oCAAS;;AAExB,+JAA+J,OAAO;AACtK,yHAAyH,OAAO;AAChI;AACA;AACA;AACA;AACA;;AAEA,SAAS,QAAQ;AACjB;AACA;;AAEA,aAAa,uDAAS;AACtB;;;;;;;;;;;ACjBA,6BAAe,sCAAW;;AAE1B,4DAA4D,OAAO;AACnE,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;ACVA,6BAAe,sCAAW;AAC1B;AACA,yBAAyB,oBAAoB;AAC7C;AACA;;;;;;;;;;;;ACJA;;AAEO;;AAEP;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;;AAEA;AACA;AACA,8CAA8C,OAAO;AACrD,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;;;;;;;;AC1GA,6BAAe,sCAAW;;AAE1B,6DAA6D,QAAQ;AACrE,6EAA6E,SAAS;AACtF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC3BA;AACA;AACA;;AAEA,6BAAe,sCAAW;AAC1B;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;;AAEA,6BAAe,sCAAW;AAC1B;AACA;;;;;;;;;;;;;ACPkC;AACC;;AAEnC,6BAAe,oCAAS;AACxB,6CAA6C,8DAAQ;;AAErD,sFAAsF,OAAO;AAC7F,gHAAgH,OAAO;AACvH;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,uDAAS;AACtB;;;;;;;;;;;;;AChBkC;AACO;;AAEzC,6BAAe,oCAAS;AACxB,6CAA6C,iEAAW;;AAExD,0FAA0F,OAAO;AACjG,+DAA+D,OAAO;AACtE;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,uDAAS;AACtB;;;;;;;;;;;AChBA,6BAAe,sCAAW;AAC1B;AACA,yBAAyB,SAAS;AAClC;AACA;;;;;;;;;;;;ACJkC;;AAElC,6BAAe,oCAAS;AACxB;;AAEA;AACA;AACA;;AAEA,uFAAuF,OAAO;AAC9F,yGAAyG,OAAO;AAChH;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,uDAAS;AACtB;;AAEA;AACA;AACA;;;;;;;;;;;ACvBA,6BAAe,oCAAS;AACxB;AACA;;;;;;;;;;;;;ACFoC;;AAEpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,SAAS,4DAAW;AACpB;;;;;;;;;;;AClCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxBA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;ACNA;AACA;AACA;;AAEA,6BAAe,oCAAS;AACxB;AACA;AACA;AACA;;;;;;;;;;;ACRA,6BAAe,oCAAS;AACxB;AACA;AACA,2BAA2B;AAC3B;;;;;;;;;;;;;;;;;;ACJA;AACmD;AAC5C;AACP;AACA;AACA;AACA;AACA,YAAY,oDAAsB;AAClC,YAAY,oDAAsB;AAClC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpCO;AACP;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,kDAAkD,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA,0FAA0F;AAC1F;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3CO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClBmD;AACnD;AACO;AACP;AACA;AACA;AACA,WAAW,qDAAuB;AAClC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnCqD;AAC9C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,4DAA8B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACxCqD;AACF;AACA;AACE;AACY;AACR;AACF;AACiF;AACxI;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO,qBAAqB,yDAAS;AACrC;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,gCAAgC,2DAAW;AAClD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO,uBAAuB,yDAAS;AACvC;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACO,+BAA+B,2DAAW;AACjD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO,0BAA0B,8DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,8DAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACO,4BAA4B,2DAAW;AAC9C;AACA;;;;;;;;;;;AC9SO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mBAAO,CAAC,IAA2B;AACnE;AACA,+EAA+E,8FAA8F;AAC7K;AACA,kBAAe;AACf;;;;;;;ACnBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B,GAAG,kBAAkB,GAAG,kBAAkB,GAAG,cAAc,GAAG,sBAAsB,GAAG,oBAAoB,GAAG,kBAAkB,GAAG,oBAAoB,GAAG,4BAA4B,GAAG,eAAe,GAAG,YAAY,GAAG,kBAAkB,GAAG,gBAAgB,GAAG,kBAAkB,GAAG,eAAe,GAAG,cAAc,GAAG,gBAAgB,GAAG,oBAAoB,GAAG,iBAAiB,GAAG,uBAAuB,GAAG,qBAAqB,GAAG,gBAAgB,GAAG,iBAAiB;AAC1e;AACA,iBAAiB;AACjB;AACA;AACA,0BAA0B;AAC1B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACraAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,8CAA8C;AAC9C,6BAAgC;AAChC,iCAAiC;AACjC;AACA;AACA;AACA,gBAAgB;AAChB,qBAAqB;AACrB,uBAAuB;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,cAAc;AACd,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,kBAAkB;AAClB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,YAAY;AACZ;AACA;AACA,eAAe;AACf;AACA,yBAAyB,WAAW;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AACloBAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB;AACtB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kGAAkG,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA,IAAI,kBAAkB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACppE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,kCAAkC;AAClC;AACA;AACA,oCAAoC;AACpC;AACA;AACA,oCAAoC;AACpC;AACA;AACA,sCAAsC;AACtC;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;AACA;AACA;AACA,SAAS;AACT;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC7yCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C,IAAI,uDAAuD,IAAI,uDAAuD,IAAI,oDAAoD;AACxP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,mDAAmD;AAChF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yDAAyD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,uDAAuD;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C,IAAI,uDAAuD,IAAI,uDAAuD,IAAI,oDAAoD;AACxP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,6CAA6C;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,mDAAmD;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,mDAAmD;AAChF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,8CAA8C;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yDAAyD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,2CAA2C;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,qDAAqD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrxD;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,iDAAiD;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,+CAA+C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,qDAAqD;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,6BAA6B,0CAA0C;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;ACp+sBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,IAAa;AACrC;AACA,wCAAwC,mBAAO,CAAC,IAAiC;AACjF;AACA;AACA;AACA,2BAA2B,mwBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB;AACxB;;;;;;;AChUa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,kBAAkB,GAAG,kBAAkB,GAAG,gBAAgB,GAAG,eAAe,GAAG,gBAAgB,GAAG,iBAAiB,GAAG,gBAAgB;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;;;;;;ACnJa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB,sCAAsC,kBAAkB;AACvF,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,CAAC;AACD,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mCAAmC,GAAG,mCAAmC,GAAG,gCAAgC,GAAG,2BAA2B,GAAG,yBAAyB,GAAG,mBAAmB;AAC5L;AACA,0BAA0B,mBAAO,CAAC,IAA0C;AAC5E,wCAAwC,mBAAO,CAAC,IAAiC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,mCAAmC;AACnC;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClXa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4DAA4D,6BAA6B,KAAK;AAC/F;;;;;;;AC3Ca;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc,GAAG,qBAAqB;AACtC,mBAAmB,mBAAO,CAAC,IAAc;AACzC,qBAAqB;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACxCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,iDAAiD,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oEAAoE,yDAAyD;AAC7H;AACA;AACA,CAAC;AACD,kBAAkB;AAClB;;;;;;;AChFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;;;;;;ACtHa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc,GAAG,iBAAiB;AAClC,mBAAmB,mBAAO,CAAC,IAAiB;AAC5C,wBAAwB,mBAAO,CAAC,IAAqB;AACrD,uBAAuB,mBAAO,CAAC,IAAuB;AACtD,kBAAkB,mBAAO,CAAC,IAA6B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E,6EAA6E;AAC7E;AACA;AACA;;;;;;;AChJa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,wBAAwB,GAAG,sBAAsB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,6BAA6B;AAC7B;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;;;;;;;ACvFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,sBAAsB,GAAG,oBAAoB,GAAG,yBAAyB,GAAG,yBAAyB;AACjI,kBAAkB,mBAAO,CAAC,IAA6B;AACvD,2BAA2B,mBAAO,CAAC,IAAsC;AACzE;AACA,qBAAqB,mBAAO,CAAC,EAAkB;AAC/C,sBAAsB;AACtB,mBAAmB,mBAAO,CAAC,IAAgB;AAC3C,oBAAoB;AACpB,wBAAwB,mBAAO,CAAC,IAAqB;AACrD,yBAAyB;AACzB,2BAA2B,mBAAO,CAAC,IAAsB;AACzD,6BAA6B,KAAK,GAAG,OAAO,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM,aAAa,MAAM,uBAAuB,MAAM;AAClE,mBAAmB,MAAM,2BAA2B,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B;AACA;AACA;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,yBAAyB;AACzB;;;;;;;AC/Na;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK;AACpE;;;;;;;ACxCa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,gCAAgC,GAAG,cAAc,GAAG,wBAAwB,GAAG,iBAAiB,GAAG,qBAAqB,GAAG,2BAA2B,GAAG,2BAA2B,GAAG,wBAAwB,GAAG,uCAAuC;AAC3R;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAO,CAAC,IAA6B;AACvD;AACA,wCAAwC,mBAAO,CAAC,IAAiC;AACjF;AACA,uBAAuB,mBAAO,CAAC,IAAuB;AACtD,wBAAwB,mBAAO,CAAC,IAAqB;AACrD,0BAA0B,mBAAO,CAAC,IAAqB;AACvD,mCAAmC,IAAI;AACvC;AACA,oCAAoC,IAAI,KAAK;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,sBAAsB,wBAAwB;AAC9C,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yCAAyC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,yEAAyE;AACnK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtuBa;AACb,6BAA6C,EAAE,aAAa,CAAC;AAC7D,yBAAkB,GAAG,yBAAY,GAAG,yBAAyB,GAAG,yBAA6B,GAAG,yBAAwB,GAAG,yBAAyB,GAAG,yBAAiB,GAAG,yBAAmB,GAAG,yBAAgB,GAAG,UAA8B,GAAG,yBAAwB,GAAG,UAAsB,GAAG,yBAAkB,GAAG,yBAAkB;AAChV,iBAAiB,mBAAO,CAAC,IAAc;AACvC,yBAAkB;AAClB,qBAAqB,mBAAO,CAAC,IAAkB;AAC/C,UAAsB;AACtB,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,yBAAwB;AACxB,6BAA6B,mBAAO,CAAC,IAA0B;AAC/D,UAA8B;AAC9B,iBAAiB,mBAAO,CAAC,IAAc;AACvC,yBAAkB;AAClB,WAAW,mBAAO,CAAC,IAAe;AAClC,yBAAY;AACZ,iBAAiB,mBAAO,CAAC,IAAmB;AAC5C,yBAAkB;AAClB,eAAe,mBAAO,CAAC,IAAY;AACnC,yBAAgB;AAChB,gBAAgB,mBAAO,CAAC,IAAkB;AAC1C,yBAAiB;AACjB,uBAAuB,mBAAO,CAAC,IAAyB;AACxD,yBAAwB;AACxB,wBAAwB,mBAAO,CAAC,IAAuC;AACvE,yBAAyB;AACzB,4BAA4B,mBAAO,CAAC,IAA2C;AAC/E,yBAA6B;AAC7B,wBAAwB,mBAAO,CAAC,IAAuC;AACvE,yBAAyB;AACzB,kBAAkB,mBAAO,CAAC,IAAe;AACzC,yBAAmB;AACnB;;;;;;;AC/Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;;;;;;;ACFa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,+BAA+B;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,4BAA4B;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA,CAAC;AACD,+BAA+B;AAC/B,+BAA+B;AAC/B;;;;;;;ACvDa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B,GAAG,8BAA8B,GAAG,6BAA6B,GAAG,yBAAyB,GAAG,4BAA4B,GAAG,6BAA6B,GAAG,sBAAsB,GAAG,yBAAyB,GAAG,kBAAkB,GAAG,cAAc,GAAG,2BAA2B,GAAG,sBAAsB,GAAG,8BAA8B,GAAG,oBAAoB,GAAG,0BAA0B,GAAG,2CAA2C,GAAG,qBAAqB,GAAG,2BAA2B,GAAG,qBAAqB,GAAG,0BAA0B,GAAG,gBAAgB,GAAG,kBAAkB,GAAG,4BAA4B,GAAG,uBAAuB,GAAG,cAAc,GAAG,gBAAgB;AAC3rB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qBAAqB,uBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC,iCAAiC,YAAY;AAC7C;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,iCAAiC;AACjC;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;;;;;;;;ACxRa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gCAAgC,GAAG,iBAAiB,GAAG,mBAAmB,GAAG,gCAAgC,GAAG,0BAA0B,GAAG,mCAAmC,GAAG,gCAAgC,GAAG,kCAAkC,GAAG,6BAA6B,GAAG,oCAAoC,GAAG,4BAA4B,GAAG,0BAA0B,GAAG,2BAA2B,GAAG,yBAAyB;AACrb;AACA,wCAAwC,mBAAO,CAAC,IAAiC;AACjF;AACA,kBAAkB,mBAAO,CAAC,IAAe;AACzC,gCAAgC,mBAAO,CAAC,IAA0C;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,+BAA+B;AAC/B,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;;;;;;;ACzXa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B,GAAG,sBAAsB,GAAG,4BAA4B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;;;;;;ACxDa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qCAAqC,GAAG,uBAAuB,GAAG,oBAAoB,GAAG,qBAAqB,GAAG,+BAA+B,GAAG,uBAAuB,GAAG,+BAA+B,GAAG,iCAAiC,GAAG,cAAc,GAAG,cAAc,GAAG,0BAA0B,GAAG,8BAA8B,GAAG,wBAAwB,GAAG,yBAAyB,GAAG,0BAA0B,GAAG,yBAAyB,GAAG,4BAA4B,GAAG,4BAA4B;AAC9f,0BAA0B,mBAAO,CAAC,IAAuC;AACzE,8BAA8B,mBAAO,CAAC,IAA2C;AACjF,uBAAuB,mBAAO,CAAC,IAAoB;AACnD,0BAA0B,mBAAO,CAAC,IAAuC;AACzE,yBAAyB,mBAAO,CAAC,IAAyB;AAC1D,wCAAwC,mBAAO,CAAC,IAAiC;AACjF,4CAA4C,mBAAO,CAAC,IAAqC;AACzF;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB,WAAW,OAAO;AAClB;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE,GAAG,EAAE;AACjC,gCAAgC,GAAG,KAAK,EAAE;AAC1C,+BAA+B,GAAG,IAAI,EAAE;AACxC;AACA;AACA,0CAA0C,EAAE;AAC5C;AACA,0CAA0C,EAAE;AAC5C;AACA,0CAA0C,EAAE;AAC5C;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,0BAA0B;AAC5D,oCAAoC,gCAAgC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,cAAc;AACd;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,wBAAwB;AACnC,WAAW,kCAAkC;AAC7C,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;;;;;;AC7fa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,uBAAuB,GAAG,iBAAiB,GAAG,mBAAmB,GAAG,YAAY;AACvG;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnsCAAsC;AACtC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzeA;AACA;AACA;AACO;AACP;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,oBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,0BAA0B,QAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP,SAAS,kDAAS;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCgE;AACF;AACE;AACE;AACA;AACG;AACU;AAC5C;AACY;AACI;AACV;AACc;AACd;AAC4K;AACrN;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AAC0B;AACvD;AACP;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kDAAoB;AAChD;AACA,uBAAuB,4CAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,0CAAY;AAC9B;AACA,wBAAwB,0CAAY;AACpC;AACA;AACA,iCAAiC,0CAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0CAAY;AACtC,6BAA6B,qDAAuB;AACpD,6BAA6B,oDAAsB;AACnD,+BAA+B,uEAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA,8BAA8B,0CAAY;AAC1C,iCAAiC,qDAAuB;AACxD,iCAAiC,oDAAsB;AACvD;AACA;AACA,kCAAkC,0CAAY;AAC9C,gCAAgC,gBAAgB;AAChD;AACA,uCAAuC,uEAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sDAAwB,8BAA8B,sDAAwB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iDAAmB;AAC7C;AACA;AACA,gBAAgB,qDAAuB;AACvC;AACA,wBAAwB,WAAW;AACnC,gBAAgB,qDAAuB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kDAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,iCAAiC,sDAAwB;AACzD,iCAAiC,uDAAyB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoC;AAC7B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0CAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kDAAoB;AACtC,kBAAkB,kDAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;AC7JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,4CAA4C,SAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8D;AACtB;AACxC;AACO;AACP;AACA;AACA;AACA;AACA,YAAY,+DAAsB;AAClC;AACA;AACA,YAAY,+DAAsB;AAClC;AACA;AACA,YAAY,+DAAsB;AAClC;AACA;AACA,YAAY,+DAAsB;AAClC;AACA;AACA,YAAY,+DAAsB;AAClC;AACA;AACA,YAAY,+DAAsB;AAClC;AACA;AACA,YAAY,+DAAsB;AACleAAe,WAAW;AAC1B;AACA;AACA;AACA,eAAe,qDAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+DAAsB;AACrsCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD;AACrD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oCAAoC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvoBO,SAAS,QAAQ,CAAC,QAAuC;IAC9D,MAAM,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC;IAE7C,KAAK,CAAC,WAAW,CAAC,iBAAiB,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;IAC3F,KAAK,CAAC,WAAW,CAAC,aAAa,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC;AACjF,CAAC;;;;;;;;;;;;;ACPD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAEU;AAE8D;AAE3E,IAAO,sBAAsB,GAAG,iFAAuB,CAAC;AAExD,IAAO,uBAAuB,GAAG,kFAAwB,CAAC;AAEa;AACvE;;GAEG;AACH,MAAM,qBAAsB,SAAQ,sBAAsB;IAA1D;;QACE,iBAAY,GAAG,IAAI,wFAA8B,CAAC;YAChD,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,eAAe;YAC5B,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;SACrB,CAAC,CAAC;QAEH,aAAQ,GAAG,IAAI,sFAA4B,CAAC;YAC1C,IAAI,EAAE,UAAU;YAChB,WAAW,EAAE,WAAW;YACxB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,gBAAW,GAAG,IAAI,sFAA4B,CAAC;YAC7C,IAAI,EAAE,aAAa;YACnB,WAAW,EAAE,cAAc;YAC3B,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,SAAI,GAAW,WAAW,CAAC;QAC3B,gBAAW,GAAW,mBAAmB,CAAC;QAC1C,WAAM,GAAmC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IAChG,CAAC;CAAA;AAED;;;GAGG;AACI,MAAM,6BAA8B,SAAQ,uBAAuB;IAA1E;;QACE,oDAAoD;QACpD,kBAAa,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAE5C,UAAK,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAiB/B,CAAC;IAfC,qBAAqB,CAAC,UAAuB;QAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QACvC,IAAI,UAAU,EAAE;YACd,MAAM,CAAC,IAAI,CACT,IAAI,wFAA8B,CAAC;gBACjC,IAAI,EAAE,gBAAgB;gBACtB,WAAW,EAAE,iBAAiB;gBAC9B,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE;gBAC/D,QAAQ,EAAE,+FAA+C,4EAAoE;gBAC7H,gDAAgD;gBAChD,YAAY,+DAAuD;aACpE,CAAC,CACH,CAAC;SACH;IACH,CAAC;CACF;;;;;;;;;;;ACvFY;AAMN,SAAS,aAAa,CAAC,OAA4B,EAAE,YAAoB;IAC9E,IAAI,IAAW,CAAC;IAChB,IAAI;QACF,MAAM,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAS,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAU,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACxF,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAS,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAU,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACxF,MAAM,MAAM,GAAW,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAgB,EAAE,CAAC;QAC9B,IAAI,KAAa,CAAC;QAClB,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YAC/C,IAAI;gBACF,KAAK,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;gBAChF,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;aACpB;YAAC,OAAO,KAAK,EAAE;gBACd,KAAK,GAAG,YAAY,CAAC;aACtB;YACD,KAAK,CAAC,IAAI,CAAC;gBACT,QAAQ,EAAU,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;gBAChD,KAAK,EAAU,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;gBACzC,KAAK;aACN,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,GAAG;YACL,KAAK;YACL,QAAQ;YACR,QAAQ;YACR,MAAM;YACN,YAAY,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE;SAC/C,CAAC;KACH;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,GAAG;YACL,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,CAAC;YACX,QAAQ,EAAE,CAAC;YACX,MAAM,EAAE,CAAC;YACT,YAAY,EAAE,EAAE;SACjB,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;;;;;;;;;;;;;;;;;;AC7CD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACU;AAGqE;AAClD;AAGgB;AAKC;AAC2B;AACjB;AACrB;AACyD;AAC/F,IAAO,mBAAmB,GAAG,mGAAsB,CAAC,mBAAmB,CAAC;AAEjE,MAAM,MAAM;IAWjB,YAAY,OAAiC;QAC3C,IAAI,CAAC,yBAAyB,GAAG,IAAI,sFAAyB,EAAE,CAAC;QACjE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,GAAG,GAAG,iEAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAC9C;IACH,CAAC;IAEM,MAAM,CAAC,OAA4B;QACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,+BAA+B,CAAC,6EAA6B,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;QAC3I,4DAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,sEAAa,CAAC,OAAO,EAAE,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnG,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE/D,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;QACrC,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;QACvC,IAAI,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAE7D,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEhC,MAAM,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAEzG,IAAI,CAAC,MAAM,GAAG,8DAAU,EAAE;aACvB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aACtD,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC;aAC1C,OAAO,CAAC,GAAG,CAAC,CAAC;QAEhB,IAAI,CAAC,MAAM,GAAG,+DAAW,EAAE;aACxB,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAChD,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,qBAAqB;QAE3D,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAEO,UAAU;QAChB,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAEjF,UAAU;aACP,KAAK,EAAE;aACP,MAAM,CAAC,MAAM,CAAC;aACd,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC;aAC5B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;aACb,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACzC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;aAClC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAE7C,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QAEhJ,UAAU,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IAEO,eAAe;QACrB,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACnF,WAAW;aACR,KAAK,EAAE;aACP,MAAM,CAAC,MAAM,CAAC;aACd,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;aAC7B,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,iBAAiB;aAC5D,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACxC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC;aAC5B,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC;aACjC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAEtE,WAAW;aACR,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,iBAAiB;aAC5D,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACxC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC;aACzB,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC;aACjC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IACxE,CAAC;IAEO,cAAc;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjF,UAAU;aACP,KAAK,EAAE;aACP,MAAM,CAAC,QAAQ,CAAC;aAChB,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC;aAC3B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE;YAChB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;aACD,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACvC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;aACb,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;aAC7B,EAAE,CAAC,mBAAmB,EAAE,CAAC,CAAC,EAAE,EAAE;YAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,0BAA0B;YAC9C,MAAM,CAAC,GAAwC,iEAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAE1E,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;gBAC5B,WAAW,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC;gBACnC,UAAU,EAAE,EAAE;gBACd,YAAY,EAAE,KAAK;gBACnB,SAAS,EAAE;oBACT;wBACE,WAAW,EAAE,CAAC,CAAC,QAAQ;wBACvB,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;qBAC3D;iBACF;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEL,UAAU;aACP,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aAC1C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aACvC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;aACb,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAEjC,UAAU,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IAEO,cAAc;QACpB,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE9E,UAAU;aACP,KAAK,EAAE;aACP,MAAM,CAAC,MAAM,CAAC;aACd,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC;aAC1B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;aACvB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aAC1C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAChD,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aAC1C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE;YAChB,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE;gBACxE,qBAAqB;gBACrB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACtC;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,qBAAqB;aACxD;iBAAM;gBACL,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,qBAAqB;aACxD;QACH,CAAC,CAAC,CAAC;QAEL,UAAU;aACP,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aAC1C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAChD,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aAC1C,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE;YAChB,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE;gBACxE,qBAAqB;gBACrB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACtC;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,qBAAqB;aACxD;iBAAM;gBACL,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,qBAAqB;aACxD;QACH,CAAC,CAAC,CAAC;QAEL,UAAU,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;QAE3B,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,kBAAkB;QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElF,SAAS;aACN,KAAK,EAAE;aACP,MAAM,CAAC,MAAM,CAAC;aACd,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC;aAC/B,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aACzC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,iBAAiB;aAC7D;iBAAM;gBACL,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aAC3C;QACH,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAE3B,SAAS;aACN,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;aACzC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBAC/B,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,iBAAiB;aAC7D;iBAAM;gBACL,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aAC3C;QACH,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAE3B,SAAS,CAAC,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAEO,aAAa,CAAC,QAAgB,EAAE,EAAU;QAChD,MAAM,SAAS,GAAG,2FAAc,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;QACxD,OAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEO,YAAY,CAAC,GAAW;QAC9B,MAAM,cAAc,GAAG;YACrB,IAAI,EAAE,GAAG;YACT,UAAU,EAAE,YAAY;YACxB,QAAQ,EAAE,MAAM;SACjB,CAAC;QACF,OAAO,mBAAmB,CAAC,cAAc,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACI,kBAAkB;QACvB,OAAO,IAAI,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACtF,CAAC;CACF;;;;;;;;AC1QD;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,4DAA4D,GAAkB;IAC9E,IAAI,EAAE,8DAA8D;IACpE,WAAW,EAAE,0BAA0B;IACvC,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAiC,EAAE,EAAE;QAC1C,IAAI,wDAAM,EAAE;YACR,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;SAC9B;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;QACjD,IAAI,QAAQ,IAAI,cAAc,EAAE;YAC5B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;SACvD;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,8DAA8D,CAAC,GAAG,4DAA4D,CAAC;CAC1J;AACD,iEAAe,4DAA4D,EAAC","sources":["webpack:///./node_modules/d3-array/src/array.js","webpack:///./node_modules/d3-array/src/ascending.js","webpack:///./node_modules/d3-array/src/bisect.js","webpack:///./node_modules/d3-array/src/bisector.js","webpack:///./node_modules/d3-array/src/histogram.js","webpack:///./node_modules/d3-array/src/index.js","webpack:///./node_modules/d3-array/src/range.js","webpack:///./node_modules/d3-array/src/threshold/freedmanDiaconis.js","webpack:///./node_modules/d3-array/src/ticks.js","webpack:///./node_modules/d3-collection/src/index.js","webpack:///./node_modules/d3-collection/src/map.js","webpack:///./node_modules/d3-collection/src/nest.js","webpack:///./node_modules/d3-collection/src/set.js","webpack:///./node_modules/d3-color/src/color.js","webpack:///./node_modules/d3-color/src/define.js","webpack:///./node_modules/d3-format/src/defaultLocale.js","webpack:///./node_modules/d3-format/src/exponent.js","webpack:///./node_modules/d3-format/src/formatDecimal.js","webpack:///./node_modules/d3-format/src/formatGroup.js","webpack:///./node_modules/d3-format/src/formatNumerals.js","webpack:///./node_modules/d3-format/src/formatPrefixAuto.js","webpack:///./node_modules/d3-format/src/formatRounded.js","webpack:///./node_modules/d3-format/src/formatSpecifier.js","webpack:///./node_modules/d3-format/src/formatTrim.js","webpack:///./node_modules/d3-format/src/formatTypes.js","webpack:///./node_modules/d3-format/src/identity.js","webpack:///./node_modules/d3-format/src/locale.js","webpack:///./node_modules/d3-format/src/precisionFixed.js","webpack:///./node_modules/d3-format/src/precisionPrefix.js","webpack:///./node_modules/d3-format/src/precisionRound.js","webpack:///./node_modules/d3-interpolate/src/array.js","webpack:///./node_modules/d3-interpolate/src/basis.js","webpack:///./node_modules/d3-interpolate/src/basisClosed.js","webpack:///./node_modules/d3-interpolate/src/color.js","webpack:///./node_modules/d3-interpolate/src/constant.js","webpack:///./node_modules/d3-interpolate/src/date.js","webpack:///./node_modules/d3-interpolate/src/number.js","webpack:///./node_modules/d3-interpolate/src/numberArray.js","webpack:///./node_modules/d3-interpolate/src/object.js","webpack:///./node_modules/d3-interpolate/src/rgb.js","webpack:///./node_modules/d3-interpolate/src/round.js","webpack:///./node_modules/d3-interpolate/src/string.js","webpack:///./node_modules/d3-interpolate/src/value.js","webpack:///./node_modules/d3-scale/src/array.js","webpack:///./node_modules/d3-scale/src/band.js","webpack:///./node_modules/d3-scale/src/constant.js","webpack:///./node_modules/d3-scale/src/continuous.js","webpack:///./node_modules/d3-scale/src/diverging.js","webpack:///./node_modules/d3-scale/src/identity.js","webpack:///./node_modules/d3-scale/src/index.js","webpack:///./node_modules/d3-scale/src/init.js","webpack:///./node_modules/d3-scale/src/linear.js","webpack:///./node_modules/d3-scale/src/log.js","webpack:///./node_modules/d3-scale/src/number.js","webpack:///./node_modules/d3-scale/src/ordinal.js","webpack:///./node_modules/d3-scale/src/pow.js","webpack:///./node_modules/d3-scale/src/quantile.js","webpack:///./node_modules/d3-scale/src/quantize.js","webpack:///./node_modules/d3-scale/src/sequential.js","webpack:///./node_modules/d3-scale/src/sequentialQuantile.js","webpack:///./node_modules/d3-scale/src/symlog.js","webpack:///./node_modules/d3-scale/src/threshold.js","webpack:///./node_modules/d3-scale/src/tickFormat.js","webpack:///./node_modules/d3-scale/src/time.js","webpack:///./node_modules/d3-scale/src/utcTime.js","webpack:///./node_modules/d3-selection/src/constant.js","webpack:///./node_modules/d3-selection/src/creator.js","webpack:///./node_modules/d3-selection/src/matcher.js","webpack:///./node_modules/d3-selection/src/namespace.js","webpack:///./node_modules/d3-selection/src/namespaces.js","webpack:///./node_modules/d3-selection/src/select.js","webpack:///./node_modules/d3-selection/src/selection/append.js","webpack:///./node_modules/d3-selection/src/selection/attr.js","webpack:///./node_modules/d3-selection/src/selection/call.js","webpack:///./node_modules/d3-selection/src/selection/classed.js","webpack:///./node_modules/d3-selection/src/selection/clone.js","webpack:///./node_modules/d3-selection/src/selection/data.js","webpack:///./node_modules/d3-selection/src/selection/datum.js","webpack:///./node_modules/d3-selection/src/selection/dispatch.js","webpack:///./node_modules/d3-selection/src/selection/each.js","webpack:///./node_modules/d3-selection/src/selection/empty.js","webpack:///./node_modules/d3-selection/src/selection/enter.js","webpack:///./node_modules/d3-selection/src/selection/exit.js","webpack:///./node_modules/d3-selection/src/selection/filter.js","webpack:///./node_modules/d3-selection/src/selection/html.js","webpack:///./node_modules/d3-selection/src/selection/index.js","webpack:///./node_modules/d3-selection/src/selection/insert.js","webpack:///./node_modules/d3-selection/src/selection/join.js","webpack:///./node_modules/d3-selection/src/selection/lower.js","webpack:///./node_modules/d3-selection/src/selection/merge.js","webpack:///./node_modules/d3-selection/src/selection/node.js","webpack:///./node_modules/d3-selection/src/selection/nodes.js","webpack:///./node_modules/d3-selection/src/selection/on.js","webpack:///./node_modules/d3-selection/src/selection/order.js","webpack:///./node_modules/d3-selection/src/selection/property.js","webpack:///./node_modules/d3-selection/src/selection/raise.js","webpack:///./node_modules/d3-selection/src/selection/remove.js","webpack:///./node_modules/d3-selection/src/selection/select.js","webpack:///./node_modules/d3-selection/src/selection/selectAll.js","webpack:///./node_modules/d3-selection/src/selection/size.js","webpack:///./node_modules/d3-selection/src/selection/sort.js","webpack:///./node_modules/d3-selection/src/selection/sparse.js","webpack:///./node_modules/d3-selection/src/selection/style.js","webpack:///./node_modules/d3-selection/src/selection/text.js","webpack:///./node_modules/d3-selection/src/selector.js","webpack:///./node_modules/d3-selection/src/selectorAll.js","webpack:///./node_modules/d3-selection/src/window.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/converterHelper.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataRoleHelper.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObject.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjects.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewObjectsParser.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewTransform.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js","webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.cultures.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/globalize.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/globalize/powerbiGlobalizeLocales.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateTimeSequence.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/date/dateUtils.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystem.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/displayUnitSystem/displayUnitSystemType.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/family.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/font/familyInfo.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formatting.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/dateTimeFormat.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingEncoder.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/formattingService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/iFormattingService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/formattingService/numberFormat.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/index.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/interfaces.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/storageService/ephemeralStorageService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/stringExtensions.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textMeasurementService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/textUtil.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/valueFormatter.js","webpack:///./node_modules/powerbi-visuals-utils-formattingutils/lib/src/wordBreaker.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/double.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/arrayExtensions.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/enumExtensions.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/logicExtensions.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/regExpExtensions.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/extensions/stringExtensions.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/index.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/jsonComparer.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequence.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/numericSequence/numericSequenceRange.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/pixelConverter.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/prototype.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/textSizeDefaults.js","webpack:///./node_modules/powerbi-visuals-utils-typeutils/lib/valueType.js","webpack:///./src/setStyle.ts","webpack:///./src/settings.ts","webpack:///./src/transformData.ts","webpack:///./src/visual.ts","webpack:///external var \"Function('return this')()\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import {slice} from \"./array\";\nimport bisect from \"./bisect\";\nimport constant from \"./constant\";\nimport extent from \"./extent\";\nimport identity from \"./identity\";\nimport range from \"./range\";\nimport {tickStep} from \"./ticks\";\nimport sturges from \"./threshold/sturges\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","export {default as bisect, bisectRight, bisectLeft} from \"./bisect\";\nexport {default as ascending} from \"./ascending\";\nexport {default as bisector} from \"./bisector\";\nexport {default as cross} from \"./cross\";\nexport {default as descending} from \"./descending\";\nexport {default as deviation} from \"./deviation\";\nexport {default as extent} from \"./extent\";\nexport {default as histogram} from \"./histogram\";\nexport {default as thresholdFreedmanDiaconis} from \"./threshold/freedmanDiaconis\";\nexport {default as thresholdScott} from \"./threshold/scott\";\nexport {default as thresholdSturges} from \"./threshold/sturges\";\nexport {default as max} from \"./max\";\nexport {default as mean} from \"./mean\";\nexport {default as median} from \"./median\";\nexport {default as merge} from \"./merge\";\nexport {default as min} from \"./min\";\nexport {default as pairs} from \"./pairs\";\nexport {default as permute} from \"./permute\";\nexport {default as quantile} from \"./quantile\";\nexport {default as range} from \"./range\";\nexport {default as scan} from \"./scan\";\nexport {default as shuffle} from \"./shuffle\";\nexport {default as sum} from \"./sum\";\nexport {default as ticks, tickIncrement, tickStep} from \"./ticks\";\nexport {default as transpose} from \"./transpose\";\nexport {default as variance} from \"./variance\";\nexport {default as zip} from \"./zip\";\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","import {map} from \"../array\";\nimport ascending from \"../ascending\";\nimport number from \"../number\";\nimport quantile from \"../quantile\";\n\nexport default function(values, min, max) {\n  values = map.call(values, number).sort(ascending);\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export {default as nest} from \"./nest\";\nexport {default as set} from \"./set\";\nexport {default as map} from \"./map\";\nexport {default as keys} from \"./keys\";\nexport {default as values} from \"./values\";\nexport {default as entries} from \"./entries\";\n","export var prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map.prototype = {\n  constructor: Map,\n  has: function(key) {\n    return (prefix + key) in this;\n  },\n  get: function(key) {\n    return this[prefix + key];\n  },\n  set: function(key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function(key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function() {\n    for (var property in this) if (property[0] === prefix) delete this[property];\n  },\n  keys: function() {\n    var keys = [];\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n    return keys;\n  },\n  values: function() {\n    var values = [];\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\n    return values;\n  },\n  entries: function() {\n    var entries = [];\n    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n    return entries;\n  },\n  size: function() {\n    var size = 0;\n    for (var property in this) if (property[0] === prefix) ++size;\n    return size;\n  },\n  empty: function() {\n    for (var property in this) if (property[0] === prefix) return false;\n    return true;\n  },\n  each: function(f) {\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n  }\n};\n\nfunction map(object, f) {\n  var map = new Map;\n\n  // Copy constructor.\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n  // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n    var i = -1,\n        n = object.length,\n        o;\n\n    if (f == null) while (++i < n) map.set(i, object[i]);\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\n  }\n\n  // Convert object to map.\n  else if (object) for (var key in object) map.set(key, object[key]);\n\n  return map;\n}\n\nexport default map;\n","import map from \"./map\";\n\nexport default function() {\n  var keys = [],\n      sortKeys = [],\n      sortValues,\n      rollup,\n      nest;\n\n  function apply(array, depth, createResult, setResult) {\n    if (depth >= keys.length) {\n      if (sortValues != null) array.sort(sortValues);\n      return rollup != null ? rollup(array) : array;\n    }\n\n    var i = -1,\n        n = array.length,\n        key = keys[depth++],\n        keyValue,\n        value,\n        valuesByKey = map(),\n        values,\n        result = createResult();\n\n    while (++i < n) {\n      if (values = valuesByKey.get(keyValue = key(value = array[i]) + \"\")) {\n        values.push(value);\n      } else {\n        valuesByKey.set(keyValue, [value]);\n      }\n    }\n\n    valuesByKey.each(function(values, key) {\n      setResult(result, key, apply(values, depth, createResult, setResult));\n    });\n\n    return result;\n  }\n\n  function entries(map, depth) {\n    if (++depth > keys.length) return map;\n    var array, sortKey = sortKeys[depth - 1];\n    if (rollup != null && depth >= keys.length) array = map.entries();\n    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });\n    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;\n  }\n\n  return nest = {\n    object: function(array) { return apply(array, 0, createObject, setObject); },\n    map: function(array) { return apply(array, 0, createMap, setMap); },\n    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },\n    key: function(d) { keys.push(d); return nest; },\n    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },\n    sortValues: function(order) { sortValues = order; return nest; },\n    rollup: function(f) { rollup = f; return nest; }\n  };\n}\n\nfunction createObject() {\n  return {};\n}\n\nfunction setObject(object, key, value) {\n  object[key] = value;\n}\n\nfunction createMap() {\n  return map();\n}\n\nfunction setMap(map, key, value) {\n  map.set(key, value);\n}\n","import {default as map, prefix} from \"./map\";\n\nfunction Set() {}\n\nvar proto = map.prototype;\n\nSet.prototype = set.prototype = {\n  constructor: Set,\n  has: proto.has,\n  add: function(value) {\n    value += \"\";\n    this[prefix + value] = value;\n    return this;\n  },\n  remove: proto.remove,\n  clear: proto.clear,\n  values: proto.keys,\n  size: proto.size,\n  empty: proto.empty,\n  each: proto.each\n};\n\nfunction set(object, f) {\n  var set = new Set;\n\n  // Copy constructor.\n  if (object instanceof Set) object.each(function(value) { set.add(value); });\n\n  // Otherwise, assume it’s an array.\n  else if (object) {\n    var i = -1, n = object.length;\n    if (f == null) while (++i < n) set.add(object[i]);\n    else while (++i < n) set.add(f(object[i], i, object));\n  }\n\n  return set;\n}\n\nexport default set;\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy: function(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? \"rgb(\" : \"rgba(\")\n      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n      + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n      + (a === 1 ? \")\" : \", \" + a + \")\");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"hsl(\" : \"hsla(\")\n        + (this.h || 0) + \", \"\n        + (this.s || 0) * 100 + \"%, \"\n        + (this.l || 0) * 100 + \"%\"\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": formatDecimal,\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n","import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","var array = Array.prototype;\n\nexport var map = array.map;\nexport var slice = array.slice;\n","import {range as sequence} from \"d3-array\";\nimport {initRange} from \"./init\";\nimport ordinal from \"./ordinal\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      range = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range[1] < range[0],\n        start = range[reverse - 0],\n        stop = range[1 - reverse];\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = [+_[0], +_[1]], round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), range)\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(domain) {\n  var a = domain[0], b = domain[domain.length - 1], t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous(transform, untransform) {\n  return transformer()(transform, untransform);\n}\n","import {identity} from \"./continuous\";\nimport {initInterpolator} from \"./init\";\nimport {linearish} from \"./linear\";\nimport {loggish} from \"./log\";\nimport {copy} from \"./sequential\";\nimport {symlogish} from \"./symlog\";\nimport {powish} from \"./pow\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 0.5,\n      x2 = 1,\n      t0,\n      t1,\n      t2,\n      k10,\n      k21,\n      interpolator = identity,\n      transform,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);\n    return scale;\n  };\n}\n\nexport default function diverging() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, diverging());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingLog() {\n  var scale = loggish(transformer()).domain([0.1, 1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, divergingLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, divergingPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function divergingSqrt() {\n  return divergingPow.apply(null, arguments).exponent(0.5);\n}\n","import {map} from \"./array\";\nimport {linearish} from \"./linear\";\nimport number from \"./number\";\n\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = map.call(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? map.call(domain, number) : [0, 1];\n\n  return linearish(scale);\n}\n","export {\n  default as scaleBand,\n  point as scalePoint\n} from \"./band\";\n\nexport {\n  default as scaleIdentity\n} from \"./identity\";\n\nexport {\n  default as scaleLinear\n} from \"./linear\";\n\nexport {\n  default as scaleLog\n} from \"./log\";\n\nexport {\n  default as scaleSymlog\n} from \"./symlog\";\n\nexport {\n  default as scaleOrdinal,\n  implicit as scaleImplicit\n} from \"./ordinal\";\n\nexport {\n  default as scalePow,\n  sqrt as scaleSqrt\n} from \"./pow\";\n\nexport {\n  default as scaleQuantile\n} from \"./quantile\";\n\nexport {\n  default as scaleQuantize\n} from \"./quantize\";\n\nexport {\n  default as scaleThreshold\n} from \"./threshold\";\n\nexport {\n  default as scaleTime\n} from \"./time\";\n\nexport {\n  default as scaleUtc\n} from \"./utcTime\";\n\nexport {\n  default as scaleSequential,\n  sequentialLog as scaleSequentialLog,\n  sequentialPow as scaleSequentialPow,\n  sequentialSqrt as scaleSequentialSqrt,\n  sequentialSymlog as scaleSequentialSymlog\n} from \"./sequential\";\n\nexport {\n  default as scaleSequentialQuantile\n} from \"./sequentialQuantile\";\n\nexport {\n  default as scaleDiverging,\n  divergingLog as scaleDivergingLog,\n  divergingPow as scaleDivergingPow,\n  divergingSqrt as scaleDivergingSqrt,\n  divergingSymlog as scaleDivergingSymlog\n} from \"./diverging\";\n\nexport {\n  default as tickFormat\n} from \"./tickFormat\";\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.interpolator(domain); break;\n    default: this.interpolator(interpolator).domain(domain); break;\n  }\n  return this;\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy, identity} from \"./continuous\";\nimport {initRange} from \"./init\";\nimport tickFormat from \"./tickFormat\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous(identity, identity);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {ticks} from \"d3-array\";\nimport {format} from \"d3-format\";\nimport nice from \"./nice\";\nimport {copy, transformer} from \"./continuous\";\nimport {initRange} from \"./init\";\n\nfunction transformLog(x) {\n  return Math.log(x);\n}\n\nfunction transformExp(x) {\n  return Math.exp(x);\n}\n\nfunction transformLogn(x) {\n  return -Math.log(-x);\n}\n\nfunction transformExpn(x) {\n  return -Math.exp(-x);\n}\n\nfunction pow10(x) {\n  return isFinite(x) ? +(\"1e\" + x) : x < 0 ? 0 : x;\n}\n\nfunction powp(base) {\n  return base === 10 ? pow10\n      : base === Math.E ? Math.exp\n      : function(x) { return Math.pow(base, x); };\n}\n\nfunction logp(base) {\n  return base === Math.E ? Math.log\n      : base === 10 && Math.log10\n      || base === 2 && Math.log2\n      || (base = Math.log(base), function(x) { return Math.log(x) / base; });\n}\n\nfunction reflect(f) {\n  return function(x) {\n    return -f(-x);\n  };\n}\n\nexport function loggish(transform) {\n  var scale = transform(transformLog, transformExp),\n      domain = scale.domain,\n      base = 10,\n      logs,\n      pows;\n\n  function rescale() {\n    logs = logp(base), pows = powp(base);\n    if (domain()[0] < 0) {\n      logs = reflect(logs), pows = reflect(pows);\n      transform(transformLogn, transformExpn);\n    } else {\n      transform(transformLog, transformExp);\n    }\n    return scale;\n  }\n\n  scale.base = function(_) {\n    return arguments.length ? (base = +_, rescale()) : base;\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.ticks = function(count) {\n    var d = domain(),\n        u = d[0],\n        v = d[d.length - 1],\n        r;\n\n    if (r = v < u) i = u, u = v, v = i;\n\n    var i = logs(u),\n        j = logs(v),\n        p,\n        k,\n        t,\n        n = count == null ? 10 : +count,\n        z = [];\n\n    if (!(base % 1) && j - i < n) {\n      i = Math.round(i) - 1, j = Math.round(j) + 1;\n      if (u > 0) for (; i < j; ++i) {\n        for (k = 1, p = pows(i); k < base; ++k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      } else for (; i < j; ++i) {\n        for (k = base - 1, p = pows(i); k >= 1; --k) {\n          t = p * k;\n          if (t < u) continue;\n          if (t > v) break;\n          z.push(t);\n        }\n      }\n    } else {\n      z = ticks(i, j, Math.min(j - i, n)).map(pows);\n    }\n\n    return r ? z.reverse() : z;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    if (specifier == null) specifier = base === 10 ? \".0e\" : \",\";\n    if (typeof specifier !== \"function\") specifier = format(specifier);\n    if (count === Infinity) return specifier;\n    if (count == null) count = 10;\n    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?\n    return function(d) {\n      var i = d / pows(Math.round(logs(d)));\n      if (i * base < base - 0.5) i *= base;\n      return i <= k ? specifier(d) : \"\";\n    };\n  };\n\n  scale.nice = function() {\n    return domain(nice(domain(), {\n      floor: function(x) { return pows(Math.floor(logs(x))); },\n      ceil: function(x) { return pows(Math.ceil(logs(x))); }\n    }));\n  };\n\n  return scale;\n}\n\nexport default function log() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, log()).base(scale.base());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","export default function(x) {\n  return +x;\n}\n","import {map} from \"d3-collection\";\nimport {slice} from \"./array\";\nimport {initRange} from \"./init\";\n\nexport var implicit = {name: \"implicit\"};\n\nexport default function ordinal() {\n  var index = map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map();\n    var i = -1, n = _.length, d, key;\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {linearish} from \"./linear\";\nimport {copy, identity, transformer} from \"./continuous\";\nimport {initRange} from \"./init\";\n\nfunction transformPow(exponent) {\n  return function(x) {\n    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);\n  };\n}\n\nfunction transformSqrt(x) {\n  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);\n}\n\nfunction transformSquare(x) {\n  return x < 0 ? -x * x : x * x;\n}\n\nexport function powish(transform) {\n  var scale = transform(identity, identity),\n      exponent = 1;\n\n  function rescale() {\n    return exponent === 1 ? transform(identity, identity)\n        : exponent === 0.5 ? transform(transformSqrt, transformSquare)\n        : transform(transformPow(exponent), transformPow(1 / exponent));\n  }\n\n  scale.exponent = function(_) {\n    return arguments.length ? (exponent = +_, rescale()) : exponent;\n  };\n\n  return linearish(scale);\n}\n\nexport default function pow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, pow()).exponent(scale.exponent());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n\nexport function sqrt() {\n  return pow.apply(null, arguments).exponent(0.5);\n}\n","import {ascending, bisect, quantile as threshold} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {initRange} from \"./init\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {linearish} from \"./linear\";\nimport {initRange} from \"./init\";\n\nexport default function quantize() {\n  var x0 = 0,\n      x1 = 1,\n      n = 1,\n      domain = [0.5],\n      range = [0, 1],\n      unknown;\n\n  function scale(x) {\n    return x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  function rescale() {\n    var i = -1;\n    domain = new Array(n);\n    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);\n    return scale;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN]\n        : i < 1 ? [x0, domain[0]]\n        : i >= n ? [domain[n - 1], x1]\n        : [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : scale;\n  };\n\n  scale.thresholds = function() {\n    return domain.slice();\n  };\n\n  scale.copy = function() {\n    return quantize()\n        .domain([x0, x1])\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(linearish(scale), arguments);\n}\n","import {identity} from \"./continuous\";\nimport {initInterpolator} from \"./init\";\nimport {linearish} from \"./linear\";\nimport {loggish} from \"./log\";\nimport {symlogish} from \"./symlog\";\nimport {powish} from \"./pow\";\n\nfunction transformer() {\n  var x0 = 0,\n      x1 = 1,\n      t0,\n      t1,\n      k10,\n      transform,\n      interpolator = identity,\n      clamp = false,\n      unknown;\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, scale) : clamp;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t) {\n    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);\n    return scale;\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .interpolator(source.interpolator())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport default function sequential() {\n  var scale = linearish(transformer()(identity));\n\n  scale.copy = function() {\n    return copy(scale, sequential());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialLog() {\n  var scale = loggish(transformer()).domain([1, 10]);\n\n  scale.copy = function() {\n    return copy(scale, sequentialLog()).base(scale.base());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSymlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialSymlog()).constant(scale.constant());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialPow() {\n  var scale = powish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, sequentialPow()).exponent(scale.exponent());\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n\nexport function sequentialSqrt() {\n  return sequentialPow.apply(null, arguments).exponent(0.5);\n}\n","import {ascending, bisect} from \"d3-array\";\nimport {identity} from \"./continuous\";\nimport {initInterpolator} from \"./init\";\n\nexport default function sequentialQuantile() {\n  var domain = [],\n      interpolator = identity;\n\n  function scale(x) {\n    if (!isNaN(x = +x)) return interpolator((bisect(domain, x) - 1) / (domain.length - 1));\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return scale;\n  };\n\n  scale.interpolator = function(_) {\n    return arguments.length ? (interpolator = _, scale) : interpolator;\n  };\n\n  scale.copy = function() {\n    return sequentialQuantile(interpolator).domain(domain);\n  };\n\n  return initInterpolator.apply(scale, arguments);\n}\n","import {linearish} from \"./linear\";\nimport {copy, transformer} from \"./continuous\";\nimport {initRange} from \"./init\";\n\nfunction transformSymlog(c) {\n  return function(x) {\n    return Math.sign(x) * Math.log1p(Math.abs(x / c));\n  };\n}\n\nfunction transformSymexp(c) {\n  return function(x) {\n    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;\n  };\n}\n\nexport function symlogish(transform) {\n  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));\n\n  scale.constant = function(_) {\n    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;\n  };\n\n  return linearish(scale);\n}\n\nexport default function symlog() {\n  var scale = symlogish(transformer());\n\n  scale.copy = function() {\n    return copy(scale, symlog()).constant(scale.constant());\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {bisect} from \"d3-array\";\nimport {slice} from \"./array\";\nimport {initRange} from \"./init\";\n\nexport default function threshold() {\n  var domain = [0.5],\n      range = [0, 1],\n      unknown,\n      n = 1;\n\n  function scale(x) {\n    return x <= x ? range[bisect(domain, x, 0, n)] : unknown;\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();\n  };\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return [domain[i - 1], domain[i]];\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return threshold()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {bisector, tickStep} from \"d3-array\";\nimport {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport {map} from \"./array\";\nimport continuous, {copy, identity} from \"./continuous\";\nimport {initRange} from \"./init\";\nimport nice from \"./nice\";\n\nvar durationSecond = 1000,\n    durationMinute = durationSecond * 60,\n    durationHour = durationMinute * 60,\n    durationDay = durationHour * 24,\n    durationWeek = durationDay * 7,\n    durationMonth = durationDay * 30,\n    durationYear = durationDay * 365;\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n  var scale = continuous(identity, identity),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  var tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  function tickInterval(interval, start, stop, step) {\n    if (interval == null) interval = 10;\n\n    // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n    if (typeof interval === \"number\") {\n      var target = Math.abs(stop - start) / interval,\n          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n      if (i === tickIntervals.length) {\n        step = tickStep(start / durationYear, stop / durationYear, interval);\n        interval = year;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max(tickStep(start, stop, interval), 1);\n        interval = millisecond;\n      }\n    }\n\n    return step == null ? interval : interval.every(step);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(map.call(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval, step) {\n    var d = domain(),\n        t0 = d[0],\n        t1 = d[d.length - 1],\n        r = t1 < t0,\n        t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1, step);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n    return r ? t.reverse() : t;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval, step) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n        ? domain(nice(d, interval))\n        : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n  };\n\n  return scale;\n}\n\nexport default function() {\n  return initRange.apply(calendar(timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n","import {calendar} from \"./time\";\nimport {utcFormat} from \"d3-time-format\";\nimport {utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcMillisecond} from \"d3-time\";\nimport {initRange} from \"./init\";\n\nexport default function() {\n  return initRange.apply(calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, utcSecond, utcMillisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import namespace from \"./namespace\";\nimport {xhtml} from \"./namespaces\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n","import namespaces from \"./namespaces\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n}\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import {Selection, root} from \"./selection/index\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","import creator from \"../creator\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","import namespace from \"../namespace\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","import {Selection} from \"./index\";\nimport {EnterNode} from \"./enter\";\nimport constant from \"../constant\";\n\nvar keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = {},\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n      if (keyValue in nodeByKeyValue) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue[keyValue] = node;\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = keyPrefix + key.call(parent, data[i], i, data);\n    if (node = nodeByKeyValue[keyValue]) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue[keyValue] = null;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nexport default function(value, key) {\n  if (!value) {\n    data = new Array(this.size()), j = -1;\n    this.each(function(d) { data[++j] = d; });\n    return data;\n  }\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = value.call(parent, parent && parent.__data__, j, parents),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","import defaultView from \"../window\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","export default function() {\n  return !this.node();\n}\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","import {Selection} from \"./index\";\nimport matcher from \"../matcher\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","import selection_select from \"./select\";\nimport selection_selectAll from \"./selectAll\";\nimport selection_filter from \"./filter\";\nimport selection_data from \"./data\";\nimport selection_enter from \"./enter\";\nimport selection_exit from \"./exit\";\nimport selection_join from \"./join\";\nimport selection_merge from \"./merge\";\nimport selection_order from \"./order\";\nimport selection_sort from \"./sort\";\nimport selection_call from \"./call\";\nimport selection_nodes from \"./nodes\";\nimport selection_node from \"./node\";\nimport selection_size from \"./size\";\nimport selection_empty from \"./empty\";\nimport selection_each from \"./each\";\nimport selection_attr from \"./attr\";\nimport selection_style from \"./style\";\nimport selection_property from \"./property\";\nimport selection_classed from \"./classed\";\nimport selection_text from \"./text\";\nimport selection_html from \"./html\";\nimport selection_raise from \"./raise\";\nimport selection_lower from \"./lower\";\nimport selection_append from \"./append\";\nimport selection_insert from \"./insert\";\nimport selection_remove from \"./remove\";\nimport selection_clone from \"./clone\";\nimport selection_datum from \"./datum\";\nimport selection_on from \"./on\";\nimport selection_dispatch from \"./dispatch\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch\n};\n\nexport default selection;\n","import creator from \"../creator\";\nimport selector from \"../selector\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n  if (onupdate != null) update = onupdate(update);\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import {Selection} from \"./index\";\n\nexport default function(selection) {\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  var nodes = new Array(this.size()), i = -1;\n  this.each(function() { nodes[++i] = this; });\n  return nodes;\n}\n","var filterEvents = {};\n\nexport var event = null;\n\nif (typeof document !== \"undefined\") {\n  var element = document.documentElement;\n  if (!(\"onmouseenter\" in element)) {\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n  }\n}\n\nfunction filterContextListener(listener, index, group) {\n  listener = contextListener(listener, index, group);\n  return function(event) {\n    var related = event.relatedTarget;\n    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n      listener.call(this, event);\n    }\n  };\n}\n\nfunction contextListener(listener, index, group) {\n  return function(event1) {\n    var event0 = event; // Events can be reentrant (e.g., focus).\n    event = event1;\n    try {\n      listener.call(this, this.__data__, index, group);\n    } finally {\n      event = event0;\n    }\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, capture) {\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n  return function(d, i, group) {\n    var on = this.__on, o, listener = wrap(value, i, group);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, capture);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, capture) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  if (capture == null) capture = false;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n  return this;\n}\n\nexport function customEvent(event1, listener, that, args) {\n  var event0 = event;\n  event1.sourceEvent = event;\n  event = event1;\n  try {\n    return listener.apply(that, args);\n  } finally {\n    event = event0;\n  }\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","import {Selection} from \"./index\";\nimport selector from \"../selector\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import {Selection} from \"./index\";\nimport selectorAll from \"../selectorAll\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","export default function() {\n  var size = 0;\n  this.each(function() { ++size; });\n  return size;\n}\n","import {Selection} from \"./index\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function(update) {\n  return new Array(update.length);\n}\n","import defaultView from \"../window\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","// powerbi.extensibility.utils.dataview\nimport * as DataRoleHelper from \"./dataRoleHelper\";\nexport function categoryIsAlsoSeriesRole(dataView, seriesRoleName, categoryRoleName) {\n    if (dataView.categories && dataView.categories.length > 0) {\n        // Need to pivot data if our category soure is a series role\n        const category = dataView.categories[0];\n        return category.source &&\n            DataRoleHelper.hasRole(category.source, seriesRoleName) &&\n            DataRoleHelper.hasRole(category.source, categoryRoleName);\n    }\n    return false;\n}\nexport function getSeriesName(source) {\n    return (source.groupName !== undefined)\n        ? source.groupName\n        : source.queryName;\n}\nexport function isImageUrlColumn(column) {\n    const misc = getMiscellaneousTypeDescriptor(column);\n    return misc != null && misc.imageUrl === true;\n}\nexport function isWebUrlColumn(column) {\n    const misc = getMiscellaneousTypeDescriptor(column);\n    return misc != null && misc.webUrl === true;\n}\nexport function getMiscellaneousTypeDescriptor(column) {\n    return column\n        && column.type\n        && column.type.misc;\n}\nexport function hasImageUrlColumn(dataView) {\n    if (!dataView || !dataView.metadata || !dataView.metadata.columns || !dataView.metadata.columns.length) {\n        return false;\n    }\n    return dataView.metadata.columns.some((column) => isImageUrlColumn(column) === true);\n}\n//# sourceMappingURL=converterHelper.js.map","export function getMeasureIndexOfRole(grouped, roleName) {\n    if (!grouped || !grouped.length) {\n        return -1;\n    }\n    const firstGroup = grouped[0];\n    if (firstGroup.values && firstGroup.values.length > 0) {\n        for (let i = 0, len = firstGroup.values.length; i < len; ++i) {\n            const value = firstGroup.values[i];\n            if (value && value.source) {\n                if (hasRole(value.source, roleName)) {\n                    return i;\n                }\n            }\n        }\n    }\n    return -1;\n}\nexport function getCategoryIndexOfRole(categories, roleName) {\n    if (categories && categories.length) {\n        for (let i = 0, ilen = categories.length; i < ilen; i++) {\n            if (hasRole(categories[i].source, roleName)) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\nexport function hasRole(column, name) {\n    const roles = column.roles;\n    return roles && roles[name];\n}\nexport function hasRoleInDataView(dataView, name) {\n    return dataView != null\n        && dataView.metadata != null\n        && dataView.metadata.columns\n        && dataView.metadata.columns.some((c) => c.roles && c.roles[name] !== undefined); // any is an alias of some\n}\nexport function hasRoleInValueColumn(valueColumn, name) {\n    return valueColumn\n        && valueColumn.source\n        && valueColumn.source.roles\n        && (valueColumn.source.roles[name] === true);\n}\n//# sourceMappingURL=dataRoleHelper.js.map","export function getValue(object, propertyName, defaultValue) {\n    if (!object) {\n        return defaultValue;\n    }\n    const propertyValue = object[propertyName];\n    if (propertyValue === undefined) {\n        return defaultValue;\n    }\n    return propertyValue;\n}\n/** Gets the solid color from a fill property using only a propertyName */\nexport function getFillColorByPropertyName(object, propertyName, defaultColor) {\n    const value = getValue(object, propertyName);\n    if (!value || !value.solid) {\n        return defaultColor;\n    }\n    return value.solid.color;\n}\n//# sourceMappingURL=dataViewObject.js.map","import * as DataViewObject from \"./dataViewObject\";\n/** Gets the value of the given object/property pair. */\nexport function getValue(objects, propertyId, defaultValue) {\n    if (!objects) {\n        return defaultValue;\n    }\n    return DataViewObject.getValue(objects[propertyId.objectName], propertyId.propertyName, defaultValue);\n}\n/** Gets an object from objects. */\nexport function getObject(objects, objectName, defaultValue) {\n    if (objects && objects[objectName]) {\n        return objects[objectName];\n    }\n    return defaultValue;\n}\n/** Gets the solid color from a fill property. */\nexport function getFillColor(objects, propertyId, defaultColor) {\n    const value = getValue(objects, propertyId);\n    if (!value || !value.solid) {\n        return defaultColor;\n    }\n    return value.solid.color;\n}\nexport function getCommonValue(objects, propertyId, defaultValue) {\n    const value = getValue(objects, propertyId, defaultValue);\n    if (value && value.solid) {\n        return value.solid.color;\n    }\n    if (value === undefined\n        || value === null\n        || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    return value;\n}\n//# sourceMappingURL=dataViewObjects.js.map","import * as DataViewObjects from \"./dataViewObjects\";\nexport class DataViewObjectsParser {\n    static getDefault() {\n        return new this();\n    }\n    static createPropertyIdentifier(objectName, propertyName) {\n        return {\n            objectName,\n            propertyName\n        };\n    }\n    static parse(dataView) {\n        const dataViewObjectParser = this.getDefault();\n        if (!dataView || !dataView.metadata || !dataView.metadata.objects) {\n            return dataViewObjectParser;\n        }\n        const properties = dataViewObjectParser.getProperties();\n        for (const objectName in properties) {\n            for (const propertyName in properties[objectName]) {\n                const defaultValue = dataViewObjectParser[objectName][propertyName];\n                dataViewObjectParser[objectName][propertyName] = DataViewObjects.getCommonValue(dataView.metadata.objects, properties[objectName][propertyName], defaultValue);\n            }\n        }\n        return dataViewObjectParser;\n    }\n    static isPropertyEnumerable(propertyName) {\n        return !DataViewObjectsParser.InnumerablePropertyPrefix.test(propertyName);\n    }\n    static enumerateObjectInstances(dataViewObjectParser, options) {\n        const dataViewProperties = dataViewObjectParser && dataViewObjectParser[options.objectName];\n        if (!dataViewProperties) {\n            return [];\n        }\n        const instance = {\n            objectName: options.objectName,\n            selector: null,\n            properties: {}\n        };\n        for (const key in dataViewProperties) {\n            if (Object.prototype.hasOwnProperty.call(dataViewProperties, key)) {\n                instance.properties[key] = dataViewProperties[key];\n            }\n        }\n        return {\n            instances: [instance]\n        };\n    }\n    getProperties() {\n        const properties = {}, objectNames = Object.keys(this);\n        objectNames.forEach((objectName) => {\n            if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\n                const propertyNames = Object.keys(this[objectName]);\n                properties[objectName] = {};\n                propertyNames.forEach((propertyName) => {\n                    if (DataViewObjectsParser.isPropertyEnumerable(objectName)) {\n                        properties[objectName][propertyName] =\n                            DataViewObjectsParser.createPropertyIdentifier(objectName, propertyName);\n                    }\n                });\n            }\n        });\n        return properties;\n    }\n}\nDataViewObjectsParser.InnumerablePropertyPrefix = /^_/;\n//# sourceMappingURL=dataViewObjectsParser.js.map","// TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.\n// TODO: refactor this, setGrouped, and groupValues to a test helper to stop using it in the product\nexport function createValueColumns(values = [], valueIdentityFields, source) {\n    const result = values;\n    setGrouped(result);\n    if (valueIdentityFields) {\n        result.identityFields = valueIdentityFields;\n    }\n    if (source) {\n        result.source = source;\n    }\n    return result;\n}\nexport function setGrouped(values, groupedResult) {\n    values.grouped = groupedResult\n        ? () => groupedResult\n        : () => groupValues(values);\n}\n/** Group together the values with a common identity. */\nexport function groupValues(values) {\n    const groups = [];\n    let currentGroup;\n    for (let i = 0, len = values.length; i < len; i++) {\n        const value = values[i];\n        if (!currentGroup || currentGroup.identity !== value.identity) {\n            currentGroup = {\n                values: []\n            };\n            if (value.identity) {\n                currentGroup.identity = value.identity;\n                const source = value.source;\n                // allow null, which will be formatted as (Blank).\n                if (source.groupName !== undefined) {\n                    currentGroup.name = source.groupName;\n                }\n                else if (source.displayName) {\n                    currentGroup.name = source.displayName;\n                }\n            }\n            groups.push(currentGroup);\n        }\n        currentGroup.values.push(value);\n    }\n    return groups;\n}\n//# sourceMappingURL=dataViewTransform.js.map","/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nexport function createDataViewWildcardSelector(dataViewWildcardMatchingOption) {\n    if (dataViewWildcardMatchingOption == null) {\n        dataViewWildcardMatchingOption = 0 /* DataViewWildcardMatchingOption.InstancesAndTotals */;\n    }\n    const selector = {\n        data: [\n            {\n                dataViewWildcard: {\n                    matchingOption: dataViewWildcardMatchingOption\n                }\n            }\n        ]\n    };\n    return selector;\n}\n//# sourceMappingURL=dataViewWildcard.js.map","import * as converterHelper from \"./converterHelper\";\nimport * as dataRoleHelper from \"./dataRoleHelper\";\nimport * as dataViewObject from \"./dataViewObject\";\nimport * as dataViewObjects from \"./dataViewObjects\";\nimport * as dataViewObjectsParser from \"./dataViewObjectsParser\";\nimport * as dataViewTransform from \"./dataViewTransform\";\nimport * as dataViewWildcard from \"./dataViewWildcard\";\nexport { converterHelper, dataRoleHelper, dataViewObject, dataViewObjects, dataViewObjectsParser, dataViewTransform, dataViewWildcard };\n//# sourceMappingURL=index.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class Model {\n}\nexport class Card extends NamedEntity {\n    getFormattingCard(objectName, group, localizationManager) {\n        return {\n            displayName: (localizationManager && this.displayNameKey)\n                ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey)\n                ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            groups: [group],\n            uid: objectName,\n            analyticsPane: this.analyticsPane\n        };\n    }\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        let newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: this.displayName,\n            description: this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","export class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataViews) {\n        var _a, _b, _c;\n        let defaultSettings = new typeClass();\n        let dataViewObjects = (_b = (_a = dataViews === null || dataViews === void 0 ? void 0 : dataViews[0]) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_c = defaultSettings.cards) === null || _c === void 0 ? void 0 : _c.forEach((card) => {\n                var _a, _b, _c;\n                (_a = card === null || card === void 0 ? void 0 : card.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                    slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                });\n                (_c = (_b = card === null || card === void 0 ? void 0 : card.container) === null || _b === void 0 ? void 0 : _b.containerItems) === null || _c === void 0 ? void 0 : _c.forEach((containerItem) => {\n                    var _a;\n                    (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        var _a;\n        let formattingModel = {\n            cards: []\n        };\n        (_a = formattingSettingsModel.cards) === null || _a === void 0 ? void 0 : _a.forEach((card) => {\n            if (!card)\n                return;\n            const objectName = card.name;\n            const groupUid = card.name + \"-group\";\n            let formattingGroup = {\n                displayName: undefined,\n                slices: [],\n                uid: groupUid\n            };\n            let formattingCard = card.getFormattingCard(objectName, formattingGroup, this.localizationManager);\n            formattingModel.cards.push(formattingCard);\n            // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n            // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n            // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n            const sliceNames = {};\n            // Build formatting container slice for each property\n            if (card.container) {\n                const container = card.container;\n                const containerUid = groupUid + \"-container\";\n                const formattingContainer = {\n                    displayName: (this.localizationManager && container.displayNameKey)\n                        ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                    description: (this.localizationManager && container.descriptionKey)\n                        ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                    containerItems: [],\n                    uid: containerUid\n                };\n                container.containerItems.forEach((containerItem) => {\n                    // Build formatting container item object\n                    const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                    const containerItemUid = containerUid + containerIemName;\n                    let formattingContainerItem = {\n                        displayName: (this.localizationManager && containerItem.displayNameKey)\n                            ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                        slices: [],\n                        uid: containerItemUid\n                    };\n                    // Build formatting slices and add them to current formatting container item\n                    this.buildFormattingSlices(containerItem.slices, objectName, sliceNames, formattingCard, formattingContainerItem.slices);\n                    formattingContainer.containerItems.push(formattingContainerItem);\n                });\n                formattingGroup.container = formattingContainer;\n            }\n            if (card.slices) {\n                // Build formatting slice for each property\n                this.buildFormattingSlices(card.slices, objectName, sliceNames, formattingCard, formattingGroup.slices);\n            }\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices(slices, objectName, sliceNames, formattingCard, formattingSlices) {\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            let formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                // Set as topLevelToggle if topLevelToggle boolean was set to true\n                if (slice.topLevelToggle) {\n                    formattingSlice.suppressDisplayName = true;\n                    formattingCard.topLevelToggle = formattingSlice;\n                }\n                else {\n                    formattingSlices.push(formattingSlice);\n                }\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a, _b;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        let revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, card.slices, sliceNames);\n        let cardContainerSlicesDefaultDescriptors = [];\n        (_b = (_a = card.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n            cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n        });\n        revertToDefaultDescriptors = cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors);\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames) {\n        let revertToDefaultDescriptors = [];\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if (slice === null || slice === void 0 ? void 0 : slice.items) {\n        let itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*\n * Globalize Cultures\n *\n * http://github.com/jquery/globalize\n *\n * Copyright Software Freedom Conservancy, Inc.\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * This file was generated by the Globalize Culture Generator\n * Translation: bugs found in this file need to be fixed in the generator\n */\nvar powerbiGlobalizeLocales_1 = require(\"./powerbiGlobalizeLocales\");\nfunction injectCultures(Globalize) {\n    Object.keys(powerbiGlobalizeLocales_1.locales).forEach(function (locale) { return Globalize.addCultureInfo.apply(Globalize, powerbiGlobalizeLocales_1.locales[locale]); });\n}\nexports.default = injectCultures;\n//# sourceMappingURL=globalize.cultures.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseNegativePattern = exports.parseExact = exports.getEraYear = exports.getEra = exports.getTokenRegExp = exports.formatNumber = exports.formatDate = exports.expandFormat = exports.appendPreOrPostMatch = exports.zeroPad = exports.trim = exports.startsWith = exports.isObject = exports.isFunction = exports.isArray = exports.extend = exports.endsWith = exports.arrayIndexOf = exports.regexTrim = exports.regexParseFloat = exports.regexInfinity = exports.regexHex = exports.Globalize = void 0;\n// Global variable (Globalize) or CommonJS module (globalize)\nexports.Globalize = function (cultureSelector) {\n    return new exports.Globalize.prototype.init(cultureSelector);\n};\nexports.Globalize.cultures = {};\nexports.Globalize.prototype = {\n    constructor: exports.Globalize,\n    init: function (cultureSelector) {\n        this.cultures = exports.Globalize.cultures;\n        this.cultureSelector = cultureSelector;\n        return this;\n    }\n};\nexports.Globalize.prototype.init.prototype = exports.Globalize.prototype;\n// 1.\t When defining a culture, all fields are required except the ones stated as optional.\n// 2.\t Each culture should have a \".calendars\" object with at least one calendar named \"standard\"\n//\t\t which serves as the default calendar in use by that culture.\n// 3.\t Each culture should have a \".calendar\" object which is the current calendar being used,\n//\t\t it may be dynamically changed at any time to one of the calendars in \".calendars\".\nexports.Globalize.cultures[\"default\"] = {\n    // A unique name for the culture in the form <language code>-<country/region code>\n    name: \"en\",\n    // the name of the culture in the english language\n    englishName: \"English\",\n    // the name of the culture in its own language\n    nativeName: \"English\",\n    // whether the culture uses right-to-left text\n    isRTL: false,\n    // \"language\" is used for so-called \"specific\" cultures.\n    // For example, the culture \"es-CL\" means \"Spanish, in Chili\".\n    // It represents the Spanish-speaking culture as it is in Chili,\n    // which might have different formatting rules or even translations\n    // than Spanish in Spain. A \"neutral\" culture is one that is not\n    // specific to a region. For example, the culture \"es\" is the generic\n    // Spanish culture, which may be a more generalized version of the language\n    // that may or may not be what a specific culture expects.\n    // For a specific culture like \"es-CL\", the \"language\" field refers to the\n    // neutral, generic culture information for the language it is using.\n    // This is not always a simple matter of the string before the dash.\n    // For example, the \"zh-Hans\" culture is netural (Simplified Chinese).\n    // And the \"zh-SG\" culture is Simplified Chinese in Singapore, whose lanugage\n    // field is \"zh-CHS\", not \"zh\".\n    // This field should be used to navigate from a specific culture to it's\n    // more general, neutral culture. If a culture is already as general as it\n    // can get, the language may refer to itself.\n    language: \"en\",\n    // numberFormat defines general number formatting rules, like the digits in\n    // each grouping, the group separator, and how negative numbers are displayed.\n    numberFormat: {\n        // [negativePattern]\n        // Note, numberFormat.pattern has no \"positivePattern\" unlike percent and currency,\n        // but is still defined as an array for consistency with them.\n        //   negativePattern: one of \"(n)|-n|- n|n-|n -\"\n        pattern: [\"-n\"],\n        // number of decimal places normally shown\n        decimals: 2,\n        // string that separates number groups, as in 1,000,000\n        \",\": \",\",\n        // string that separates a number from the fractional portion, as in 1.99\n        \".\": \".\",\n        // array of numbers indicating the size of each number group.\n        // TODO: more detailed description and example\n        groupSizes: [3],\n        // symbol used for positive numbers\n        \"+\": \"+\",\n        // symbol used for negative numbers\n        \"-\": \"-\",\n        percent: {\n            // [negativePattern, positivePattern]\n            //   negativePattern: one of \"-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %\"\n            //   positivePattern: one of \"n %|n%|%n|% n\"\n            pattern: [\"-n %\", \"n %\"],\n            // number of decimal places normally shown\n            decimals: 2,\n            // array of numbers indicating the size of each number group.\n            // TODO: more detailed description and example\n            groupSizes: [3],\n            // string that separates number groups, as in 1,000,000\n            \",\": \",\",\n            // string that separates a number from the fractional portion, as in 1.99\n            \".\": \".\",\n            // symbol used to represent a percentage\n            symbol: \"%\"\n        },\n        currency: {\n            // [negativePattern, positivePattern]\n            //   negativePattern: one of \"($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)\"\n            //   positivePattern: one of \"$n|n$|$ n|n $\"\n            pattern: [\"($n)\", \"$n\"],\n            // number of decimal places normally shown\n            decimals: 2,\n            // array of numbers indicating the size of each number group.\n            // TODO: more detailed description and example\n            groupSizes: [3],\n            // string that separates number groups, as in 1,000,000\n            \",\": \",\",\n            // string that separates a number from the fractional portion, as in 1.99\n            \".\": \".\",\n            // symbol used to represent currency\n            symbol: \"$\"\n        }\n    },\n    // calendars defines all the possible calendars used by this culture.\n    // There should be at least one defined with name \"standard\", and is the default\n    // calendar used by the culture.\n    // A calendar contains information about how dates are formatted, information about\n    // the calendar's eras, a standard set of the date formats,\n    // translations for day and month names, and if the calendar is not based on the Gregorian\n    // calendar, conversion functions to and from the Gregorian calendar.\n    calendars: {\n        standard: {\n            // name that identifies the type of calendar this is\n            name: \"Gregorian_USEnglish\",\n            // separator of parts of a date (e.g. \"/\" in 11/05/1955)\n            \"/\": \"/\",\n            // separator of parts of a time (e.g. \":\" in 05:44 PM)\n            \":\": \":\",\n            // the first day of the week (0 = Sunday, 1 = Monday, etc)\n            firstDay: 0,\n            days: {\n                // full day names\n                names: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n                // abbreviated day names\n                namesAbbr: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n                // shortest day names\n                namesShort: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]\n            },\n            months: {\n                // full month names (13 months for lunar calendards -- 13th month should be \"\" if not lunar)\n                names: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"\"],\n                // abbreviated month names\n                namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"\"]\n            },\n            // AM and PM designators in one of these forms:\n            // The usual view, and the upper and lower case versions\n            //   [ standard, lowercase, uppercase ]\n            // The culture does not use AM or PM (likely all standard date formats use 24 hour time)\n            //   null\n            AM: [\"AM\", \"am\", \"AM\"],\n            PM: [\"PM\", \"pm\", \"PM\"],\n            eras: [\n                // eras in reverse chronological order.\n                // name: the name of the era in this culture (e.g. A.D., C.E.)\n                // start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.\n                // offset: offset in years from gregorian calendar\n                {\n                    \"name\": \"A.D.\",\n                    \"start\": null,\n                    \"offset\": 0\n                }\n            ],\n            // when a two digit year is given, it will never be parsed as a four digit\n            // year greater than this year (in the appropriate era for the culture)\n            // Set it as a full year (e.g. 2029) or use an offset format starting from\n            // the current year: \"+19\" would correspond to 2029 if the current year 2010.\n            twoDigitYearMax: 2029,\n            // set of predefined date and time patterns used by the culture\n            // these represent the format someone in this culture would expect\n            // to see given the portions of the date that are shown.\n            patterns: {\n                // short date pattern\n                d: \"M/d/yyyy\",\n                // long date pattern\n                D: \"dddd, MMMM dd, yyyy\",\n                // short time pattern\n                t: \"h:mm tt\",\n                // long time pattern\n                T: \"h:mm:ss tt\",\n                // long date, short time pattern\n                f: \"dddd, MMMM dd, yyyy h:mm tt\",\n                // long date, long time pattern\n                F: \"dddd, MMMM dd, yyyy h:mm:ss tt\",\n                // month/day pattern\n                M: \"MMMM dd\",\n                // month/year pattern\n                Y: \"yyyy MMMM\",\n                // S is a sortable format that does not vary by culture\n                S: \"yyyy\\u0027-\\u0027MM\\u0027-\\u0027dd\\u0027T\\u0027HH\\u0027:\\u0027mm\\u0027:\\u0027ss\"\n            }\n            // optional fields for each calendar:\n            /*\n            monthsGenitive:\n                Same as months but used when the day preceeds the month.\n                Omit if the culture has no genitive distinction in month names.\n                For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx\n            convert:\n                Allows for the support of non-gregorian based calendars. This convert object is used to\n                to convert a date to and from a gregorian calendar date to handle parsing and formatting.\n                The two functions:\n                    fromGregorian( date )\n                        Given the date as a parameter, return an array with parts [ year, month, day ]\n                        corresponding to the non-gregorian based year, month, and day for the calendar.\n                    toGregorian( year, month, day )\n                        Given the non-gregorian year, month, and day, return a new Date() object\n                        set to the corresponding date in the gregorian calendar.\n            */\n        }\n    },\n    // For localized strings\n    messages: {}\n};\nexports.Globalize.cultures[\"default\"].calendar = exports.Globalize.cultures[\"default\"].calendars.standard;\nexports.Globalize.cultures[\"en\"] = exports.Globalize.cultures[\"default\"];\nexports.Globalize.cultureSelector = \"en\";\n//\n// private variables\n//\nexports.regexHex = /^0x[a-f0-9]+$/i;\nexports.regexInfinity = /^[+-]?infinity$/i;\nexports.regexParseFloat = /^[+-]?\\d*\\.?\\d*(e[+-]?\\d+)?$/;\nexports.regexTrim = /^\\s+|\\s+$/g;\n//\n// private JavaScript utility functions\n//\nexports.arrayIndexOf = function (array, item) {\n    if (array.indexOf) {\n        return array.indexOf(item);\n    }\n    for (var i = 0, length = array.length; i < length; i++) {\n        if (array[i] === item) {\n            return i;\n        }\n    }\n    return -1;\n};\nexports.endsWith = function (value, pattern) {\n    return value.substring(value.length - pattern.length) === pattern;\n};\nexports.extend = function (deep) {\n    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;\n    // Handle a deep copy situation\n    if (typeof target === \"boolean\") {\n        deep = target;\n        target = arguments[1] || {};\n        // skip the boolean and the target\n        i = 2;\n    }\n    // Handle case when target is a string or something (possible in deep copy)\n    if (typeof target !== \"object\" && !(0, exports.isFunction)(target)) {\n        target = {};\n    }\n    for (; i < length; i++) {\n        // Only deal with non-null/undefined values\n        if ((options = arguments[i]) != null) {\n            // Extend the base object\n            for (name in options) {\n                src = target[name];\n                copy = options[name];\n                // Prevent never-ending loop\n                if (target === copy) {\n                    continue;\n                }\n                // Recurse if we're merging plain objects or arrays\n                if (deep && copy && ((0, exports.isObject)(copy) || (copyIsArray = (0, exports.isArray)(copy)))) {\n                    if (copyIsArray) {\n                        copyIsArray = false;\n                        clone = src && (0, exports.isArray)(src) ? src : [];\n                    }\n                    else {\n                        clone = src && (0, exports.isObject)(src) ? src : {};\n                    }\n                    // Never move original objects, clone them\n                    target[name] = (0, exports.extend)(deep, clone, copy);\n                    // Don't bring in undefined values\n                }\n                else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n    // Return the modified object\n    return target;\n};\nexports.isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n};\nexports.isFunction = function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object Function]\";\n};\nexports.isObject = function (obj) {\n    return Object.prototype.toString.call(obj) === \"[object Object]\";\n};\nexports.startsWith = function (value, pattern) {\n    return value.indexOf(pattern) === 0;\n};\nexports.trim = function (value) {\n    return (value + \"\").replace(exports.regexTrim, \"\");\n};\nexports.zeroPad = function (str, count, left) {\n    var l;\n    for (l = str.length; l < count; l += 1) {\n        str = (left ? (\"0\" + str) : (str + \"0\"));\n    }\n    return str;\n};\n//\n// private Globalization utility functions\n//\nexports.appendPreOrPostMatch = function (preMatch, strings) {\n    // appends pre- and post- token match strings while removing escaped characters.\n    // Returns a single quote count which is used to determine if the token occurs\n    // in a string literal.\n    var quoteCount = 0, escaped = false;\n    for (var i = 0, il = preMatch.length; i < il; i++) {\n        var c = preMatch.charAt(i);\n        switch (c) {\n            case \"\\'\":\n                if (escaped) {\n                    strings.push(\"\\'\");\n                }\n                else {\n                    quoteCount++;\n                }\n                escaped = false;\n                break;\n            case \"\\\\\":\n                if (escaped) {\n                    strings.push(\"\\\\\");\n                }\n                escaped = !escaped;\n                break;\n            default:\n                strings.push(c);\n                escaped = false;\n                break;\n        }\n    }\n    return quoteCount;\n};\nexports.expandFormat = function (cal, format) {\n    // expands unspecified or single character date formats into the full pattern.\n    format = format || \"F\";\n    var pattern, patterns = cal.patterns, len = format.length;\n    if (len === 1) {\n        pattern = patterns[format];\n        if (!pattern) {\n            throw \"Invalid date format string \\'\" + format + \"\\'.\";\n        }\n        format = pattern;\n    }\n    else if (len === 2 && format.charAt(0) === \"%\") {\n        // %X escape format -- intended as a custom format string that is only one character, not a built-in format.\n        format = format.charAt(1);\n    }\n    return format;\n};\nexports.formatDate = function (value, format, culture) {\n    var cal = culture.calendar, convert = cal.convert;\n    if (!format || !format.length || format === \"i\") {\n        var ret;\n        if (culture && culture.name.length) {\n            if (convert) {\n                // non-gregorian calendar, so we cannot use built-in toLocaleString()\n                ret = (0, exports.formatDate)(value, cal.patterns.F, culture);\n            }\n            else {\n                var eraDate = new Date(value.getTime()), era = (0, exports.getEra)(value, cal.eras);\n                eraDate.setFullYear((0, exports.getEraYear)(value, cal, era));\n                ret = eraDate.toLocaleString();\n            }\n        }\n        else {\n            ret = value.toString();\n        }\n        return ret;\n    }\n    var eras = cal.eras, sortable = format === \"s\";\n    format = (0, exports.expandFormat)(cal, format);\n    // Start with an empty string\n    ret = [];\n    var hour, zeros = [\"0\", \"00\", \"000\"], foundDay, checkedDay, dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), converted;\n    function padZeros(num, c) {\n        var r, s = num + \"\";\n        if (c > 1 && s.length < c) {\n            r = (zeros[c - 2] + s);\n            return r.substring(r.length - c, r.length);\n        }\n        else {\n            r = s;\n        }\n        return r;\n    }\n    function hasDay() {\n        if (foundDay || checkedDay) {\n            return foundDay;\n        }\n        foundDay = dayPartRegExp.test(format);\n        checkedDay = true;\n        return foundDay;\n    }\n    function getPart(date, part) {\n        if (converted) {\n            return converted[part];\n        }\n        switch (part) {\n            case 0: return date.getFullYear();\n            case 1: return date.getMonth();\n            case 2: return date.getDate();\n        }\n    }\n    if (!sortable && convert) {\n        converted = convert.fromGregorian(value);\n    }\n    for (;;) {\n        // Save the current index\n        var index = tokenRegExp.lastIndex, \n        // Look for the next pattern\n        ar = tokenRegExp.exec(format);\n        // Append the text before the pattern (or the end of the string if not found)\n        var preMatch = format.slice(index, ar ? ar.index : format.length);\n        quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, ret);\n        if (!ar) {\n            break;\n        }\n        // do not replace any matches that occur inside a string literal.\n        if (quoteCount % 2) {\n            ret.push(ar[0]);\n            continue;\n        }\n        var current = ar[0], clength = current.length;\n        switch (current) {\n            case \"ddd\":\n            //Day of the week, as a three-letter abbreviation\n            case \"dddd\":\n                // Day of the week, using the full name\n                var names = (clength === 3) ? cal.days.namesAbbr : cal.days.names;\n                ret.push(names[value.getDay()]);\n                break;\n            case \"d\":\n            // Day of month, without leading zero for single-digit days\n            case \"dd\":\n                // Day of month, with leading zero for single-digit days\n                foundDay = true;\n                ret.push(padZeros(getPart(value, 2), clength));\n                break;\n            case \"MMM\":\n            // Month, as a three-letter abbreviation\n            case \"MMMM\":\n                // Month, using the full name\n                var part = getPart(value, 1);\n                ret.push((cal.monthsGenitive && hasDay())\n                    ?\n                        cal.monthsGenitive[clength === 3 ? \"namesAbbr\" : \"names\"][part]\n                    :\n                        cal.months[clength === 3 ? \"namesAbbr\" : \"names\"][part]);\n                break;\n            case \"M\":\n            // Month, as digits, with no leading zero for single-digit months\n            case \"MM\":\n                // Month, as digits, with leading zero for single-digit months\n                ret.push(padZeros(getPart(value, 1) + 1, clength));\n                break;\n            case \"y\":\n            // Year, as two digits, but with no leading zero for years less than 10\n            case \"yy\":\n            // Year, as two digits, with leading zero for years less than 10\n            case \"yyyy\":\n                // Year represented by four full digits\n                part = converted ? converted[0] : (0, exports.getEraYear)(value, cal, (0, exports.getEra)(value, eras), sortable);\n                if (clength < 4) {\n                    part = part % 100;\n                }\n                ret.push(padZeros(part, clength));\n                break;\n            case \"h\":\n            // Hours with no leading zero for single-digit hours, using 12-hour clock\n            case \"hh\":\n                // Hours with leading zero for single-digit hours, using 12-hour clock\n                hour = value.getHours() % 12;\n                if (hour === 0)\n                    hour = 12;\n                ret.push(padZeros(hour, clength));\n                break;\n            case \"H\":\n            // Hours with no leading zero for single-digit hours, using 24-hour clock\n            case \"HH\":\n                // Hours with leading zero for single-digit hours, using 24-hour clock\n                ret.push(padZeros(value.getHours(), clength));\n                break;\n            case \"m\":\n            // Minutes with no leading zero for single-digit minutes\n            case \"mm\":\n                // Minutes with leading zero for single-digit minutes\n                ret.push(padZeros(value.getMinutes(), clength));\n                break;\n            case \"s\":\n            // Seconds with no leading zero for single-digit seconds\n            case \"ss\":\n                // Seconds with leading zero for single-digit seconds\n                ret.push(padZeros(value.getSeconds(), clength));\n                break;\n            case \"t\":\n            // One character am/pm indicator (\"a\" or \"p\")\n            case \"tt\":\n                // Multicharacter am/pm indicator\n                part = value.getHours() < 12 ? (cal.AM ? cal.AM[0] : \" \") : (cal.PM ? cal.PM[0] : \" \");\n                ret.push(clength === 1 ? part.charAt(0) : part);\n                break;\n            case \"f\":\n            // Deciseconds\n            case \"ff\":\n            // Centiseconds\n            case \"fff\":\n                // Milliseconds\n                ret.push(padZeros(value.getMilliseconds(), 3).substring(0, clength));\n                break;\n            case \"z\":\n            // Time zone offset, no leading zero\n            case \"zz\":\n                // Time zone offset with leading zero\n                hour = value.getTimezoneOffset() / 60;\n                ret.push((hour <= 0 ? \"+\" : \"-\") + padZeros(Math.floor(Math.abs(hour)), clength));\n                break;\n            case \"zzz\":\n                // Time zone offset with leading zero\n                hour = value.getTimezoneOffset() / 60;\n                ret.push((hour <= 0 ? \"+\" : \"-\") + padZeros(Math.floor(Math.abs(hour)), 2)\n                    // Hard coded \":\" separator, rather than using cal.TimeSeparator\n                    // Repeated here for consistency, plus \":\" was already assumed in date parsing.\n                    + \":\" + padZeros(Math.abs(value.getTimezoneOffset() % 60), 2));\n                break;\n            case \"g\":\n            case \"gg\":\n                if (cal.eras) {\n                    ret.push(cal.eras[(0, exports.getEra)(value, eras)].name);\n                }\n                break;\n            case \"/\":\n                ret.push(cal[\"/\"]);\n                break;\n            default:\n                throw \"Invalid date format pattern \\'\" + current + \"\\'.\";\n        }\n    }\n    return ret.join(\"\");\n};\n// formatNumber\n(function () {\n    var expandNumber;\n    expandNumber = function (number, precision, formatInfo) {\n        var groupSizes = formatInfo.groupSizes, curSize = groupSizes[0], curGroupIndex = 1, factor = Math.pow(10, precision), rounded = Math.round(number * factor) / factor;\n        if (!isFinite(rounded)) {\n            rounded = number;\n        }\n        number = rounded;\n        var numberString = number + \"\", right = \"\", split = numberString.split(/e/i), exponent = split.length > 1 ? parseInt(split[1], 10) : 0;\n        numberString = split[0];\n        split = numberString.split(\".\");\n        numberString = split[0];\n        right = split.length > 1 ? split[1] : \"\";\n        var l;\n        if (exponent > 0) {\n            right = (0, exports.zeroPad)(right, exponent, false);\n            numberString += right.slice(0, exponent);\n            right = right.substring(exponent);\n        }\n        else if (exponent < 0) {\n            exponent = -exponent;\n            numberString = (0, exports.zeroPad)(numberString, exponent + 1);\n            right = numberString.slice(-exponent, numberString.length) + right;\n            numberString = numberString.slice(0, -exponent);\n        }\n        if (precision > 0) {\n            right = formatInfo[\".\"] +\n                ((right.length > precision) ? right.slice(0, precision) : (0, exports.zeroPad)(right, precision));\n        }\n        else {\n            right = \"\";\n        }\n        var stringIndex = numberString.length - 1, sep = formatInfo[\",\"], ret = \"\";\n        while (stringIndex >= 0) {\n            if (curSize === 0 || curSize > stringIndex) {\n                return numberString.slice(0, stringIndex + 1) + (ret.length ? (sep + ret + right) : right);\n            }\n            ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? (sep + ret) : \"\");\n            stringIndex -= curSize;\n            if (curGroupIndex < groupSizes.length) {\n                curSize = groupSizes[curGroupIndex];\n                curGroupIndex++;\n            }\n        }\n        return numberString.slice(0, stringIndex + 1) + sep + ret + right;\n    };\n    exports.formatNumber = function (value, format, culture) {\n        if (!format || format === \"i\") {\n            return culture.name.length ? value.toLocaleString() : value.toString();\n        }\n        format = format || \"D\";\n        var nf = culture.numberFormat, number = Math.abs(value), precision = -1, pattern;\n        if (format.length > 1)\n            precision = parseInt(format.slice(1), 10);\n        var current = format.charAt(0).toUpperCase(), formatInfo;\n        switch (current) {\n            case \"D\":\n                pattern = \"n\";\n                if (precision !== -1) {\n                    number = (0, exports.zeroPad)(\"\" + number, precision, true);\n                }\n                if (value < 0)\n                    number = -number;\n                break;\n            case \"N\":\n                formatInfo = nf;\n            // fall through\n            case \"C\":\n                formatInfo = formatInfo || nf.currency;\n            // fall through\n            case \"P\":\n                formatInfo = formatInfo || nf.percent;\n                pattern = value < 0 ? formatInfo.pattern[0] : (formatInfo.pattern[1] || \"n\");\n                if (precision === -1)\n                    precision = formatInfo.decimals;\n                number = expandNumber(number * (current === \"P\" ? 100 : 1), precision, formatInfo);\n                break;\n            default:\n                throw \"Bad number format specifier: \" + current;\n        }\n        var patternParts = /n|\\$|-|%/g, ret = \"\";\n        for (;;) {\n            var index = patternParts.lastIndex, ar = patternParts.exec(pattern);\n            ret += pattern.slice(index, ar ? ar.index : pattern.length);\n            if (!ar) {\n                break;\n            }\n            switch (ar[0]) {\n                case \"n\":\n                    ret += number;\n                    break;\n                case \"$\":\n                    ret += nf.currency.symbol;\n                    break;\n                case \"-\":\n                    // don't make 0 negative\n                    if (/[1-9]/.test(number.toString())) {\n                        ret += nf[\"-\"];\n                    }\n                    break;\n                case \"%\":\n                    ret += nf.percent.symbol;\n                    break;\n            }\n        }\n        return ret;\n    };\n}());\nexports.getTokenRegExp = function () {\n    // regular expression for matching date and time tokens in format strings.\n    return /\\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g;\n};\nexports.getEra = function (date, eras) {\n    if (!eras)\n        return 0;\n    var start, ticks = date.getTime();\n    for (var i = 0, l = eras.length; i < l; i++) {\n        start = eras[i].start;\n        if (start === null || ticks >= start) {\n            return i;\n        }\n    }\n    return 0;\n};\nexports.getEraYear = function (date, cal, era, sortable) {\n    var year = date.getFullYear();\n    if (!sortable && cal.eras) {\n        // convert normal gregorian year to era-shifted gregorian\n        // year by subtracting the era offset\n        year -= cal.eras[era].offset;\n    }\n    return year;\n};\n// parseExact\n(function () {\n    var expandYear, getDayIndex, getMonthIndex, getParseRegExp, outOfRange, toUpper, toUpperArray;\n    expandYear = function (cal, year) {\n        // expands 2-digit year into 4 digits.\n        var now = new Date(), era = (0, exports.getEra)(now);\n        if (year < 100) {\n            var twoDigitYearMax = cal.twoDigitYearMax;\n            twoDigitYearMax = typeof twoDigitYearMax === \"string\" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;\n            var curr = (0, exports.getEraYear)(now, cal, era);\n            year += curr - (curr % 100);\n            if (year > twoDigitYearMax) {\n                year -= 100;\n            }\n        }\n        return year;\n    };\n    getDayIndex = function (cal, value, abbr) {\n        var ret, days = cal.days, upperDays = cal._upperDays;\n        if (!upperDays) {\n            cal._upperDays = upperDays = [\n                toUpperArray(days.names),\n                toUpperArray(days.namesAbbr),\n                toUpperArray(days.namesShort)\n            ];\n        }\n        value = toUpper(value);\n        if (abbr) {\n            ret = (0, exports.arrayIndexOf)(upperDays[1], value);\n            if (ret === -1) {\n                ret = (0, exports.arrayIndexOf)(upperDays[2], value);\n            }\n        }\n        else {\n            ret = (0, exports.arrayIndexOf)(upperDays[0], value);\n        }\n        return ret;\n    };\n    getMonthIndex = function (cal, value, abbr) {\n        var months = cal.months, monthsGen = cal.monthsGenitive || cal.months, upperMonths = cal._upperMonths, upperMonthsGen = cal._upperMonthsGen;\n        if (!upperMonths) {\n            cal._upperMonths = upperMonths = [\n                toUpperArray(months.names),\n                toUpperArray(months.namesAbbr)\n            ];\n            cal._upperMonthsGen = upperMonthsGen = [\n                toUpperArray(monthsGen.names),\n                toUpperArray(monthsGen.namesAbbr)\n            ];\n        }\n        value = toUpper(value);\n        var i = (0, exports.arrayIndexOf)(abbr ? upperMonths[1] : upperMonths[0], value);\n        if (i < 0) {\n            i = (0, exports.arrayIndexOf)(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);\n        }\n        return i;\n    };\n    getParseRegExp = function (cal, format) {\n        // converts a format string into a regular expression with groups that\n        // can be used to extract date fields from a date string.\n        // check for a cached parse regex.\n        var re = cal._parseRegExp;\n        if (!re) {\n            cal._parseRegExp = re = {};\n        }\n        else {\n            var reFormat = re[format];\n            if (reFormat) {\n                return reFormat;\n            }\n        }\n        // expand single digit formats, then escape regular expression characters.\n        var expFormat = (0, exports.expandFormat)(cal, format).replace(/([\\^\\$\\.\\*\\+\\?\\|\\[\\]\\(\\)\\{\\}])/g, \"\\\\\\\\$1\"), regexp = [\"^\"], groups = [], index = 0, quoteCount = 0, tokenRegExp = (0, exports.getTokenRegExp)(), match;\n        // iterate through each date token found.\n        while ((match = tokenRegExp.exec(expFormat)) !== null) {\n            var preMatch = expFormat.slice(index, match.index);\n            index = tokenRegExp.lastIndex;\n            // don't replace any matches that occur inside a string literal.\n            quoteCount += (0, exports.appendPreOrPostMatch)(preMatch, regexp);\n            if (quoteCount % 2) {\n                regexp.push(match[0]);\n                continue;\n            }\n            // add a regex group for the token.\n            var m = match[0], len = m.length, add;\n            switch (m) {\n                case \"dddd\":\n                case \"ddd\":\n                case \"MMMM\":\n                case \"MMM\":\n                case \"gg\":\n                case \"g\":\n                    add = \"(\\\\D+)\";\n                    break;\n                case \"tt\":\n                case \"t\":\n                    add = \"(\\\\D*)\";\n                    break;\n                case \"yyyy\":\n                case \"fff\":\n                case \"ff\":\n                case \"f\":\n                    add = \"(\\\\d{\" + len + \"})\";\n                    break;\n                case \"dd\":\n                case \"d\":\n                case \"MM\":\n                case \"M\":\n                case \"yy\":\n                case \"y\":\n                case \"HH\":\n                case \"H\":\n                case \"hh\":\n                case \"h\":\n                case \"mm\":\n                case \"m\":\n                case \"ss\":\n                case \"s\":\n                    add = \"(\\\\d\\\\d?)\";\n                    break;\n                case \"zzz\":\n                    add = \"([+-]?\\\\d\\\\d?:\\\\d{2})\";\n                    break;\n                case \"zz\":\n                case \"z\":\n                    add = \"([+-]?\\\\d\\\\d?)\";\n                    break;\n                case \"/\":\n                    add = \"(\\\\\" + cal[\"/\"] + \")\";\n                    break;\n                default:\n                    throw \"Invalid date format pattern \\'\" + m + \"\\'.\";\n            }\n            if (add) {\n                regexp.push(add);\n            }\n            groups.push(match[0]);\n        }\n        (0, exports.appendPreOrPostMatch)(expFormat.slice(index), regexp);\n        regexp.push(\"$\");\n        // allow whitespace to differ when matching formats.\n        var regexpStr = regexp.join(\"\").replace(/\\s+/g, \"\\\\s+\"), parseRegExp = { \"regExp\": regexpStr, \"groups\": groups };\n        // cache the regex for this format.\n        return re[format] = parseRegExp;\n    };\n    outOfRange = function (value, low, high) {\n        return value < low || value > high;\n    };\n    toUpper = function (value) {\n        // \"he-IL\" has non-breaking space in weekday names.\n        return value.split(\"\\u00A0\").join(\" \").toUpperCase();\n    };\n    toUpperArray = function (arr) {\n        var results = [];\n        for (var i = 0, l = arr.length; i < l; i++) {\n            results[i] = toUpper(arr[i]);\n        }\n        return results;\n    };\n    exports.parseExact = function (value, format, culture) {\n        // try to parse the date string by matching against the format string\n        // while using the specified culture for date field names.\n        value = (0, exports.trim)(value);\n        var cal = culture.calendar, \n        // convert date formats into regular expressions with groupings.\n        // use the regexp to determine the input format and extract the date fields.\n        parseInfo = getParseRegExp(cal, format), match = new RegExp(parseInfo.regExp).exec(value);\n        if (match === null) {\n            return null;\n        }\n        // found a date format that matches the input.\n        var groups = parseInfo.groups, era = null, year = null, month = null, date = null, weekDay = null, hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null, pmHour = false;\n        // iterate the format groups to extract and set the date fields.\n        for (var j = 0, jl = groups.length; j < jl; j++) {\n            var matchGroup = match[j + 1];\n            if (matchGroup) {\n                var current = groups[j], clength = current.length, matchInt = parseInt(matchGroup, 10);\n                switch (current) {\n                    case \"dd\":\n                    case \"d\":\n                        // Day of month.\n                        date = matchInt;\n                        // check that date is generally in valid range, also checking overflow below.\n                        if (outOfRange(date, 1, 31))\n                            return null;\n                        break;\n                    case \"MMM\":\n                    case \"MMMM\":\n                        month = getMonthIndex(cal, matchGroup, clength === 3);\n                        if (outOfRange(month, 0, 11))\n                            return null;\n                        break;\n                    case \"M\":\n                    case \"MM\":\n                        // Month.\n                        month = matchInt - 1;\n                        if (outOfRange(month, 0, 11))\n                            return null;\n                        break;\n                    case \"y\":\n                    case \"yy\":\n                    case \"yyyy\":\n                        year = clength < 4 ? expandYear(cal, matchInt) : matchInt;\n                        if (outOfRange(year, 0, 9999))\n                            return null;\n                        break;\n                    case \"h\":\n                    case \"hh\":\n                        // Hours (12-hour clock).\n                        hour = matchInt;\n                        if (hour === 12)\n                            hour = 0;\n                        if (outOfRange(hour, 0, 11))\n                            return null;\n                        break;\n                    case \"H\":\n                    case \"HH\":\n                        // Hours (24-hour clock).\n                        hour = matchInt;\n                        if (outOfRange(hour, 0, 23))\n                            return null;\n                        break;\n                    case \"m\":\n                    case \"mm\":\n                        // Minutes.\n                        min = matchInt;\n                        if (outOfRange(min, 0, 59))\n                            return null;\n                        break;\n                    case \"s\":\n                    case \"ss\":\n                        // Seconds.\n                        sec = matchInt;\n                        if (outOfRange(sec, 0, 59))\n                            return null;\n                        break;\n                    case \"tt\":\n                    case \"t\":\n                        // AM/PM designator.\n                        // see if it is standard, upper, or lower case PM. If not, ensure it is at least one of\n                        // the AM tokens. If not, fail the parse for this format.\n                        pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);\n                        if (!pmHour && (!cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2])))\n                            return null;\n                        break;\n                    case \"f\":\n                    // Deciseconds.\n                    case \"ff\":\n                    // Centiseconds.\n                    case \"fff\":\n                        // Milliseconds.\n                        msec = matchInt * Math.pow(10, 3 - clength);\n                        if (outOfRange(msec, 0, 999))\n                            return null;\n                        break;\n                    case \"ddd\":\n                    // Day of week.\n                    case \"dddd\":\n                        // Day of week.\n                        weekDay = getDayIndex(cal, matchGroup, clength === 3);\n                        if (outOfRange(weekDay, 0, 6))\n                            return null;\n                        break;\n                    case \"zzz\":\n                        // Time zone offset in +/- hours:min.\n                        var offsets = matchGroup.split(/:/);\n                        if (offsets.length !== 2)\n                            return null;\n                        hourOffset = parseInt(offsets[0], 10);\n                        if (outOfRange(hourOffset, -12, 13))\n                            return null;\n                        var minOffset = parseInt(offsets[1], 10);\n                        if (outOfRange(minOffset, 0, 59))\n                            return null;\n                        tzMinOffset = (hourOffset * 60) + ((0, exports.startsWith)(matchGroup, \"-\") ? -minOffset : minOffset);\n                        break;\n                    case \"z\":\n                    case \"zz\":\n                        // Time zone offset in +/- hours.\n                        hourOffset = matchInt;\n                        if (outOfRange(hourOffset, -12, 13))\n                            return null;\n                        tzMinOffset = hourOffset * 60;\n                        break;\n                    case \"g\":\n                    case \"gg\":\n                        var eraName = matchGroup;\n                        if (!eraName || !cal.eras)\n                            return null;\n                        eraName = (0, exports.trim)(eraName.toLowerCase());\n                        for (var i = 0, l = cal.eras.length; i < l; i++) {\n                            if (eraName === cal.eras[i].name.toLowerCase()) {\n                                era = i;\n                                break;\n                            }\n                        }\n                        // could not find an era with that name\n                        if (era === null)\n                            return null;\n                        break;\n                }\n            }\n        }\n        var result = new Date(), defaultYear, convert = cal.convert;\n        defaultYear = convert ? convert.fromGregorian(result)[0] : result.getFullYear();\n        if (year === null) {\n            year = defaultYear;\n        }\n        else if (cal.eras) {\n            // year must be shifted to normal gregorian year\n            // but not if year was not specified, its already normal gregorian\n            // per the main if clause above.\n            year += cal.eras[(era || 0)].offset;\n        }\n        // set default day and month to 1 and January, so if unspecified, these are the defaults\n        // instead of the current day/month.\n        if (month === null) {\n            month = 0;\n        }\n        if (date === null) {\n            date = 1;\n        }\n        // now have year, month, and date, but in the culture's calendar.\n        // convert to gregorian if necessary\n        if (convert) {\n            result = convert.toGregorian(year, month, date);\n            // conversion failed, must be an invalid match\n            if (result === null)\n                return null;\n        }\n        else {\n            // have to set year, month and date together to avoid overflow based on current date.\n            result.setFullYear(year, month, date);\n            // check to see if date overflowed for specified month (only checked 1-31 above).\n            if (result.getDate() !== date)\n                return null;\n            // invalid day of week.\n            if (weekDay !== null && result.getDay() !== weekDay) {\n                return null;\n            }\n        }\n        // if pm designator token was found make sure the hours fit the 24-hour clock.\n        if (pmHour && hour < 12) {\n            hour += 12;\n        }\n        result.setHours(hour, min, sec, msec);\n        if (tzMinOffset !== null) {\n            // adjust timezone to utc before applying local offset.\n            var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());\n            // Safari limits hours and minutes to the range of -127 to 127.\t We need to use setHours\n            // to ensure both these fields will not exceed this range.\tadjustedMin will range\n            // somewhere between -1440 and 1500, so we only need to split this into hours.\n            result.setHours(result.getHours() + parseInt((adjustedMin / 60).toString(), 10), adjustedMin % 60);\n        }\n        return result;\n    };\n}());\nexports.parseNegativePattern = function (value, nf, negativePattern) {\n    var neg = nf[\"-\"], pos = nf[\"+\"], ret;\n    switch (negativePattern) {\n        case \"n -\":\n            neg = \" \" + neg;\n            pos = \" \" + pos;\n        // fall through\n        case \"n-\":\n            if ((0, exports.endsWith)(value, neg)) {\n                ret = [\"-\", value.substring(0, value.length - neg.length)];\n            }\n            else if ((0, exports.endsWith)(value, pos)) {\n                ret = [\"+\", value.substring(0, value.length - pos.length)];\n            }\n            break;\n        case \"- n\":\n            neg += \" \";\n            pos += \" \";\n        // fall through\n        case \"-n\":\n            if ((0, exports.startsWith)(value, neg)) {\n                ret = [\"-\", value.substring(neg.length)];\n            }\n            else if ((0, exports.startsWith)(value, pos)) {\n                ret = [\"+\", value.substring(pos.length)];\n            }\n            break;\n        case \"(n)\":\n            if ((0, exports.startsWith)(value, \"(\") && (0, exports.endsWith)(value, \")\")) {\n                ret = [\"-\", value.substring(1, value.length - 1)];\n            }\n            break;\n    }\n    return ret || [\"\", value];\n};\n//\n// public instance functions\n//\nexports.Globalize.prototype.findClosestCulture = function (cultureSelector) {\n    return exports.Globalize.findClosestCulture.call(this, cultureSelector);\n};\nexports.Globalize.prototype.format = function (value, format, cultureSelector) {\n    return exports.Globalize.format.call(this, value, format, cultureSelector);\n};\nexports.Globalize.prototype.localize = function (key, cultureSelector) {\n    return exports.Globalize.localize.call(this, key, cultureSelector);\n};\nexports.Globalize.prototype.parseInt = function (value, radix, cultureSelector) {\n    return exports.Globalize.parseInt.call(this, value, radix, cultureSelector);\n};\nexports.Globalize.prototype.parseFloat = function (value, radix, cultureSelector) {\n    return exports.Globalize.parseFloat.call(this, value, radix, cultureSelector);\n};\nexports.Globalize.prototype.culture = function (cultureSelector) {\n    return exports.Globalize.culture.call(this, cultureSelector);\n};\n//\n// public singleton functions\n//\nexports.Globalize.addCultureInfo = function (cultureName, baseCultureName, info) {\n    var base = {}, isNew = false;\n    if (typeof cultureName !== \"string\") {\n        // cultureName argument is optional string. If not specified, assume info is first\n        // and only argument. Specified info deep-extends current culture.\n        info = cultureName;\n        cultureName = this.culture().name;\n        base = this.cultures[cultureName];\n    }\n    else if (typeof baseCultureName !== \"string\") {\n        // baseCultureName argument is optional string. If not specified, assume info is second\n        // argument. Specified info deep-extends specified culture.\n        // If specified culture does not exist, create by deep-extending default\n        info = baseCultureName;\n        isNew = (this.cultures[cultureName] == null);\n        base = this.cultures[cultureName] || this.cultures[\"default\"];\n    }\n    else {\n        // cultureName and baseCultureName specified. Assume a new culture is being created\n        // by deep-extending an specified base culture\n        isNew = true;\n        base = this.cultures[baseCultureName];\n    }\n    this.cultures[cultureName] = (0, exports.extend)(true, {}, base, info);\n    // Make the standard calendar the current culture if it's a new culture\n    if (isNew) {\n        this.cultures[cultureName].calendar = this.cultures[cultureName].calendars.standard;\n    }\n};\nexports.Globalize.findClosestCulture = function (name) {\n    var match;\n    if (!name) {\n        return this.cultures[this.cultureSelector] || this.cultures[\"default\"];\n    }\n    if (typeof name === \"string\") {\n        name = name.split(\",\");\n    }\n    if ((0, exports.isArray)(name)) {\n        var lang, cultures = this.cultures, list = name, i, l = list.length, prioritized = [];\n        for (i = 0; i < l; i++) {\n            name = (0, exports.trim)(list[i]);\n            var pri, parts = name.split(\";\");\n            lang = (0, exports.trim)(parts[0]);\n            if (parts.length === 1) {\n                pri = 1;\n            }\n            else {\n                name = (0, exports.trim)(parts[1]);\n                if (name.indexOf(\"q=\") === 0) {\n                    name = name.substring(2);\n                    pri = parseFloat(name);\n                    pri = isNaN(pri) ? 0 : pri;\n                }\n                else {\n                    pri = 1;\n                }\n            }\n            prioritized.push({ lang: lang, pri: pri });\n        }\n        prioritized.sort(function (a, b) {\n            return a.pri < b.pri ? 1 : -1;\n        });\n        // exact match\n        for (i = 0; i < l; i++) {\n            lang = prioritized[i].lang;\n            match = cultures[lang];\n            if (match) {\n                return match;\n            }\n        }\n        // neutral language match\n        for (i = 0; i < l; i++) {\n            lang = prioritized[i].lang;\n            do {\n                var index = lang.lastIndexOf(\"-\");\n                if (index === -1) {\n                    break;\n                }\n                // strip off the last part. e.g. en-US => en\n                lang = lang.substring(0, index);\n                match = cultures[lang];\n                if (match) {\n                    return match;\n                }\n            } while (1);\n        }\n        // last resort: match first culture using that language\n        for (i = 0; i < l; i++) {\n            lang = prioritized[i].lang;\n            for (var cultureKey in cultures) {\n                var culture = cultures[cultureKey];\n                if (culture.language == lang) {\n                    return culture;\n                }\n            }\n        }\n    }\n    else if (typeof name === \"object\") {\n        return name;\n    }\n    return match || null;\n};\nexports.Globalize.format = function (value, format, cultureSelector) {\n    var culture = this.findClosestCulture(cultureSelector);\n    if (value instanceof Date) {\n        value = (0, exports.formatDate)(value, format, culture);\n    }\n    else if (typeof value === \"number\") {\n        value = (0, exports.formatNumber)(value, format, culture);\n    }\n    return value;\n};\nexports.Globalize.localize = function (key, cultureSelector) {\n    return (this.findClosestCulture(cultureSelector).messages[key]\n        ||\n            this.cultures[\"default\"].messages[\"key\"]);\n};\nexports.Globalize.parseDate = function (value, formats, culture) {\n    culture = this.findClosestCulture(culture);\n    var date, prop, patterns;\n    if (formats) {\n        if (typeof formats === \"string\") {\n            formats = [formats];\n        }\n        if (formats.length) {\n            for (var i = 0, l = formats.length; i < l; i++) {\n                var format = formats[i];\n                if (format) {\n                    date = (0, exports.parseExact)(value, format, culture);\n                    if (date) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    else {\n        patterns = culture.calendar.patterns;\n        for (prop in patterns) {\n            date = (0, exports.parseExact)(value, patterns[prop], culture);\n            if (date) {\n                break;\n            }\n        }\n    }\n    return date || null;\n};\nexports.Globalize.parseInt = function (value, radix, cultureSelector) {\n    return Math.floor(exports.Globalize.parseFloat(value, radix, cultureSelector));\n};\nexports.Globalize.parseFloat = function (value, radix, cultureSelector) {\n    // radix argument is optional\n    if (typeof radix !== \"number\") {\n        cultureSelector = radix;\n        radix = 10;\n    }\n    var culture = this.findClosestCulture(cultureSelector);\n    var ret = NaN, nf = culture.numberFormat;\n    if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {\n        // remove currency symbol\n        value = value.replace(culture.numberFormat.currency.symbol, \"\");\n        // replace decimal seperator\n        value = value.replace(culture.numberFormat.currency[\".\"], culture.numberFormat[\".\"]);\n    }\n    // trim leading and trailing whitespace\n    value = (0, exports.trim)(value);\n    // allow infinity or hexidecimal\n    if (exports.regexInfinity.test(value)) {\n        ret = parseFloat(value);\n    }\n    else if (!radix && exports.regexHex.test(value)) {\n        ret = parseInt(value, 16);\n    }\n    else {\n        var signInfo = (0, exports.parseNegativePattern)(value, nf, nf.pattern[0]), sign = signInfo[0], num = signInfo[1];\n        // determine sign and number\n        if (sign === \"\" && nf.pattern[0] !== \"-n\") {\n            signInfo = (0, exports.parseNegativePattern)(value, nf, \"-n\");\n            sign = signInfo[0];\n            num = signInfo[1];\n        }\n        sign = sign || \"+\";\n        // determine exponent and number\n        var exponent, intAndFraction, exponentPos = num.indexOf(\"e\");\n        if (exponentPos < 0)\n            exponentPos = num.indexOf(\"E\");\n        if (exponentPos < 0) {\n            intAndFraction = num;\n            exponent = null;\n        }\n        else {\n            intAndFraction = num.substring(0, exponentPos);\n            exponent = num.substring(exponentPos + 1);\n        }\n        // determine decimal position\n        var integer, fraction, decSep = nf[\".\"], decimalPos = intAndFraction.indexOf(decSep);\n        if (decimalPos < 0) {\n            integer = intAndFraction;\n            fraction = null;\n        }\n        else {\n            integer = intAndFraction.substring(0, decimalPos);\n            fraction = intAndFraction.substring(decimalPos + decSep.length);\n        }\n        // handle groups (e.g. 1,000,000)\n        var groupSep = nf[\",\"];\n        integer = integer.split(groupSep).join(\"\");\n        var altGroupSep = groupSep.replace(/\\u00A0/g, \" \");\n        if (groupSep !== altGroupSep) {\n            integer = integer.split(altGroupSep).join(\"\");\n        }\n        // build a natively parsable number string\n        var p = sign + integer;\n        if (fraction !== null) {\n            p += \".\" + fraction;\n        }\n        if (exponent !== null) {\n            // exponent itself may have a number patternd\n            var expSignInfo = (0, exports.parseNegativePattern)(exponent, nf, \"-n\");\n            p += \"e\" + (expSignInfo[0] || \"+\") + expSignInfo[1];\n        }\n        if (exports.regexParseFloat.test(p)) {\n            ret = parseFloat(p);\n        }\n    }\n    return ret;\n};\nexports.Globalize.culture = function (cultureSelector) {\n    // setter\n    if (typeof cultureSelector !== \"undefined\") {\n        this.cultureSelector = cultureSelector;\n    }\n    // getter\n    return this.findClosestCulture(cultureSelector) || this.culture[\"default\"];\n};\n//# sourceMappingURL=globalize.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.locales = void 0;\nexports.locales = {\n    \"ar\": [\"ar\", \"default\", {\n            \"name\": \"ar\",\n            \"englishName\": \"Arabic\",\n            \"nativeName\": \"العربية\",\n            \"language\": \"ar\",\n            \"isRTL\": true,\n            \"numberFormat\": {\n                \"pattern\": [\"n-\"],\n                \"currency\": {\n                    \"pattern\": [\"$n-\", \"$ n\"],\n                    \"symbol\": \"ر.س.‏\"\n                }\n            },\n            \"calendars\": {\n                \"standard\": {\n                    \"name\": \"UmAlQura\",\n                    \"firstDay\": 6,\n                    \"days\": {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    \"months\": {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"bg\": [\"bg\", \"default\", {\n            name: \"bg\",\n            englishName: \"Bulgarian\",\n            nativeName: \"български\",\n            language: \"bg\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"лв.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"неделя\", \"понеделник\", \"вторник\", \"сряда\", \"четвъртък\", \"петък\", \"събота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"вт\", \"ср\", \"четв\", \"пет\", \"съб\"],\n                        namesShort: [\"н\", \"п\", \"в\", \"с\", \"ч\", \"п\", \"с\"]\n                    },\n                    months: {\n                        names: [\"януари\", \"февруари\", \"март\", \"април\", \"май\", \"юни\", \"юли\", \"август\", \"септември\", \"октомври\", \"ноември\", \"декември\", \"\"],\n                        namesAbbr: [\"ян\", \"февр\", \"март\", \"апр\", \"май\", \"юни\", \"юли\", \"авг\", \"септ\", \"окт\", \"ноември\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"след новата ера\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy 'г.'\",\n                        D: \"dd MMMM yyyy 'г.'\",\n                        t: \"HH:mm 'ч.'\",\n                        T: \"HH:mm:ss 'ч.'\",\n                        f: \"dd MMMM yyyy 'г.' HH:mm 'ч.'\",\n                        F: \"dd MMMM yyyy 'г.' HH:mm:ss 'ч.'\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy 'г.'\"\n                    }\n                }\n            }\n        }],\n    \"ca\": [\"ca\", \"default\", {\n            name: \"ca\",\n            englishName: \"Catalan\",\n            nativeName: \"català\",\n            language: \"ca\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"diumenge\", \"dilluns\", \"dimarts\", \"dimecres\", \"dijous\", \"divendres\", \"dissabte\"],\n                        namesAbbr: [\"dg.\", \"dl.\", \"dt.\", \"dc.\", \"dj.\", \"dv.\", \"ds.\"],\n                        namesShort: [\"dg\", \"dl\", \"dt\", \"dc\", \"dj\", \"dv\", \"ds\"]\n                    },\n                    months: {\n                        names: [\"gener\", \"febrer\", \"març\", \"abril\", \"maig\", \"juny\", \"juliol\", \"agost\", \"setembre\", \"octubre\", \"novembre\", \"desembre\", \"\"],\n                        namesAbbr: [\"gen\", \"feb\", \"març\", \"abr\", \"maig\", \"juny\", \"jul\", \"ag\", \"set\", \"oct\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d' / 'MMMM' / 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d' / 'MMMM' / 'yyyy HH:mm\",\n                        F: \"dddd, d' / 'MMMM' / 'yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' / 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"zh-Hans\": [\"zh-Hans\", \"default\", {\n            name: \"zh-Hans\",\n            englishName: \"Chinese (Simplified)\",\n            nativeName: \"中文(简体)\",\n            language: \"zh-Hans\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"cs\": [\"cs\", \"default\", {\n            name: \"cs\",\n            englishName: \"Czech\",\n            nativeName: \"čeština\",\n            language: \"cs\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Kč\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"neděle\", \"pondělí\", \"úterý\", \"středa\", \"čtvrtek\", \"pátek\", \"sobota\"],\n                        namesAbbr: [\"ne\", \"po\", \"út\", \"st\", \"čt\", \"pá\", \"so\"],\n                        namesShort: [\"ne\", \"po\", \"út\", \"st\", \"čt\", \"pá\", \"so\"]\n                    },\n                    months: {\n                        names: [\"leden\", \"únor\", \"březen\", \"duben\", \"květen\", \"červen\", \"červenec\", \"srpen\", \"září\", \"říjen\", \"listopad\", \"prosinec\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ledna\", \"února\", \"března\", \"dubna\", \"května\", \"června\", \"července\", \"srpna\", \"září\", \"října\", \"listopadu\", \"prosince\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"dop.\", \"dop.\", \"DOP.\"],\n                    PM: [\"odp.\", \"odp.\", \"ODP.\"],\n                    eras: [{ \"name\": \"n. l.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"da\": [\"da\", \"default\", {\n            name: \"da\",\n            englishName: \"Danish\",\n            nativeName: \"dansk\",\n            language: \"da\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"søndag\", \"mandag\", \"tirsdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lørdag\"],\n                        namesAbbr: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"],\n                        namesShort: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"marts\", \"april\", \"maj\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"de\": [\"de\", \"default\", {\n            name: \"de\",\n            englishName: \"German\",\n            nativeName: \"Deutsch\",\n            language: \"de\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n                        namesAbbr: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n                        namesShort: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d. MMMM yyyy HH:mm\",\n                        F: \"dddd, d. MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"el\": [\"el\", \"default\", {\n            name: \"el\",\n            englishName: \"Greek\",\n            nativeName: \"Ελληνικά\",\n            language: \"el\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Κυριακή\", \"Δευτέρα\", \"Τρίτη\", \"Τετάρτη\", \"Πέμπτη\", \"Παρασκευή\", \"Σάββατο\"],\n                        namesAbbr: [\"Κυρ\", \"Δευ\", \"Τρι\", \"Τετ\", \"Πεμ\", \"Παρ\", \"Σαβ\"],\n                        namesShort: [\"Κυ\", \"Δε\", \"Τρ\", \"Τε\", \"Πε\", \"Πα\", \"Σά\"]\n                    },\n                    months: {\n                        names: [\"Ιανουάριος\", \"Φεβρουάριος\", \"Μάρτιος\", \"Απρίλιος\", \"Μάιος\", \"Ιούνιος\", \"Ιούλιος\", \"Αύγουστος\", \"Σεπτέμβριος\", \"Οκτώβριος\", \"Νοέμβριος\", \"Δεκέμβριος\", \"\"],\n                        namesAbbr: [\"Ιαν\", \"Φεβ\", \"Μαρ\", \"Απρ\", \"Μαϊ\", \"Ιουν\", \"Ιουλ\", \"Αυγ\", \"Σεπ\", \"Οκτ\", \"Νοε\", \"Δεκ\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"Ιανουαρίου\", \"Φεβρουαρίου\", \"Μαρτίου\", \"Απριλίου\", \"Μαΐου\", \"Ιουνίου\", \"Ιουλίου\", \"Αυγούστου\", \"Σεπτεμβρίου\", \"Οκτωβρίου\", \"Νοεμβρίου\", \"Δεκεμβρίου\", \"\"],\n                        namesAbbr: [\"Ιαν\", \"Φεβ\", \"Μαρ\", \"Απρ\", \"Μαϊ\", \"Ιουν\", \"Ιουλ\", \"Αυγ\", \"Σεπ\", \"Οκτ\", \"Νοε\", \"Δεκ\", \"\"]\n                    },\n                    AM: [\"πμ\", \"πμ\", \"ΠΜ\"],\n                    PM: [\"μμ\", \"μμ\", \"ΜΜ\"],\n                    eras: [{ \"name\": \"μ.Χ.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd, d MMMM yyyy\",\n                        f: \"dddd, d MMMM yyyy h:mm tt\",\n                        F: \"dddd, d MMMM yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es\": [\"es\", \"default\", {\n            name: \"es\",\n            englishName: \"Spanish\",\n            nativeName: \"español\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fi\": [\"fi\", \"default\", {\n            name: \"fi\",\n            englishName: \"Finnish\",\n            nativeName: \"suomi\",\n            language: \"fi\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sunnuntai\", \"maanantai\", \"tiistai\", \"keskiviikko\", \"torstai\", \"perjantai\", \"lauantai\"],\n                        namesAbbr: [\"su\", \"ma\", \"ti\", \"ke\", \"to\", \"pe\", \"la\"],\n                        namesShort: [\"su\", \"ma\", \"ti\", \"ke\", \"to\", \"pe\", \"la\"]\n                    },\n                    months: {\n                        names: [\"tammikuu\", \"helmikuu\", \"maaliskuu\", \"huhtikuu\", \"toukokuu\", \"kesäkuu\", \"heinäkuu\", \"elokuu\", \"syyskuu\", \"lokakuu\", \"marraskuu\", \"joulukuu\", \"\"],\n                        namesAbbr: [\"tammi\", \"helmi\", \"maalis\", \"huhti\", \"touko\", \"kesä\", \"heinä\", \"elo\", \"syys\", \"loka\", \"marras\", \"joulu\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM'ta 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM'ta 'yyyy H:mm\",\n                        F: \"d. MMMM'ta 'yyyy H:mm:ss\",\n                        M: \"d. MMMM'ta'\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fr\": [\"fr\", \"default\", {\n            name: \"fr\",\n            englishName: \"French\",\n            nativeName: \"français\",\n            language: \"fr\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"he\": [\"he\", \"default\", {\n            name: \"he\",\n            englishName: \"Hebrew\",\n            nativeName: \"עברית\",\n            language: \"he\",\n            isRTL: true,\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"₪\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"יום ראשון\", \"יום שני\", \"יום שלישי\", \"יום רביעי\", \"יום חמישי\", \"יום שישי\", \"שבת\"],\n                        namesAbbr: [\"יום א\", \"יום ב\", \"יום ג\", \"יום ד\", \"יום ה\", \"יום ו\", \"שבת\"],\n                        namesShort: [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"]\n                    },\n                    months: {\n                        names: [\"ינואר\", \"פברואר\", \"מרץ\", \"אפריל\", \"מאי\", \"יוני\", \"יולי\", \"אוגוסט\", \"ספטמבר\", \"אוקטובר\", \"נובמבר\", \"דצמבר\", \"\"],\n                        namesAbbr: [\"ינו\", \"פבר\", \"מרץ\", \"אפר\", \"מאי\", \"יונ\", \"יול\", \"אוג\", \"ספט\", \"אוק\", \"נוב\", \"דצמ\", \"\"]\n                    },\n                    eras: [{ \"name\": \"לספירה\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd dd MMMM yyyy HH:mm\",\n                        F: \"dddd dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                },\n                Hebrew: {\n                    name: \"Hebrew\",\n                    \"/\": \" \",\n                    days: {\n                        names: [\"יום ראשון\", \"יום שני\", \"יום שלישי\", \"יום רביעי\", \"יום חמישי\", \"יום שישי\", \"שבת\"],\n                        namesAbbr: [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"],\n                        namesShort: [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"]\n                    },\n                    months: {\n                        names: [\"תשרי\", \"חשון\", \"כסלו\", \"טבת\", \"שבט\", \"אדר\", \"אדר ב\", \"ניסן\", \"אייר\", \"סיון\", \"תמוז\", \"אב\", \"אלול\"],\n                        namesAbbr: [\"תשרי\", \"חשון\", \"כסלו\", \"טבת\", \"שבט\", \"אדר\", \"אדר ב\", \"ניסן\", \"אייר\", \"סיון\", \"תמוז\", \"אב\", \"אלול\"]\n                    },\n                    eras: [{ \"name\": \"C.E.\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 5790,\n                    patterns: {\n                        d: \"dd MMMM yyyy\",\n                        D: \"dddd dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd dd MMMM yyyy HH:mm\",\n                        F: \"dddd dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hu\": [\"hu\", \"default\", {\n            name: \"hu\",\n            englishName: \"Hungarian\",\n            nativeName: \"magyar\",\n            language: \"hu\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Ft\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"vasárnap\", \"hétfő\", \"kedd\", \"szerda\", \"csütörtök\", \"péntek\", \"szombat\"],\n                        namesAbbr: [\"V\", \"H\", \"K\", \"Sze\", \"Cs\", \"P\", \"Szo\"],\n                        namesShort: [\"V\", \"H\", \"K\", \"Sze\", \"Cs\", \"P\", \"Szo\"]\n                    },\n                    months: {\n                        names: [\"január\", \"február\", \"március\", \"április\", \"május\", \"június\", \"július\", \"augusztus\", \"szeptember\", \"október\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan.\", \"febr.\", \"márc.\", \"ápr.\", \"máj.\", \"jún.\", \"júl.\", \"aug.\", \"szept.\", \"okt.\", \"nov.\", \"dec.\", \"\"]\n                    },\n                    AM: [\"de.\", \"de.\", \"DE.\"],\n                    PM: [\"du.\", \"du.\", \"DU.\"],\n                    eras: [{ \"name\": \"i.sz.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy.MM.dd.\",\n                        D: \"yyyy. MMMM d.\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy. MMMM d. H:mm\",\n                        F: \"yyyy. MMMM d. H:mm:ss\",\n                        M: \"MMMM d.\",\n                        Y: \"yyyy. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"is\": [\"is\", \"default\", {\n            name: \"is\",\n            englishName: \"Icelandic\",\n            nativeName: \"íslenska\",\n            language: \"is\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    decimals: 0,\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sunnudagur\", \"mánudagur\", \"þriðjudagur\", \"miðvikudagur\", \"fimmtudagur\", \"föstudagur\", \"laugardagur\"],\n                        namesAbbr: [\"sun.\", \"mán.\", \"þri.\", \"mið.\", \"fim.\", \"fös.\", \"lau.\"],\n                        namesShort: [\"su\", \"má\", \"þr\", \"mi\", \"fi\", \"fö\", \"la\"]\n                    },\n                    months: {\n                        names: [\"janúar\", \"febrúar\", \"mars\", \"apríl\", \"maí\", \"júní\", \"júlí\", \"ágúst\", \"september\", \"október\", \"nóvember\", \"desember\", \"\"],\n                        namesAbbr: [\"jan.\", \"feb.\", \"mar.\", \"apr.\", \"maí\", \"jún.\", \"júl.\", \"ágú.\", \"sep.\", \"okt.\", \"nóv.\", \"des.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"it\": [\"it\", \"default\", {\n            name: \"it\",\n            englishName: \"Italian\",\n            nativeName: \"italiano\",\n            language: \"it\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domenica\", \"lunedì\", \"martedì\", \"mercoledì\", \"giovedì\", \"venerdì\", \"sabato\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mer\", \"gio\", \"ven\", \"sab\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"me\", \"gi\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"gennaio\", \"febbraio\", \"marzo\", \"aprile\", \"maggio\", \"giugno\", \"luglio\", \"agosto\", \"settembre\", \"ottobre\", \"novembre\", \"dicembre\", \"\"],\n                        namesAbbr: [\"gen\", \"feb\", \"mar\", \"apr\", \"mag\", \"giu\", \"lug\", \"ago\", \"set\", \"ott\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ja\": [\"ja\", \"default\", {\n            name: \"ja\",\n            englishName: \"Japanese\",\n            nativeName: \"日本語\",\n            language: \"ja\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    decimals: 0,\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"日曜日\", \"月曜日\", \"火曜日\", \"水曜日\", \"木曜日\", \"金曜日\", \"土曜日\"],\n                        namesAbbr: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"],\n                        namesShort: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"]\n                    },\n                    months: {\n                        names: [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"午前\", \"午前\", \"午前\"],\n                    PM: [\"午後\", \"午後\", \"午後\"],\n                    eras: [{ \"name\": \"西暦\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                },\n                Japanese: {\n                    name: \"Japanese\",\n                    days: {\n                        names: [\"日曜日\", \"月曜日\", \"火曜日\", \"水曜日\", \"木曜日\", \"金曜日\", \"土曜日\"],\n                        namesAbbr: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"],\n                        namesShort: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"]\n                    },\n                    months: {\n                        names: [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"午前\", \"午前\", \"午前\"],\n                    PM: [\"午後\", \"午後\", \"午後\"],\n                    eras: [{ \"name\": \"平成\", \"start\": null, \"offset\": 1867 }, { \"name\": \"昭和\", \"start\": -1812153600000, \"offset\": 1911 }, { \"name\": \"大正\", \"start\": -1357603200000, \"offset\": 1925 }, { \"name\": \"明治\", \"start\": 60022080000, \"offset\": 1988 }],\n                    twoDigitYearMax: 99,\n                    patterns: {\n                        d: \"gg y/M/d\",\n                        D: \"gg y'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"gg y'年'M'月'd'日' H:mm\",\n                        F: \"gg y'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"gg y'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"ko\": [\"ko\", \"default\", {\n            name: \"ko\",\n            englishName: \"Korean\",\n            nativeName: \"한국어\",\n            language: \"ko\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    decimals: 0,\n                    symbol: \"₩\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"],\n                        namesAbbr: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"],\n                        namesShort: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]\n                    },\n                    months: {\n                        names: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\", \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"오전\", \"오전\", \"오전\"],\n                    PM: [\"오후\", \"오후\", \"오후\"],\n                    eras: [{ \"name\": \"서기\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"yyyy'년' M'월' d'일' dddd\",\n                        t: \"tt h:mm\",\n                        T: \"tt h:mm:ss\",\n                        f: \"yyyy'년' M'월' d'일' dddd tt h:mm\",\n                        F: \"yyyy'년' M'월' d'일' dddd tt h:mm:ss\",\n                        M: \"M'월' d'일'\",\n                        Y: \"yyyy'년' M'월'\"\n                    }\n                },\n                Korean: {\n                    name: \"Korean\",\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"],\n                        namesAbbr: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"],\n                        namesShort: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]\n                    },\n                    months: {\n                        names: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\", \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"오전\", \"오전\", \"오전\"],\n                    PM: [\"오후\", \"오후\", \"오후\"],\n                    eras: [{ \"name\": \"단기\", \"start\": null, \"offset\": -2333 }],\n                    twoDigitYearMax: 4362,\n                    patterns: {\n                        d: \"gg yyyy-MM-dd\",\n                        D: \"gg yyyy'년' M'월' d'일' dddd\",\n                        t: \"tt h:mm\",\n                        T: \"tt h:mm:ss\",\n                        f: \"gg yyyy'년' M'월' d'일' dddd tt h:mm\",\n                        F: \"gg yyyy'년' M'월' d'일' dddd tt h:mm:ss\",\n                        M: \"M'월' d'일'\",\n                        Y: \"gg yyyy'년' M'월'\"\n                    }\n                }\n            }\n        }],\n    \"nl\": [\"nl\", \"default\", {\n            name: \"nl\",\n            englishName: \"Dutch\",\n            nativeName: \"Nederlands\",\n            language: \"nl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"zondag\", \"maandag\", \"dinsdag\", \"woensdag\", \"donderdag\", \"vrijdag\", \"zaterdag\"],\n                        namesAbbr: [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"],\n                        namesShort: [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"maart\", \"april\", \"mei\", \"juni\", \"juli\", \"augustus\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mrt\", \"apr\", \"mei\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d-M-yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd d MMMM yyyy H:mm\",\n                        F: \"dddd d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"no\": [\"no\", \"default\", {\n            name: \"no\",\n            englishName: \"Norwegian\",\n            nativeName: \"norsk\",\n            language: \"no\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"søndag\", \"mandag\", \"tirsdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lørdag\"],\n                        namesAbbr: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"],\n                        namesShort: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mars\", \"april\", \"mai\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"desember\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"pl\": [\"pl\", \"default\", {\n            name: \"pl\",\n            englishName: \"Polish\",\n            nativeName: \"polski\",\n            language: \"pl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"zł\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"niedziela\", \"poniedziałek\", \"wtorek\", \"środa\", \"czwartek\", \"piątek\", \"sobota\"],\n                        namesAbbr: [\"N\", \"Pn\", \"Wt\", \"Śr\", \"Cz\", \"Pt\", \"So\"],\n                        namesShort: [\"N\", \"Pn\", \"Wt\", \"Śr\", \"Cz\", \"Pt\", \"So\"]\n                    },\n                    months: {\n                        names: [\"styczeń\", \"luty\", \"marzec\", \"kwiecień\", \"maj\", \"czerwiec\", \"lipiec\", \"sierpień\", \"wrzesień\", \"październik\", \"listopad\", \"grudzień\", \"\"],\n                        namesAbbr: [\"sty\", \"lut\", \"mar\", \"kwi\", \"maj\", \"cze\", \"lip\", \"sie\", \"wrz\", \"paź\", \"lis\", \"gru\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"stycznia\", \"lutego\", \"marca\", \"kwietnia\", \"maja\", \"czerwca\", \"lipca\", \"sierpnia\", \"września\", \"października\", \"listopada\", \"grudnia\", \"\"],\n                        namesAbbr: [\"sty\", \"lut\", \"mar\", \"kwi\", \"maj\", \"cze\", \"lip\", \"sie\", \"wrz\", \"paź\", \"lis\", \"gru\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy HH:mm\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"pt\": [\"pt\", \"default\", {\n            name: \"pt\",\n            englishName: \"Portuguese\",\n            nativeName: \"Português\",\n            language: \"pt\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"R$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"segunda-feira\", \"terça-feira\", \"quarta-feira\", \"quinta-feira\", \"sexta-feira\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"seg\", \"ter\", \"qua\", \"qui\", \"sex\", \"sáb\"],\n                        namesShort: [\"D\", \"S\", \"T\", \"Q\", \"Q\", \"S\", \"S\"]\n                    },\n                    months: {\n                        names: [\"janeiro\", \"fevereiro\", \"março\", \"abril\", \"maio\", \"junho\", \"julho\", \"agosto\", \"setembro\", \"outubro\", \"novembro\", \"dezembro\", \"\"],\n                        namesAbbr: [\"jan\", \"fev\", \"mar\", \"abr\", \"mai\", \"jun\", \"jul\", \"ago\", \"set\", \"out\", \"nov\", \"dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d' de 'MMMM' de 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d' de 'MMMM' de 'yyyy HH:mm\",\n                        F: \"dddd, d' de 'MMMM' de 'yyyy HH:mm:ss\",\n                        M: \"dd' de 'MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"rm\": [\"rm\", \"default\", {\n            name: \"rm\",\n            englishName: \"Romansh\",\n            nativeName: \"Rumantsch\",\n            language: \"rm\",\n            numberFormat: {\n                \",\": \"'\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \"'\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \"'\",\n                    symbol: \"fr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dumengia\", \"glindesdi\", \"mardi\", \"mesemna\", \"gievgia\", \"venderdi\", \"sonda\"],\n                        namesAbbr: [\"du\", \"gli\", \"ma\", \"me\", \"gie\", \"ve\", \"so\"],\n                        namesShort: [\"du\", \"gli\", \"ma\", \"me\", \"gie\", \"ve\", \"so\"]\n                    },\n                    months: {\n                        names: [\"schaner\", \"favrer\", \"mars\", \"avrigl\", \"matg\", \"zercladur\", \"fanadur\", \"avust\", \"settember\", \"october\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"schan\", \"favr\", \"mars\", \"avr\", \"matg\", \"zercl\", \"fan\", \"avust\", \"sett\", \"oct\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"s. Cr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d MMMM yyyy HH:mm\",\n                        F: \"dddd, d MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ro\": [\"ro\", \"default\", {\n            name: \"ro\",\n            englishName: \"Romanian\",\n            nativeName: \"română\",\n            language: \"ro\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"lei\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"duminică\", \"luni\", \"marţi\", \"miercuri\", \"joi\", \"vineri\", \"sâmbătă\"],\n                        namesAbbr: [\"D\", \"L\", \"Ma\", \"Mi\", \"J\", \"V\", \"S\"],\n                        namesShort: [\"D\", \"L\", \"Ma\", \"Mi\", \"J\", \"V\", \"S\"]\n                    },\n                    months: {\n                        names: [\"ianuarie\", \"februarie\", \"martie\", \"aprilie\", \"mai\", \"iunie\", \"iulie\", \"august\", \"septembrie\", \"octombrie\", \"noiembrie\", \"decembrie\", \"\"],\n                        namesAbbr: [\"ian.\", \"feb.\", \"mar.\", \"apr.\", \"mai.\", \"iun.\", \"iul.\", \"aug.\", \"sep.\", \"oct.\", \"nov.\", \"dec.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy HH:mm\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ru\": [\"ru\", \"default\", {\n            name: \"ru\",\n            englishName: \"Russian\",\n            nativeName: \"русский\",\n            language: \"ru\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"воскресенье\", \"понедельник\", \"вторник\", \"среда\", \"четверг\", \"пятница\", \"суббота\"],\n                        namesAbbr: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n                        namesShort: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]\n                    },\n                    months: {\n                        names: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\", \"\"],\n                        namesAbbr: [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\", \"\"],\n                        namesAbbr: [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy 'г.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy 'г.' H:mm\",\n                        F: \"d MMMM yyyy 'г.' H:mm:ss\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hr\": [\"hr\", \"default\", {\n            name: \"hr\",\n            englishName: \"Croatian\",\n            nativeName: \"hrvatski\",\n            language: \"hr\",\n            numberFormat: {\n                pattern: [\"- n\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kn\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedjelja\", \"ponedjeljak\", \"utorak\", \"srijeda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sri\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"siječanj\", \"veljača\", \"ožujak\", \"travanj\", \"svibanj\", \"lipanj\", \"srpanj\", \"kolovoz\", \"rujan\", \"listopad\", \"studeni\", \"prosinac\", \"\"],\n                        namesAbbr: [\"sij\", \"vlj\", \"ožu\", \"tra\", \"svi\", \"lip\", \"srp\", \"kol\", \"ruj\", \"lis\", \"stu\", \"pro\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"siječnja\", \"veljače\", \"ožujka\", \"travnja\", \"svibnja\", \"lipnja\", \"srpnja\", \"kolovoza\", \"rujna\", \"listopada\", \"studenog\", \"prosinca\", \"\"],\n                        namesAbbr: [\"sij\", \"vlj\", \"ožu\", \"tra\", \"svi\", \"lip\", \"srp\", \"kol\", \"ruj\", \"lis\", \"stu\", \"pro\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy.\",\n                        D: \"d. MMMM yyyy.\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy. H:mm\",\n                        F: \"d. MMMM yyyy. H:mm:ss\",\n                        M: \"d. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"sk\": [\"sk\", \"default\", {\n            name: \"sk\",\n            englishName: \"Slovak\",\n            nativeName: \"slovenčina\",\n            language: \"sk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \". \",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedeľa\", \"pondelok\", \"utorok\", \"streda\", \"štvrtok\", \"piatok\", \"sobota\"],\n                        namesAbbr: [\"ne\", \"po\", \"ut\", \"st\", \"št\", \"pi\", \"so\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"st\", \"št\", \"pi\", \"so\"]\n                    },\n                    months: {\n                        names: [\"január\", \"február\", \"marec\", \"apríl\", \"máj\", \"jún\", \"júl\", \"august\", \"september\", \"október\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"januára\", \"februára\", \"marca\", \"apríla\", \"mája\", \"júna\", \"júla\", \"augusta\", \"septembra\", \"októbra\", \"novembra\", \"decembra\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. l.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d. M. yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sq\": [\"sq\", \"default\", {\n            name: \"sq\",\n            englishName: \"Albanian\",\n            nativeName: \"shqipe\",\n            language: \"sq\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Lek\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"e diel\", \"e hënë\", \"e martë\", \"e mërkurë\", \"e enjte\", \"e premte\", \"e shtunë\"],\n                        namesAbbr: [\"Die\", \"Hën\", \"Mar\", \"Mër\", \"Enj\", \"Pre\", \"Sht\"],\n                        namesShort: [\"Di\", \"Hë\", \"Ma\", \"Më\", \"En\", \"Pr\", \"Sh\"]\n                    },\n                    months: {\n                        names: [\"janar\", \"shkurt\", \"mars\", \"prill\", \"maj\", \"qershor\", \"korrik\", \"gusht\", \"shtator\", \"tetor\", \"nëntor\", \"dhjetor\", \"\"],\n                        namesAbbr: [\"Jan\", \"Shk\", \"Mar\", \"Pri\", \"Maj\", \"Qer\", \"Kor\", \"Gsh\", \"Sht\", \"Tet\", \"Nën\", \"Dhj\", \"\"]\n                    },\n                    AM: [\"PD\", \"pd\", \"PD\"],\n                    PM: [\"MD\", \"md\", \"MD\"],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"yyyy-MM-dd\",\n                        t: \"h:mm.tt\",\n                        T: \"h:mm:ss.tt\",\n                        f: \"yyyy-MM-dd h:mm.tt\",\n                        F: \"yyyy-MM-dd h:mm:ss.tt\",\n                        Y: \"yyyy-MM\"\n                    }\n                }\n            }\n        }],\n    \"sv\": [\"sv\", \"default\", {\n            name: \"sv\",\n            englishName: \"Swedish\",\n            nativeName: \"svenska\",\n            language: \"sv\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"söndag\", \"måndag\", \"tisdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lördag\"],\n                        namesAbbr: [\"sö\", \"må\", \"ti\", \"on\", \"to\", \"fr\", \"lö\"],\n                        namesShort: [\"sö\", \"må\", \"ti\", \"on\", \"to\", \"fr\", \"lö\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"mars\", \"april\", \"maj\", \"juni\", \"juli\", \"augusti\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"'den 'd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"'den 'd MMMM yyyy HH:mm\",\n                        F: \"'den 'd MMMM yyyy HH:mm:ss\",\n                        M: \"'den 'd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"th\": [\"th\", \"default\", {\n            name: \"th\",\n            englishName: \"Thai\",\n            nativeName: \"ไทย\",\n            language: \"th\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"฿\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"ThaiBuddhist\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"อาทิตย์\", \"จันทร์\", \"อังคาร\", \"พุธ\", \"พฤหัสบดี\", \"ศุกร์\", \"เสาร์\"],\n                        namesAbbr: [\"อา.\", \"จ.\", \"อ.\", \"พ.\", \"พฤ.\", \"ศ.\", \"ส.\"],\n                        namesShort: [\"อ\", \"จ\", \"อ\", \"พ\", \"พ\", \"ศ\", \"ส\"]\n                    },\n                    months: {\n                        names: [\"มกราคม\", \"กุมภาพันธ์\", \"มีนาคม\", \"เมษายน\", \"พฤษภาคม\", \"มิถุนายน\", \"กรกฎาคม\", \"สิงหาคม\", \"กันยายน\", \"ตุลาคม\", \"พฤศจิกายน\", \"ธันวาคม\", \"\"],\n                        namesAbbr: [\"ม.ค.\", \"ก.พ.\", \"มี.ค.\", \"เม.ย.\", \"พ.ค.\", \"มิ.ย.\", \"ก.ค.\", \"ส.ค.\", \"ก.ย.\", \"ต.ค.\", \"พ.ย.\", \"ธ.ค.\", \"\"]\n                    },\n                    eras: [{ \"name\": \"พ.ศ.\", \"start\": null, \"offset\": -543 }],\n                    twoDigitYearMax: 2572,\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"อาทิตย์\", \"จันทร์\", \"อังคาร\", \"พุธ\", \"พฤหัสบดี\", \"ศุกร์\", \"เสาร์\"],\n                        namesAbbr: [\"อา.\", \"จ.\", \"อ.\", \"พ.\", \"พฤ.\", \"ศ.\", \"ส.\"],\n                        namesShort: [\"อ\", \"จ\", \"อ\", \"พ\", \"พ\", \"ศ\", \"ส\"]\n                    },\n                    months: {\n                        names: [\"มกราคม\", \"กุมภาพันธ์\", \"มีนาคม\", \"เมษายน\", \"พฤษภาคม\", \"มิถุนายน\", \"กรกฎาคม\", \"สิงหาคม\", \"กันยายน\", \"ตุลาคม\", \"พฤศจิกายน\", \"ธันวาคม\", \"\"],\n                        namesAbbr: [\"ม.ค.\", \"ก.พ.\", \"มี.ค.\", \"เม.ย.\", \"พ.ค.\", \"มิ.ย.\", \"ก.ค.\", \"ส.ค.\", \"ก.ย.\", \"ต.ค.\", \"พ.ย.\", \"ธ.ค.\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"'วัน'dddd'ที่' d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"'วัน'dddd'ที่' d MMMM yyyy H:mm\",\n                        F: \"'วัน'dddd'ที่' d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tr\": [\"tr\", \"default\", {\n            name: \"tr\",\n            englishName: \"Turkish\",\n            nativeName: \"Türkçe\",\n            language: \"tr\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"TL\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Pazar\", \"Pazartesi\", \"Salı\", \"Çarşamba\", \"Perşembe\", \"Cuma\", \"Cumartesi\"],\n                        namesAbbr: [\"Paz\", \"Pzt\", \"Sal\", \"Çar\", \"Per\", \"Cum\", \"Cmt\"],\n                        namesShort: [\"Pz\", \"Pt\", \"Sa\", \"Ça\", \"Pe\", \"Cu\", \"Ct\"]\n                    },\n                    months: {\n                        names: [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\", \"\"],\n                        namesAbbr: [\"Oca\", \"Şub\", \"Mar\", \"Nis\", \"May\", \"Haz\", \"Tem\", \"Ağu\", \"Eyl\", \"Eki\", \"Kas\", \"Ara\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dd MMMM yyyy dddd\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy dddd HH:mm\",\n                        F: \"dd MMMM yyyy dddd HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ur\": [\"ur\", \"default\", {\n            name: \"ur\",\n            englishName: \"Urdu\",\n            nativeName: \"اُردو\",\n            language: \"ur\",\n            isRTL: true,\n            numberFormat: {\n                currency: {\n                    pattern: [\"$n-\", \"$n\"],\n                    symbol: \"Rs\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"اتوار\", \"پير\", \"منگل\", \"بدھ\", \"جمعرات\", \"جمعه\", \"هفته\"],\n                        namesAbbr: [\"اتوار\", \"پير\", \"منگل\", \"بدھ\", \"جمعرات\", \"جمعه\", \"هفته\"],\n                        namesShort: [\"ا\", \"پ\", \"م\", \"ب\", \"ج\", \"ج\", \"ه\"]\n                    },\n                    months: {\n                        names: [\"جنوری\", \"فروری\", \"مارچ\", \"اپریل\", \"مئی\", \"جون\", \"جولائی\", \"اگست\", \"ستمبر\", \"اکتوبر\", \"نومبر\", \"دسمبر\", \"\"],\n                        namesAbbr: [\"جنوری\", \"فروری\", \"مارچ\", \"اپریل\", \"مئی\", \"جون\", \"جولائی\", \"اگست\", \"ستمبر\", \"اکتوبر\", \"نومبر\", \"دسمبر\", \"\"]\n                    },\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        f: \"dd MMMM, yyyy h:mm tt\",\n                        F: \"dd MMMM, yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        f: \"dd/MM/yyyy h:mm tt\",\n                        F: \"dd/MM/yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                }\n            }\n        }],\n    \"id\": [\"id\", \"default\", {\n            name: \"id\",\n            englishName: \"Indonesian\",\n            nativeName: \"Bahasa Indonesia\",\n            language: \"id\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    decimals: 0,\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Rp\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Minggu\", \"Senin\", \"Selasa\", \"Rabu\", \"Kamis\", \"Jumat\", \"Sabtu\"],\n                        namesAbbr: [\"Minggu\", \"Sen\", \"Sel\", \"Rabu\", \"Kamis\", \"Jumat\", \"Sabtu\"],\n                        namesShort: [\"M\", \"S\", \"S\", \"R\", \"K\", \"J\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Januari\", \"Februari\", \"Maret\", \"April\", \"Mei\", \"Juni\", \"Juli\", \"Agustus\", \"September\", \"Oktober\", \"Nopember\", \"Desember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Agust\", \"Sep\", \"Okt\", \"Nop\", \"Des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM yyyy H:mm\",\n                        F: \"dd MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"uk\": [\"uk\", \"default\", {\n            name: \"uk\",\n            englishName: \"Ukrainian\",\n            nativeName: \"українська\",\n            language: \"uk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"₴\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"неділя\", \"понеділок\", \"вівторок\", \"середа\", \"четвер\", \"п'ятниця\", \"субота\"],\n                        namesAbbr: [\"Нд\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n                        namesShort: [\"Нд\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]\n                    },\n                    months: {\n                        names: [\"Січень\", \"Лютий\", \"Березень\", \"Квітень\", \"Травень\", \"Червень\", \"Липень\", \"Серпень\", \"Вересень\", \"Жовтень\", \"Листопад\", \"Грудень\", \"\"],\n                        namesAbbr: [\"Січ\", \"Лют\", \"Бер\", \"Кві\", \"Тра\", \"Чер\", \"Лип\", \"Сер\", \"Вер\", \"Жов\", \"Лис\", \"Гру\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"січня\", \"лютого\", \"березня\", \"квітня\", \"травня\", \"червня\", \"липня\", \"серпня\", \"вересня\", \"жовтня\", \"листопада\", \"грудня\", \"\"],\n                        namesAbbr: [\"січ\", \"лют\", \"бер\", \"кві\", \"тра\", \"чер\", \"лип\", \"сер\", \"вер\", \"жов\", \"лис\", \"гру\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy' р.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy' р.' H:mm\",\n                        F: \"d MMMM yyyy' р.' H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy' р.'\"\n                    }\n                }\n            }\n        }],\n    \"be\": [\"be\", \"default\", {\n            name: \"be\",\n            englishName: \"Belarusian\",\n            nativeName: \"Беларускі\",\n            language: \"be\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"нядзеля\", \"панядзелак\", \"аўторак\", \"серада\", \"чацвер\", \"пятніца\", \"субота\"],\n                        namesAbbr: [\"нд\", \"пн\", \"аў\", \"ср\", \"чц\", \"пт\", \"сб\"],\n                        namesShort: [\"нд\", \"пн\", \"аў\", \"ср\", \"чц\", \"пт\", \"сб\"]\n                    },\n                    months: {\n                        names: [\"Студзень\", \"Люты\", \"Сакавік\", \"Красавік\", \"Май\", \"Чэрвень\", \"Ліпень\", \"Жнівень\", \"Верасень\", \"Кастрычнік\", \"Лістапад\", \"Снежань\", \"\"],\n                        namesAbbr: [\"Сту\", \"Лют\", \"Сак\", \"Кра\", \"Май\", \"Чэр\", \"Ліп\", \"Жні\", \"Вер\", \"Кас\", \"Ліс\", \"Сне\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"студзеня\", \"лютага\", \"сакавіка\", \"красавіка\", \"мая\", \"чэрвеня\", \"ліпеня\", \"жніўня\", \"верасня\", \"кастрычніка\", \"лістапада\", \"снежня\", \"\"],\n                        namesAbbr: [\"Сту\", \"Лют\", \"Сак\", \"Кра\", \"Май\", \"Чэр\", \"Ліп\", \"Жні\", \"Вер\", \"Кас\", \"Ліс\", \"Сне\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sl\": [\"sl\", \"default\", {\n            name: \"sl\",\n            englishName: \"Slovenian\",\n            nativeName: \"slovenski\",\n            language: \"sl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljek\", \"torek\", \"sreda\", \"četrtek\", \"petek\", \"sobota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"tor\", \"sre\", \"čet\", \"pet\", \"sob\"],\n                        namesShort: [\"ne\", \"po\", \"to\", \"sr\", \"če\", \"pe\", \"so\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"marec\", \"april\", \"maj\", \"junij\", \"julij\", \"avgust\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"et\": [\"et\", \"default\", {\n            name: \"et\",\n            englishName: \"Estonian\",\n            nativeName: \"eesti\",\n            language: \"et\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"pühapäev\", \"esmaspäev\", \"teisipäev\", \"kolmapäev\", \"neljapäev\", \"reede\", \"laupäev\"],\n                        namesAbbr: [\"P\", \"E\", \"T\", \"K\", \"N\", \"R\", \"L\"],\n                        namesShort: [\"P\", \"E\", \"T\", \"K\", \"N\", \"R\", \"L\"]\n                    },\n                    months: {\n                        names: [\"jaanuar\", \"veebruar\", \"märts\", \"aprill\", \"mai\", \"juuni\", \"juuli\", \"august\", \"september\", \"oktoober\", \"november\", \"detsember\", \"\"],\n                        namesAbbr: [\"jaan\", \"veebr\", \"märts\", \"apr\", \"mai\", \"juuni\", \"juuli\", \"aug\", \"sept\", \"okt\", \"nov\", \"dets\", \"\"]\n                    },\n                    AM: [\"EL\", \"el\", \"EL\"],\n                    PM: [\"PL\", \"pl\", \"PL\"],\n                    patterns: {\n                        d: \"d.MM.yyyy\",\n                        D: \"d. MMMM yyyy'. a.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy'. a.' H:mm\",\n                        F: \"d. MMMM yyyy'. a.' H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy'. a.'\"\n                    }\n                }\n            }\n        }],\n    \"lv\": [\"lv\", \"default\", {\n            name: \"lv\",\n            englishName: \"Latvian\",\n            nativeName: \"latviešu\",\n            language: \"lv\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Ls\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"svētdiena\", \"pirmdiena\", \"otrdiena\", \"trešdiena\", \"ceturtdiena\", \"piektdiena\", \"sestdiena\"],\n                        namesAbbr: [\"sv\", \"pr\", \"ot\", \"tr\", \"ce\", \"pk\", \"se\"],\n                        namesShort: [\"sv\", \"pr\", \"ot\", \"tr\", \"ce\", \"pk\", \"se\"]\n                    },\n                    months: {\n                        names: [\"janvāris\", \"februāris\", \"marts\", \"aprīlis\", \"maijs\", \"jūnijs\", \"jūlijs\", \"augusts\", \"septembris\", \"oktobris\", \"novembris\", \"decembris\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jūn\", \"jūl\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"janvārī\", \"februārī\", \"martā\", \"aprīlī\", \"maijā\", \"jūnijā\", \"jūlijā\", \"augustā\", \"septembrī\", \"oktobrī\", \"novembrī\", \"decembrī\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jūn\", \"jūl\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy.MM.dd.\",\n                        D: \"dddd, yyyy'. gada 'd. MMMM\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, yyyy'. gada 'd. MMMM H:mm\",\n                        F: \"dddd, yyyy'. gada 'd. MMMM H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"yyyy. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"lt\": [\"lt\", \"default\", {\n            name: \"lt\",\n            englishName: \"Lithuanian\",\n            nativeName: \"lietuvių\",\n            language: \"lt\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Lt\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sekmadienis\", \"pirmadienis\", \"antradienis\", \"trečiadienis\", \"ketvirtadienis\", \"penktadienis\", \"šeštadienis\"],\n                        namesAbbr: [\"Sk\", \"Pr\", \"An\", \"Tr\", \"Kt\", \"Pn\", \"Št\"],\n                        namesShort: [\"S\", \"P\", \"A\", \"T\", \"K\", \"Pn\", \"Š\"]\n                    },\n                    months: {\n                        names: [\"sausis\", \"vasaris\", \"kovas\", \"balandis\", \"gegužė\", \"birželis\", \"liepa\", \"rugpjūtis\", \"rugsėjis\", \"spalis\", \"lapkritis\", \"gruodis\", \"\"],\n                        namesAbbr: [\"Sau\", \"Vas\", \"Kov\", \"Bal\", \"Geg\", \"Bir\", \"Lie\", \"Rgp\", \"Rgs\", \"Spl\", \"Lap\", \"Grd\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"sausio\", \"vasario\", \"kovo\", \"balandžio\", \"gegužės\", \"birželio\", \"liepos\", \"rugpjūčio\", \"rugsėjo\", \"spalio\", \"lapkričio\", \"gruodžio\", \"\"],\n                        namesAbbr: [\"Sau\", \"Vas\", \"Kov\", \"Bal\", \"Geg\", \"Bir\", \"Lie\", \"Rgp\", \"Rgs\", \"Spl\", \"Lap\", \"Grd\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy.MM.dd\",\n                        D: \"yyyy 'm.' MMMM d 'd.'\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy 'm.' MMMM d 'd.' HH:mm\",\n                        F: \"yyyy 'm.' MMMM d 'd.' HH:mm:ss\",\n                        M: \"MMMM d 'd.'\",\n                        Y: \"yyyy 'm.' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"tg\": [\"tg\", \"default\", {\n            name: \"tg\",\n            englishName: \"Tajik\",\n            nativeName: \"Тоҷикӣ\",\n            language: \"tg\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \";\",\n                    symbol: \"т.р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    days: {\n                        names: [\"Яш\", \"Душанбе\", \"Сешанбе\", \"Чоршанбе\", \"Панҷшанбе\", \"Ҷумъа\", \"Шанбе\"],\n                        namesAbbr: [\"Яш\", \"Дш\", \"Сш\", \"Чш\", \"Пш\", \"Ҷм\", \"Шн\"],\n                        namesShort: [\"Яш\", \"Дш\", \"Сш\", \"Чш\", \"Пш\", \"Ҷм\", \"Шн\"]\n                    },\n                    months: {\n                        names: [\"Январ\", \"Феврал\", \"Март\", \"Апрел\", \"Май\", \"Июн\", \"Июл\", \"Август\", \"Сентябр\", \"Октябр\", \"Ноябр\", \"Декабр\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"январи\", \"феврали\", \"марти\", \"апрели\", \"маи\", \"июни\", \"июли\", \"августи\", \"сентябри\", \"октябри\", \"ноябри\", \"декабри\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fa\": [\"fa\", \"default\", {\n            name: \"fa\",\n            englishName: \"Persian\",\n            nativeName: \"فارسى\",\n            language: \"fa\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    \".\": \"/\",\n                    symbol: \"ريال\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"يكشنبه\", \"دوشنبه\", \"سه شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesAbbr: [\"يكشنبه\", \"دوشنبه\", \"سه شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesShort: [\"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"ژانويه\", \"فوريه\", \"مارس\", \"آوريل\", \"مى\", \"ژوئن\", \"ژوئيه\", \"اوت\", \"سپتامبر\", \"اُكتبر\", \"نوامبر\", \"دسامبر\", \"\"],\n                        namesAbbr: [\"ژانويه\", \"فوريه\", \"مارس\", \"آوريل\", \"مى\", \"ژوئن\", \"ژوئيه\", \"اوت\", \"سپتامبر\", \"اُكتبر\", \"نوامبر\", \"دسامبر\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"yyyy/MM/dd\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"yyyy/MM/dd hh:mm tt\",\n                        F: \"yyyy/MM/dd hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"vi\": [\"vi\", \"default\", {\n            name: \"vi\",\n            englishName: \"Vietnamese\",\n            nativeName: \"Tiếng Việt\",\n            language: \"vi\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"₫\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Chủ Nhật\", \"Thứ Hai\", \"Thứ Ba\", \"Thứ Tư\", \"Thứ Năm\", \"Thứ Sáu\", \"Thứ Bảy\"],\n                        namesAbbr: [\"CN\", \"Hai\", \"Ba\", \"Tư\", \"Năm\", \"Sáu\", \"Bảy\"],\n                        namesShort: [\"C\", \"H\", \"B\", \"T\", \"N\", \"S\", \"B\"]\n                    },\n                    months: {\n                        names: [\"Tháng Giêng\", \"Tháng Hai\", \"Tháng Ba\", \"Tháng Tư\", \"Tháng Năm\", \"Tháng Sáu\", \"Tháng Bảy\", \"Tháng Tám\", \"Tháng Chín\", \"Tháng Mười\", \"Tháng Mười Một\", \"Tháng Mười Hai\", \"\"],\n                        namesAbbr: [\"Thg1\", \"Thg2\", \"Thg3\", \"Thg4\", \"Thg5\", \"Thg6\", \"Thg7\", \"Thg8\", \"Thg9\", \"Thg10\", \"Thg11\", \"Thg12\", \"\"]\n                    },\n                    AM: [\"SA\", \"sa\", \"SA\"],\n                    PM: [\"CH\", \"ch\", \"CH\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        f: \"dd MMMM yyyy h:mm tt\",\n                        F: \"dd MMMM yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hy\": [\"hy\", \"default\", {\n            name: \"hy\",\n            englishName: \"Armenian\",\n            nativeName: \"Հայերեն\",\n            language: \"hy\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    symbol: \"դր.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Կիրակի\", \"Երկուշաբթի\", \"Երեքշաբթի\", \"Չորեքշաբթի\", \"Հինգշաբթի\", \"ՈՒրբաթ\", \"Շաբաթ\"],\n                        namesAbbr: [\"Կիր\", \"Երկ\", \"Երք\", \"Չրք\", \"Հնգ\", \"ՈՒր\", \"Շբթ\"],\n                        namesShort: [\"Կ\", \"Ե\", \"Ե\", \"Չ\", \"Հ\", \"Ո\", \"Շ\"]\n                    },\n                    months: {\n                        names: [\"Հունվար\", \"Փետրվար\", \"Մարտ\", \"Ապրիլ\", \"Մայիս\", \"Հունիս\", \"Հուլիս\", \"Օգոստոս\", \"Սեպտեմբեր\", \"Հոկտեմբեր\", \"Նոյեմբեր\", \"Դեկտեմբեր\", \"\"],\n                        namesAbbr: [\"ՀՆՎ\", \"ՓՏՎ\", \"ՄՐՏ\", \"ԱՊՐ\", \"ՄՅՍ\", \"ՀՆՍ\", \"ՀԼՍ\", \"ՕԳՍ\", \"ՍԵՊ\", \"ՀՈԿ\", \"ՆՈՅ\", \"ԴԵԿ\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM, yyyy H:mm\",\n                        F: \"d MMMM, yyyy H:mm:ss\",\n                        M: \"d MMMM\"\n                    }\n                }\n            }\n        }],\n    \"az\": [\"az\", \"default\", {\n            name: \"az\",\n            englishName: \"Azeri\",\n            nativeName: \"Azərbaycan­ılı\",\n            language: \"az\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"man.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Bazar\", \"Bazar ertəsi\", \"Çərşənbə axşamı\", \"Çərşənbə\", \"Cümə axşamı\", \"Cümə\", \"Şənbə\"],\n                        namesAbbr: [\"B\", \"Be\", \"Ça\", \"Ç\", \"Ca\", \"C\", \"Ş\"],\n                        namesShort: [\"B\", \"Be\", \"Ça\", \"Ç\", \"Ca\", \"C\", \"Ş\"]\n                    },\n                    months: {\n                        names: [\"Yanvar\", \"Fevral\", \"Mart\", \"Aprel\", \"May\", \"İyun\", \"İyul\", \"Avgust\", \"Sentyabr\", \"Oktyabr\", \"Noyabr\", \"Dekabr\", \"\"],\n                        namesAbbr: [\"Yan\", \"Fev\", \"Mar\", \"Apr\", \"May\", \"İyun\", \"İyul\", \"Avg\", \"Sen\", \"Okt\", \"Noy\", \"Dek\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"],\n                        namesAbbr: [\"Yan\", \"Fev\", \"Mar\", \"Apr\", \"May\", \"İyun\", \"İyul\", \"Avg\", \"Sen\", \"Okt\", \"Noy\", \"Dek\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"eu\": [\"eu\", \"default\", {\n            name: \"eu\",\n            englishName: \"Basque\",\n            nativeName: \"euskara\",\n            language: \"eu\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"igandea\", \"astelehena\", \"asteartea\", \"asteazkena\", \"osteguna\", \"ostirala\", \"larunbata\"],\n                        namesAbbr: [\"ig.\", \"al.\", \"as.\", \"az.\", \"og.\", \"or.\", \"lr.\"],\n                        namesShort: [\"ig\", \"al\", \"as\", \"az\", \"og\", \"or\", \"lr\"]\n                    },\n                    months: {\n                        names: [\"urtarrila\", \"otsaila\", \"martxoa\", \"apirila\", \"maiatza\", \"ekaina\", \"uztaila\", \"abuztua\", \"iraila\", \"urria\", \"azaroa\", \"abendua\", \"\"],\n                        namesAbbr: [\"urt.\", \"ots.\", \"mar.\", \"api.\", \"mai.\", \"eka.\", \"uzt.\", \"abu.\", \"ira.\", \"urr.\", \"aza.\", \"abe.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dddd, yyyy.'eko' MMMM'k 'd\",\n                        t: \"HH:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, yyyy.'eko' MMMM'k 'd HH:mm\",\n                        F: \"dddd, yyyy.'eko' MMMM'k 'd H:mm:ss\",\n                        Y: \"yyyy.'eko' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"hsb\": [\"hsb\", \"default\", {\n            name: \"hsb\",\n            englishName: \"Upper Sorbian\",\n            nativeName: \"hornjoserbšćina\",\n            language: \"hsb\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \". \",\n                    firstDay: 1,\n                    days: {\n                        names: [\"njedźela\", \"póndźela\", \"wutora\", \"srjeda\", \"štwórtk\", \"pjatk\", \"sobota\"],\n                        namesAbbr: [\"nje\", \"pón\", \"wut\", \"srj\", \"štw\", \"pja\", \"sob\"],\n                        namesShort: [\"n\", \"p\", \"w\", \"s\", \"š\", \"p\", \"s\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"měrc\", \"apryl\", \"meja\", \"junij\", \"julij\", \"awgust\", \"september\", \"oktober\", \"nowember\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"mej\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"januara\", \"februara\", \"měrca\", \"apryla\", \"meje\", \"junija\", \"julija\", \"awgusta\", \"septembra\", \"oktobra\", \"nowembra\", \"decembra\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"mej\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"po Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d. M. yyyy\",\n                        D: \"dddd, 'dnja' d. MMMM yyyy\",\n                        t: \"H.mm 'hodź.'\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'\",\n                        F: \"dddd, 'dnja' d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"mk\": [\"mk\", \"default\", {\n            name: \"mk\",\n            englishName: \"Macedonian (FYROM)\",\n            nativeName: \"македонски јазик\",\n            language: \"mk\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"ден.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недела\", \"понеделник\", \"вторник\", \"среда\", \"четврток\", \"петок\", \"сабота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"втр\", \"срд\", \"чет\", \"пет\", \"саб\"],\n                        namesShort: [\"не\", \"по\", \"вт\", \"ср\", \"че\", \"пе\", \"са\"]\n                    },\n                    months: {\n                        names: [\"јануари\", \"февруари\", \"март\", \"април\", \"мај\", \"јуни\", \"јули\", \"август\", \"септември\", \"октомври\", \"ноември\", \"декември\", \"\"],\n                        namesAbbr: [\"јан\", \"фев\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"ное\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, dd MMMM yyyy HH:mm\",\n                        F: \"dddd, dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tn\": [\"tn\", \"default\", {\n            name: \"tn\",\n            englishName: \"Setswana\",\n            nativeName: \"Setswana\",\n            language: \"tn\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Latshipi\", \"Mosupologo\", \"Labobedi\", \"Laboraro\", \"Labone\", \"Labotlhano\", \"Lamatlhatso\"],\n                        namesAbbr: [\"Ltp.\", \"Mos.\", \"Lbd.\", \"Lbr.\", \"Lbn.\", \"Lbt.\", \"Lmt.\"],\n                        namesShort: [\"Lp\", \"Ms\", \"Lb\", \"Lr\", \"Ln\", \"Lt\", \"Lm\"]\n                    },\n                    months: {\n                        names: [\"Ferikgong\", \"Tlhakole\", \"Mopitloe\", \"Moranang\", \"Motsheganong\", \"Seetebosigo\", \"Phukwi\", \"Phatwe\", \"Lwetse\", \"Diphalane\", \"Ngwanatsele\", \"Sedimothole\", \"\"],\n                        namesAbbr: [\"Fer.\", \"Tlhak.\", \"Mop.\", \"Mor.\", \"Motsh.\", \"Seet.\", \"Phukw.\", \"Phatw.\", \"Lwets.\", \"Diph.\", \"Ngwan.\", \"Sed.\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"xh\": [\"xh\", \"default\", {\n            name: \"xh\",\n            englishName: \"isiXhosa\",\n            nativeName: \"isiXhosa\",\n            language: \"xh\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"iCawa\", \"uMvulo\", \"uLwesibini\", \"uLwesithathu\", \"uLwesine\", \"uLwesihlanu\", \"uMgqibelo\"],\n                        namesShort: [\"Ca\", \"Mv\", \"Lb\", \"Lt\", \"Ln\", \"Lh\", \"Mg\"]\n                    },\n                    months: {\n                        names: [\"Mqungu\", \"Mdumba\", \"Kwindla\", \"Tshazimpuzi\", \"Canzibe\", \"Silimela\", \"Khala\", \"Thupha\", \"Msintsi\", \"Dwarha\", \"Nkanga\", \"Mnga\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"zu\": [\"zu\", \"default\", {\n            name: \"zu\",\n            englishName: \"isiZulu\",\n            nativeName: \"isiZulu\",\n            language: \"zu\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"iSonto\", \"uMsombuluko\", \"uLwesibili\", \"uLwesithathu\", \"uLwesine\", \"uLwesihlanu\", \"uMgqibelo\"],\n                        namesAbbr: [\"Son.\", \"Mso.\", \"Bi.\", \"Tha.\", \"Ne.\", \"Hla.\", \"Mgq.\"]\n                    },\n                    months: {\n                        names: [\"uMasingana\", \"uNhlolanja\", \"uNdasa\", \"uMbaso\", \"uNhlaba\", \"uNhlangulana\", \"uNtulikazi\", \"uNcwaba\", \"uMandulo\", \"uMfumfu\", \"uLwezi\", \"uZibandlela\", \"\"],\n                        namesAbbr: [\"Mas.\", \"Nhlo.\", \"Nda.\", \"Mba.\", \"Nhla.\", \"Nhlang.\", \"Ntu.\", \"Ncwa.\", \"Man.\", \"Mfu.\", \"Lwe.\", \"Zib.\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"af\": [\"af\", \"default\", {\n            name: \"af\",\n            englishName: \"Afrikaans\",\n            nativeName: \"Afrikaans\",\n            language: \"af\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Sondag\", \"Maandag\", \"Dinsdag\", \"Woensdag\", \"Donderdag\", \"Vrydag\", \"Saterdag\"],\n                        namesAbbr: [\"Son\", \"Maan\", \"Dins\", \"Woen\", \"Dond\", \"Vry\", \"Sat\"],\n                        namesShort: [\"So\", \"Ma\", \"Di\", \"Wo\", \"Do\", \"Vr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januarie\", \"Februarie\", \"Maart\", \"April\", \"Mei\", \"Junie\", \"Julie\", \"Augustus\", \"September\", \"Oktober\", \"November\", \"Desember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Des\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ka\": [\"ka\", \"default\", {\n            name: \"ka\",\n            englishName: \"Georgian\",\n            nativeName: \"ქართული\",\n            language: \"ka\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Lari\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"კვირა\", \"ორშაბათი\", \"სამშაბათი\", \"ოთხშაბათი\", \"ხუთშაბათი\", \"პარასკევი\", \"შაბათი\"],\n                        namesAbbr: [\"კვირა\", \"ორშაბათი\", \"სამშაბათი\", \"ოთხშაბათი\", \"ხუთშაბათი\", \"პარასკევი\", \"შაბათი\"],\n                        namesShort: [\"კ\", \"ო\", \"ს\", \"ო\", \"ხ\", \"პ\", \"შ\"]\n                    },\n                    months: {\n                        names: [\"იანვარი\", \"თებერვალი\", \"მარტი\", \"აპრილი\", \"მაისი\", \"ივნისი\", \"ივლისი\", \"აგვისტო\", \"სექტემბერი\", \"ოქტომბერი\", \"ნოემბერი\", \"დეკემბერი\", \"\"],\n                        namesAbbr: [\"იან\", \"თებ\", \"მარ\", \"აპრ\", \"მაის\", \"ივნ\", \"ივლ\", \"აგვ\", \"სექ\", \"ოქტ\", \"ნოემ\", \"დეკ\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"yyyy 'წლის' dd MM, dddd\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy 'წლის' dd MM, dddd H:mm\",\n                        F: \"yyyy 'წლის' dd MM, dddd H:mm:ss\",\n                        M: \"dd MM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fo\": [\"fo\", \"default\", {\n            name: \"fo\",\n            englishName: \"Faroese\",\n            nativeName: \"føroyskt\",\n            language: \"fo\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sunnudagur\", \"mánadagur\", \"týsdagur\", \"mikudagur\", \"hósdagur\", \"fríggjadagur\", \"leygardagur\"],\n                        namesAbbr: [\"sun\", \"mán\", \"týs\", \"mik\", \"hós\", \"frí\", \"leyg\"],\n                        namesShort: [\"su\", \"má\", \"tý\", \"mi\", \"hó\", \"fr\", \"ley\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mars\", \"apríl\", \"mai\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"desember\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hi\": [\"hi\", \"default\", {\n            name: \"hi\",\n            englishName: \"Hindi\",\n            nativeName: \"हिंदी\",\n            language: \"hi\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"रविवार\", \"सोमवार\", \"मंगलवार\", \"बुधवार\", \"गुरुवार\", \"शुक्रवार\", \"शनिवार\"],\n                        namesAbbr: [\"रवि.\", \"सोम.\", \"मंगल.\", \"बुध.\", \"गुरु.\", \"शुक्र.\", \"शनि.\"],\n                        namesShort: [\"र\", \"स\", \"म\", \"ब\", \"ग\", \"श\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"],\n                        namesAbbr: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"]\n                    },\n                    AM: [\"पूर्वाह्न\", \"पूर्वाह्न\", \"पूर्वाह्न\"],\n                    PM: [\"अपराह्न\", \"अपराह्न\", \"अपराह्न\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"mt\": [\"mt\", \"default\", {\n            name: \"mt\",\n            englishName: \"Maltese\",\n            nativeName: \"Malti\",\n            language: \"mt\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Il-Ħadd\", \"It-Tnejn\", \"It-Tlieta\", \"L-Erbgħa\", \"Il-Ħamis\", \"Il-Ġimgħa\", \"Is-Sibt\"],\n                        namesAbbr: [\"Ħad\", \"Tne\", \"Tli\", \"Erb\", \"Ħam\", \"Ġim\", \"Sib\"],\n                        namesShort: [\"I\", \"I\", \"I\", \"L\", \"I\", \"I\", \"I\"]\n                    },\n                    months: {\n                        names: [\"Jannar\", \"Frar\", \"Marzu\", \"April\", \"Mejju\", \"Ġunju\", \"Lulju\", \"Awissu\", \"Settembru\", \"Ottubru\", \"Novembru\", \"Diċembru\", \"\"],\n                        namesAbbr: [\"Jan\", \"Fra\", \"Mar\", \"Apr\", \"Mej\", \"Ġun\", \"Lul\", \"Awi\", \"Set\", \"Ott\", \"Nov\", \"Diċ\", \"\"]\n                    },\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d' ta\\\\' 'MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d' ta\\\\' 'MMMM yyyy HH:mm\",\n                        F: \"dddd, d' ta\\\\' 'MMMM yyyy HH:mm:ss\",\n                        M: \"d' ta\\\\' 'MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"se\": [\"se\", \"default\", {\n            name: \"se\",\n            englishName: \"Sami (Northern)\",\n            nativeName: \"davvisámegiella\",\n            language: \"se\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sotnabeaivi\", \"vuossárga\", \"maŋŋebárga\", \"gaskavahkku\", \"duorastat\", \"bearjadat\", \"lávvardat\"],\n                        namesAbbr: [\"sotn\", \"vuos\", \"maŋ\", \"gask\", \"duor\", \"bear\", \"láv\"],\n                        namesShort: [\"s\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"ođđajagemánnu\", \"guovvamánnu\", \"njukčamánnu\", \"cuoŋománnu\", \"miessemánnu\", \"geassemánnu\", \"suoidnemánnu\", \"borgemánnu\", \"čakčamánnu\", \"golggotmánnu\", \"skábmamánnu\", \"juovlamánnu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ođđajagimánu\", \"guovvamánu\", \"njukčamánu\", \"cuoŋománu\", \"miessemánu\", \"geassemánu\", \"suoidnemánu\", \"borgemánu\", \"čakčamánu\", \"golggotmánu\", \"skábmamánu\", \"juovlamánu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ga\": [\"ga\", \"default\", {\n            name: \"ga\",\n            englishName: \"Irish\",\n            nativeName: \"Gaeilge\",\n            language: \"ga\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Dé Domhnaigh\", \"Dé Luain\", \"Dé Máirt\", \"Dé Céadaoin\", \"Déardaoin\", \"Dé hAoine\", \"Dé Sathairn\"],\n                        namesAbbr: [\"Domh\", \"Luan\", \"Máir\", \"Céad\", \"Déar\", \"Aoi\", \"Sath\"],\n                        namesShort: [\"Do\", \"Lu\", \"Má\", \"Cé\", \"De\", \"Ao\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Eanáir\", \"Feabhra\", \"Márta\", \"Aibreán\", \"Bealtaine\", \"Meitheamh\", \"Iúil\", \"Lúnasa\", \"Meán Fómhair\", \"Deireadh Fómhair\", \"Samhain\", \"Nollaig\", \"\"],\n                        namesAbbr: [\"Ean\", \"Feabh\", \"Már\", \"Aib\", \"Bealt\", \"Meith\", \"Iúil\", \"Lún\", \"M.Fómh\", \"D.Fómh\", \"Samh\", \"Noll\", \"\"]\n                    },\n                    AM: [\"r.n.\", \"r.n.\", \"R.N.\"],\n                    PM: [\"i.n.\", \"i.n.\", \"I.N.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy HH:mm\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ms\": [\"ms\", \"default\", {\n            name: \"ms\",\n            englishName: \"Malay\",\n            nativeName: \"Bahasa Melayu\",\n            language: \"ms\",\n            numberFormat: {\n                currency: {\n                    decimals: 0,\n                    symbol: \"RM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Ahad\", \"Isnin\", \"Selasa\", \"Rabu\", \"Khamis\", \"Jumaat\", \"Sabtu\"],\n                        namesAbbr: [\"Ahad\", \"Isnin\", \"Sel\", \"Rabu\", \"Khamis\", \"Jumaat\", \"Sabtu\"],\n                        namesShort: [\"A\", \"I\", \"S\", \"R\", \"K\", \"J\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Januari\", \"Februari\", \"Mac\", \"April\", \"Mei\", \"Jun\", \"Julai\", \"Ogos\", \"September\", \"Oktober\", \"November\", \"Disember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mac\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Ogos\", \"Sept\", \"Okt\", \"Nov\", \"Dis\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM yyyy H:mm\",\n                        F: \"dd MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"kk\": [\"kk\", \"default\", {\n            name: \"kk\",\n            englishName: \"Kazakh\",\n            nativeName: \"Қазақ\",\n            language: \"kk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    \",\": \" \",\n                    \".\": \"-\",\n                    symbol: \"Т\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Жексенбі\", \"Дүйсенбі\", \"Сейсенбі\", \"Сәрсенбі\", \"Бейсенбі\", \"Жұма\", \"Сенбі\"],\n                        namesAbbr: [\"Жк\", \"Дс\", \"Сс\", \"Ср\", \"Бс\", \"Жм\", \"Сн\"],\n                        namesShort: [\"Жк\", \"Дс\", \"Сс\", \"Ср\", \"Бс\", \"Жм\", \"Сн\"]\n                    },\n                    months: {\n                        names: [\"қаңтар\", \"ақпан\", \"наурыз\", \"сәуір\", \"мамыр\", \"маусым\", \"шілде\", \"тамыз\", \"қыркүйек\", \"қазан\", \"қараша\", \"желтоқсан\", \"\"],\n                        namesAbbr: [\"Қаң\", \"Ақп\", \"Нау\", \"Сәу\", \"Мам\", \"Мау\", \"Шіл\", \"Там\", \"Қыр\", \"Қаз\", \"Қар\", \"Жел\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy 'ж.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy 'ж.' H:mm\",\n                        F: \"d MMMM yyyy 'ж.' H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ky\": [\"ky\", \"default\", {\n            name: \"ky\",\n            englishName: \"Kyrgyz\",\n            nativeName: \"Кыргыз\",\n            language: \"ky\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \"-\",\n                    symbol: \"сом\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Жекшемби\", \"Дүйшөмбү\", \"Шейшемби\", \"Шаршемби\", \"Бейшемби\", \"Жума\", \"Ишемби\"],\n                        namesAbbr: [\"Жш\", \"Дш\", \"Шш\", \"Шр\", \"Бш\", \"Жм\", \"Иш\"],\n                        namesShort: [\"Жш\", \"Дш\", \"Шш\", \"Шр\", \"Бш\", \"Жм\", \"Иш\"]\n                    },\n                    months: {\n                        names: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"d'-'MMMM yyyy'-ж.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d'-'MMMM yyyy'-ж.' H:mm\",\n                        F: \"d'-'MMMM yyyy'-ж.' H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy'-ж.'\"\n                    }\n                }\n            }\n        }],\n    \"sw\": [\"sw\", \"default\", {\n            name: \"sw\",\n            englishName: \"Kiswahili\",\n            nativeName: \"Kiswahili\",\n            language: \"sw\",\n            numberFormat: {\n                currency: {\n                    symbol: \"S\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Jumapili\", \"Jumatatu\", \"Jumanne\", \"Jumatano\", \"Alhamisi\", \"Ijumaa\", \"Jumamosi\"],\n                        namesAbbr: [\"Jumap.\", \"Jumat.\", \"Juman.\", \"Jumat.\", \"Alh.\", \"Iju.\", \"Jumam.\"],\n                        namesShort: [\"P\", \"T\", \"N\", \"T\", \"A\", \"I\", \"M\"]\n                    },\n                    months: {\n                        names: [\"Januari\", \"Februari\", \"Machi\", \"Aprili\", \"Mei\", \"Juni\", \"Julai\", \"Agosti\", \"Septemba\", \"Oktoba\", \"Novemba\", \"Decemba\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mac\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Ago\", \"Sep\", \"Okt\", \"Nov\", \"Dec\", \"\"]\n                    }\n                }\n            }\n        }],\n    \"tk\": [\"tk\", \"default\", {\n            name: \"tk\",\n            englishName: \"Turkmen\",\n            nativeName: \"türkmençe\",\n            language: \"tk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"m.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Duşenbe\", \"Sişenbe\", \"Çarşenbe\", \"Penşenbe\", \"Anna\", \"Şenbe\", \"Ýekşenbe\"],\n                        namesAbbr: [\"Db\", \"Sb\", \"Çb\", \"Pb\", \"An\", \"Şb\", \"Ýb\"],\n                        namesShort: [\"D\", \"S\", \"Ç\", \"P\", \"A\", \"Ş\", \"Ý\"]\n                    },\n                    months: {\n                        names: [\"Ýanwar\", \"Fewral\", \"Mart\", \"Aprel\", \"Maý\", \"lýun\", \"lýul\", \"Awgust\", \"Sentýabr\", \"Oktýabr\", \"Noýabr\", \"Dekabr\", \"\"],\n                        namesAbbr: [\"Ýan\", \"Few\", \"Mart\", \"Apr\", \"Maý\", \"lýun\", \"lýul\", \"Awg\", \"Sen\", \"Okt\", \"Not\", \"Dek\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"yyyy 'ý.' MMMM d\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy 'ý.' MMMM d H:mm\",\n                        F: \"yyyy 'ý.' MMMM d H:mm:ss\",\n                        Y: \"yyyy 'ý.' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"uz\": [\"uz\", \"default\", {\n            name: \"uz\",\n            englishName: \"Uzbek\",\n            nativeName: \"U'zbek\",\n            language: \"uz\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    decimals: 0,\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"so'm\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"yakshanba\", \"dushanba\", \"seshanba\", \"chorshanba\", \"payshanba\", \"juma\", \"shanba\"],\n                        namesAbbr: [\"yak.\", \"dsh.\", \"sesh.\", \"chr.\", \"psh.\", \"jm.\", \"sh.\"],\n                        namesShort: [\"ya\", \"d\", \"s\", \"ch\", \"p\", \"j\", \"sh\"]\n                    },\n                    months: {\n                        names: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"],\n                        namesAbbr: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM yyyy\",\n                        D: \"yyyy 'yil' d-MMMM\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy 'yil' d-MMMM HH:mm\",\n                        F: \"yyyy 'yil' d-MMMM HH:mm:ss\",\n                        M: \"d-MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tt\": [\"tt\", \"default\", {\n            name: \"tt\",\n            englishName: \"Tatar\",\n            nativeName: \"Татар\",\n            language: \"tt\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Якшәмбе\", \"Дүшәмбе\", \"Сишәмбе\", \"Чәршәмбе\", \"Пәнҗешәмбе\", \"Җомга\", \"Шимбә\"],\n                        namesAbbr: [\"Якш\", \"Дүш\", \"Сиш\", \"Чәрш\", \"Пәнҗ\", \"Җом\", \"Шим\"],\n                        namesShort: [\"Я\", \"Д\", \"С\", \"Ч\", \"П\", \"Җ\", \"Ш\"]\n                    },\n                    months: {\n                        names: [\"Гыйнвар\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\", \"\"],\n                        namesAbbr: [\"Гыйн.\", \"Фев.\", \"Мар.\", \"Апр.\", \"Май\", \"Июнь\", \"Июль\", \"Авг.\", \"Сен.\", \"Окт.\", \"Нояб.\", \"Дек.\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"Гыйнварның\", \"Февральнең\", \"Мартның\", \"Апрельнең\", \"Майның\", \"Июньнең\", \"Июльнең\", \"Августның\", \"Сентябрьның\", \"Октябрьның\", \"Ноябрьның\", \"Декабрьның\", \"\"],\n                        namesAbbr: [\"Гыйн.-ның\", \"Фев.-нең\", \"Мар.-ның\", \"Апр.-нең\", \"Майның\", \"Июньнең\", \"Июльнең\", \"Авг.-ның\", \"Сен.-ның\", \"Окт.-ның\", \"Нояб.-ның\", \"Дек.-ның\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"bn\": [\"bn\", \"default\", {\n            name: \"bn\",\n            englishName: \"Bengali\",\n            nativeName: \"বাংলা\",\n            language: \"bn\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"টা\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    \":\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"রবিবার\", \"সোমবার\", \"মঙ্গলবার\", \"বুধবার\", \"বৃহস্পতিবার\", \"শুক্রবার\", \"শনিবার\"],\n                        namesAbbr: [\"রবি.\", \"সোম.\", \"মঙ্গল.\", \"বুধ.\", \"বৃহস্পতি.\", \"শুক্র.\", \"শনি.\"],\n                        namesShort: [\"র\", \"স\", \"ম\", \"ব\", \"ব\", \"শ\", \"শ\"]\n                    },\n                    months: {\n                        names: [\"জানুয়ারী\", \"ফেব্রুয়ারী\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগস্ট\", \"সেপ্টেম্বর\", \"অক্টোবর\", \"নভেম্বর\", \"ডিসেম্বর\", \"\"],\n                        namesAbbr: [\"জানু.\", \"ফেব্রু.\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগ.\", \"সেপ্টে.\", \"অক্টো.\", \"নভে.\", \"ডিসে.\", \"\"]\n                    },\n                    AM: [\"পুর্বাহ্ন\", \"পুর্বাহ্ন\", \"পুর্বাহ্ন\"],\n                    PM: [\"অপরাহ্ন\", \"অপরাহ্ন\", \"অপরাহ্ন\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH.mm\",\n                        T: \"HH.mm.ss\",\n                        f: \"dd MMMM yyyy HH.mm\",\n                        F: \"dd MMMM yyyy HH.mm.ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"pa\": [\"pa\", \"default\", {\n            name: \"pa\",\n            englishName: \"Punjabi\",\n            nativeName: \"ਪੰਜਾਬੀ\",\n            language: \"pa\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ਰੁ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ਐਤਵਾਰ\", \"ਸੋਮਵਾਰ\", \"ਮੰਗਲਵਾਰ\", \"ਬੁੱਧਵਾਰ\", \"ਵੀਰਵਾਰ\", \"ਸ਼ੁੱਕਰਵਾਰ\", \"ਸ਼ਨਿੱਚਰਵਾਰ\"],\n                        namesAbbr: [\"ਐਤ.\", \"ਸੋਮ.\", \"ਮੰਗਲ.\", \"ਬੁੱਧ.\", \"ਵੀਰ.\", \"ਸ਼ੁਕਰ.\", \"ਸ਼ਨਿੱਚਰ.\"],\n                        namesShort: [\"ਐ\", \"ਸ\", \"ਮ\", \"ਬ\", \"ਵ\", \"ਸ਼\", \"ਸ਼\"]\n                    },\n                    months: {\n                        names: [\"ਜਨਵਰੀ\", \"ਫ਼ਰਵਰੀ\", \"ਮਾਰਚ\", \"ਅਪ੍ਰੈਲ\", \"ਮਈ\", \"ਜੂਨ\", \"ਜੁਲਾਈ\", \"ਅਗਸਤ\", \"ਸਤੰਬਰ\", \"ਅਕਤੂਬਰ\", \"ਨਵੰਬਰ\", \"ਦਸੰਬਰ\", \"\"],\n                        namesAbbr: [\"ਜਨਵਰੀ\", \"ਫ਼ਰਵਰੀ\", \"ਮਾਰਚ\", \"ਅਪ੍ਰੈਲ\", \"ਮਈ\", \"ਜੂਨ\", \"ਜੁਲਾਈ\", \"ਅਗਸਤ\", \"ਸਤੰਬਰ\", \"ਅਕਤੂਬਰ\", \"ਨਵੰਬਰ\", \"ਦਸੰਬਰ\", \"\"]\n                    },\n                    AM: [\"ਸਵੇਰ\", \"ਸਵੇਰ\", \"ਸਵੇਰ\"],\n                    PM: [\"ਸ਼ਾਮ\", \"ਸ਼ਾਮ\", \"ਸ਼ਾਮ\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy dddd\",\n                        t: \"tt hh:mm\",\n                        T: \"tt hh:mm:ss\",\n                        f: \"dd MMMM yyyy dddd tt hh:mm\",\n                        F: \"dd MMMM yyyy dddd tt hh:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"gu\": [\"gu\", \"default\", {\n            name: \"gu\",\n            englishName: \"Gujarati\",\n            nativeName: \"ગુજરાતી\",\n            language: \"gu\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"રૂ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"રવિવાર\", \"સોમવાર\", \"મંગળવાર\", \"બુધવાર\", \"ગુરુવાર\", \"શુક્રવાર\", \"શનિવાર\"],\n                        namesAbbr: [\"રવિ\", \"સોમ\", \"મંગળ\", \"બુધ\", \"ગુરુ\", \"શુક્ર\", \"શનિ\"],\n                        namesShort: [\"ર\", \"સ\", \"મ\", \"બ\", \"ગ\", \"શ\", \"શ\"]\n                    },\n                    months: {\n                        names: [\"જાન્યુઆરી\", \"ફેબ્રુઆરી\", \"માર્ચ\", \"એપ્રિલ\", \"મે\", \"જૂન\", \"જુલાઈ\", \"ઑગસ્ટ\", \"સપ્ટેમ્બર\", \"ઑક્ટ્બર\", \"નવેમ્બર\", \"ડિસેમ્બર\", \"\"],\n                        namesAbbr: [\"જાન્યુ\", \"ફેબ્રુ\", \"માર્ચ\", \"એપ્રિલ\", \"મે\", \"જૂન\", \"જુલાઈ\", \"ઑગસ્ટ\", \"સપ્ટે\", \"ઑક્ટો\", \"નવે\", \"ડિસે\", \"\"]\n                    },\n                    AM: [\"પૂર્વ મધ્યાહ્ન\", \"પૂર્વ મધ્યાહ્ન\", \"પૂર્વ મધ્યાહ્ન\"],\n                    PM: [\"ઉત્તર મધ્યાહ્ન\", \"ઉત્તર મધ્યાહ્ન\", \"ઉત્તર મધ્યાહ્ન\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"or\": [\"or\", \"default\", {\n            name: \"or\",\n            englishName: \"Oriya\",\n            nativeName: \"ଓଡ଼ିଆ\",\n            language: \"or\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ଟ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"ରବିବାର\", \"ସୋମବାର\", \"ମଙ୍ଗଳବାର\", \"ବୁଧବାର\", \"ଗୁରୁବାର\", \"ଶୁକ୍ରବାର\", \"ଶନିବାର\"],\n                        namesAbbr: [\"ରବି.\", \"ସୋମ.\", \"ମଙ୍ଗଳ.\", \"ବୁଧ.\", \"ଗୁରୁ.\", \"ଶୁକ୍ର.\", \"ଶନି.\"],\n                        namesShort: [\"ର\", \"ସୋ\", \"ମ\", \"ବୁ\", \"ଗୁ\", \"ଶୁ\", \"ଶ\"]\n                    },\n                    months: {\n                        names: [\"ଜାନୁୟାରୀ\", \"ଫ୍ରେବୃୟାରୀ\", \"ମାର୍ଚ୍ଚ\", \"ଏପ୍ରିଲ୍‌\", \"ମେ\", \"ଜୁନ୍‌\", \"ଜୁଲାଇ\", \"ଅଗଷ୍ଟ\", \"ସେପ୍ଟେମ୍ବର\", \"ଅକ୍ଟୋବର\", \"ନଭେମ୍ବର\", \"(ଡିସେମ୍ବର\", \"\"],\n                        namesAbbr: [\"ଜାନୁୟାରୀ\", \"ଫ୍ରେବୃୟାରୀ\", \"ମାର୍ଚ୍ଚ\", \"ଏପ୍ରିଲ୍‌\", \"ମେ\", \"ଜୁନ୍‌\", \"ଜୁଲାଇ\", \"ଅଗଷ୍ଟ\", \"ସେପ୍ଟେମ୍ବର\", \"ଅକ୍ଟୋବର\", \"ନଭେମ୍ବର\", \"(ଡିସେମ୍ବର\", \"\"]\n                    },\n                    eras: [{ \"name\": \"ଖ୍ରୀଷ୍ଟାବ୍ଦ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ta\": [\"ta\", \"default\", {\n            name: \"ta\",\n            englishName: \"Tamil\",\n            nativeName: \"தமிழ்\",\n            language: \"ta\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ரூ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ஞாயிற்றுக்கிழமை\", \"திங்கள்கிழமை\", \"செவ்வாய்கிழமை\", \"புதன்கிழமை\", \"வியாழக்கிழமை\", \"வெள்ளிக்கிழமை\", \"சனிக்கிழமை\"],\n                        namesAbbr: [\"ஞாயிறு\", \"திங்கள்\", \"செவ்வாய்\", \"புதன்\", \"வியாழன்\", \"வெள்ளி\", \"சனி\"],\n                        namesShort: [\"ஞா\", \"தி\", \"செ\", \"பு\", \"வி\", \"வெ\", \"ச\"]\n                    },\n                    months: {\n                        names: [\"ஜனவரி\", \"பிப்ரவரி\", \"மார்ச்\", \"ஏப்ரல்\", \"மே\", \"ஜூன்\", \"ஜூலை\", \"ஆகஸ்ட்\", \"செப்டம்பர்\", \"அக்டோபர்\", \"நவம்பர்\", \"டிசம்பர்\", \"\"],\n                        namesAbbr: [\"ஜனவரி\", \"பிப்ரவரி\", \"மார்ச்\", \"ஏப்ரல்\", \"மே\", \"ஜூன்\", \"ஜூலை\", \"ஆகஸ்ட்\", \"செப்டம்பர்\", \"அக்டோபர்\", \"நவம்பர்\", \"டிசம்பர்\", \"\"]\n                    },\n                    AM: [\"காலை\", \"காலை\", \"காலை\"],\n                    PM: [\"மாலை\", \"மாலை\", \"மாலை\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"te\": [\"te\", \"default\", {\n            name: \"te\",\n            englishName: \"Telugu\",\n            nativeName: \"తెలుగు\",\n            language: \"te\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"రూ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ఆదివారం\", \"సోమవారం\", \"మంగళవారం\", \"బుధవారం\", \"గురువారం\", \"శుక్రవారం\", \"శనివారం\"],\n                        namesAbbr: [\"ఆది.\", \"సోమ.\", \"మంగళ.\", \"బుధ.\", \"గురు.\", \"శుక్ర.\", \"శని.\"],\n                        namesShort: [\"ఆ\", \"సో\", \"మం\", \"బు\", \"గు\", \"శు\", \"శ\"]\n                    },\n                    months: {\n                        names: [\"జనవరి\", \"ఫిబ్రవరి\", \"మార్చి\", \"ఏప్రిల్\", \"మే\", \"జూన్\", \"జూలై\", \"ఆగస్టు\", \"సెప్టెంబర్\", \"అక్టోబర్\", \"నవంబర్\", \"డిసెంబర్\", \"\"],\n                        namesAbbr: [\"జనవరి\", \"ఫిబ్రవరి\", \"మార్చి\", \"ఏప్రిల్\", \"మే\", \"జూన్\", \"జూలై\", \"ఆగస్టు\", \"సెప్టెంబర్\", \"అక్టోబర్\", \"నవంబర్\", \"డిసెంబర్\", \"\"]\n                    },\n                    AM: [\"పూర్వాహ్న\", \"పూర్వాహ్న\", \"పూర్వాహ్న\"],\n                    PM: [\"అపరాహ్న\", \"అపరాహ్న\", \"అపరాహ్న\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"kn\": [\"kn\", \"default\", {\n            name: \"kn\",\n            englishName: \"Kannada\",\n            nativeName: \"ಕನ್ನಡ\",\n            language: \"kn\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ರೂ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ಭಾನುವಾರ\", \"ಸೋಮವಾರ\", \"ಮಂಗಳವಾರ\", \"ಬುಧವಾರ\", \"ಗುರುವಾರ\", \"ಶುಕ್ರವಾರ\", \"ಶನಿವಾರ\"],\n                        namesAbbr: [\"ಭಾನು.\", \"ಸೋಮ.\", \"ಮಂಗಳ.\", \"ಬುಧ.\", \"ಗುರು.\", \"ಶುಕ್ರ.\", \"ಶನಿ.\"],\n                        namesShort: [\"ರ\", \"ಸ\", \"ಮ\", \"ಬ\", \"ಗ\", \"ಶ\", \"ಶ\"]\n                    },\n                    months: {\n                        names: [\"ಜನವರಿ\", \"ಫೆಬ್ರವರಿ\", \"ಮಾರ್ಚ್\", \"ಎಪ್ರಿಲ್\", \"ಮೇ\", \"ಜೂನ್\", \"ಜುಲೈ\", \"ಆಗಸ್ಟ್\", \"ಸೆಪ್ಟಂಬರ್\", \"ಅಕ್ಟೋಬರ್\", \"ನವೆಂಬರ್\", \"ಡಿಸೆಂಬರ್\", \"\"],\n                        namesAbbr: [\"ಜನವರಿ\", \"ಫೆಬ್ರವರಿ\", \"ಮಾರ್ಚ್\", \"ಎಪ್ರಿಲ್\", \"ಮೇ\", \"ಜೂನ್\", \"ಜುಲೈ\", \"ಆಗಸ್ಟ್\", \"ಸೆಪ್ಟಂಬರ್\", \"ಅಕ್ಟೋಬರ್\", \"ನವೆಂಬರ್\", \"ಡಿಸೆಂಬರ್\", \"\"]\n                    },\n                    AM: [\"ಪೂರ್ವಾಹ್ನ\", \"ಪೂರ್ವಾಹ್ನ\", \"ಪೂರ್ವಾಹ್ನ\"],\n                    PM: [\"ಅಪರಾಹ್ನ\", \"ಅಪರಾಹ್ನ\", \"ಅಪರಾಹ್ನ\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ml\": [\"ml\", \"default\", {\n            name: \"ml\",\n            englishName: \"Malayalam\",\n            nativeName: \"മലയാളം\",\n            language: \"ml\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ക\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    \":\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ഞായറാഴ്ച\", \"തിങ്കളാഴ്ച\", \"ചൊവ്വാഴ്ച\", \"ബുധനാഴ്ച\", \"വ്യാഴാഴ്ച\", \"വെള്ളിയാഴ്ച\", \"ശനിയാഴ്ച\"],\n                        namesAbbr: [\"ഞായർ.\", \"തിങ്കൾ.\", \"ചൊവ്വ.\", \"ബുധൻ.\", \"വ്യാഴം.\", \"വെള്ളി.\", \"ശനി.\"],\n                        namesShort: [\"ഞ\", \"ത\", \"ച\", \"ബ\", \"വ\", \"വെ\", \"ശ\"]\n                    },\n                    months: {\n                        names: [\"ജനുവരി\", \"ഫെബ്റുവരി\", \"മാറ്ച്ച്\", \"ഏപ്റില്\", \"മെയ്\", \"ജൂണ്\", \"ജൂലൈ\", \"ഓഗസ്ററ്\", \"സെപ്ററംബറ്\", \"ഒക്ടോബറ്\", \"നവംബറ്\", \"ഡിസംബറ്\", \"\"],\n                        namesAbbr: [\"ജനുവരി\", \"ഫെബ്റുവരി\", \"മാറ്ച്ച്\", \"ഏപ്റില്\", \"മെയ്\", \"ജൂണ്\", \"ജൂലൈ\", \"ഓഗസ്ററ്\", \"സെപ്ററംബറ്\", \"ഒക്ടോബറ്\", \"നവംബറ്\", \"ഡിസംബറ്\", \"\"]\n                    },\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH.mm\",\n                        T: \"HH.mm.ss\",\n                        f: \"dd MMMM yyyy HH.mm\",\n                        F: \"dd MMMM yyyy HH.mm.ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"as\": [\"as\", \"default\", {\n            name: \"as\",\n            englishName: \"Assamese\",\n            nativeName: \"অসমীয়া\",\n            language: \"as\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"n$\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ট\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"সোমবাৰ\", \"মঙ্গলবাৰ\", \"বুধবাৰ\", \"বৃহস্পতিবাৰ\", \"শুক্রবাৰ\", \"শনিবাৰ\", \"ৰবিবাৰ\"],\n                        namesAbbr: [\"সোম.\", \"মঙ্গল.\", \"বুধ.\", \"বৃহ.\", \"শুক্র.\", \"শনি.\", \"ৰবি.\"],\n                        namesShort: [\"সো\", \"ম\", \"বু\", \"বৃ\", \"শু\", \"শ\", \"র\"]\n                    },\n                    months: {\n                        names: [\"জানুৱাৰী\", \"ফেব্রুৱাৰী\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগষ্ট\", \"চেপ্টেম্বর\", \"অক্টোবর\", \"নবেম্বর\", \"ডিচেম্বর\", \"\"],\n                        namesAbbr: [\"জানু\", \"ফেব্রু\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগষ্ট\", \"চেপ্টে\", \"অক্টো\", \"নবে\", \"ডিচে\", \"\"]\n                    },\n                    AM: [\"ৰাতিপু\", \"ৰাতিপু\", \"ৰাতিপু\"],\n                    PM: [\"আবেলি\", \"আবেলি\", \"আবেলি\"],\n                    eras: [{ \"name\": \"খ্রীষ্টাব্দ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"yyyy,MMMM dd, dddd\",\n                        t: \"tt h:mm\",\n                        T: \"tt h:mm:ss\",\n                        f: \"yyyy,MMMM dd, dddd tt h:mm\",\n                        F: \"yyyy,MMMM dd, dddd tt h:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM,yy\"\n                    }\n                }\n            }\n        }],\n    \"mr\": [\"mr\", \"default\", {\n            name: \"mr\",\n            englishName: \"Marathi\",\n            nativeName: \"मराठी\",\n            language: \"mr\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"रविवार\", \"सोमवार\", \"मंगळवार\", \"बुधवार\", \"गुरुवार\", \"शुक्रवार\", \"शनिवार\"],\n                        namesAbbr: [\"रवि.\", \"सोम.\", \"मंगळ.\", \"बुध.\", \"गुरु.\", \"शुक्र.\", \"शनि.\"],\n                        namesShort: [\"र\", \"स\", \"म\", \"ब\", \"ग\", \"श\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जानेवारी\", \"फेब्रुवारी\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टेंबर\", \"ऑक्टोबर\", \"नोव्हेंबर\", \"डिसेंबर\", \"\"],\n                        namesAbbr: [\"जाने.\", \"फेब्रु.\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टें.\", \"ऑक्टो.\", \"नोव्हें.\", \"डिसें.\", \"\"]\n                    },\n                    AM: [\"म.पू.\", \"म.पू.\", \"म.पू.\"],\n                    PM: [\"म.नं.\", \"म.नं.\", \"म.नं.\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"sa\": [\"sa\", \"default\", {\n            name: \"sa\",\n            englishName: \"Sanskrit\",\n            nativeName: \"संस्कृत\",\n            language: \"sa\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"रविवासरः\", \"सोमवासरः\", \"मङ्गलवासरः\", \"बुधवासरः\", \"गुरुवासरः\", \"शुक्रवासरः\", \"शनिवासरः\"],\n                        namesAbbr: [\"रविवासरः\", \"सोमवासरः\", \"मङ्गलवासरः\", \"बुधवासरः\", \"गुरुवासरः\", \"शुक्रवासरः\", \"शनिवासरः\"],\n                        namesShort: [\"र\", \"स\", \"म\", \"ब\", \"ग\", \"श\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"],\n                        namesAbbr: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"]\n                    },\n                    AM: [\"पूर्वाह्न\", \"पूर्वाह्न\", \"पूर्वाह्न\"],\n                    PM: [\"अपराह्न\", \"अपराह्न\", \"अपराह्न\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy dddd\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy dddd HH:mm\",\n                        F: \"dd MMMM yyyy dddd HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"mn\": [\"mn\", \"default\", {\n            name: \"mn\",\n            englishName: \"Mongolian\",\n            nativeName: \"Монгол хэл\",\n            language: \"mn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"₮\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Ням\", \"Даваа\", \"Мягмар\", \"Лхагва\", \"Пүрэв\", \"Баасан\", \"Бямба\"],\n                        namesAbbr: [\"Ня\", \"Да\", \"Мя\", \"Лх\", \"Пү\", \"Ба\", \"Бя\"],\n                        namesShort: [\"Ня\", \"Да\", \"Мя\", \"Лх\", \"Пү\", \"Ба\", \"Бя\"]\n                    },\n                    months: {\n                        names: [\"1 дүгээр сар\", \"2 дугаар сар\", \"3 дугаар сар\", \"4 дүгээр сар\", \"5 дугаар сар\", \"6 дугаар сар\", \"7 дугаар сар\", \"8 дугаар сар\", \"9 дүгээр сар\", \"10 дугаар сар\", \"11 дүгээр сар\", \"12 дугаар сар\", \"\"],\n                        namesAbbr: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"1 дүгээр сарын\", \"2 дугаар сарын\", \"3 дугаар сарын\", \"4 дүгээр сарын\", \"5 дугаар сарын\", \"6 дугаар сарын\", \"7 дугаар сарын\", \"8 дугаар сарын\", \"9 дүгээр сарын\", \"10 дугаар сарын\", \"11 дүгээр сарын\", \"12 дугаар сарын\", \"\"],\n                        namesAbbr: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yy.MM.dd\",\n                        D: \"yyyy 'оны' MMMM d\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy 'оны' MMMM d H:mm\",\n                        F: \"yyyy 'оны' MMMM d H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"yyyy 'он' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"bo\": [\"bo\", \"default\", {\n            name: \"bo\",\n            englishName: \"Tibetan\",\n            nativeName: \"བོད་ཡིག\",\n            language: \"bo\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"གཟའ་ཉི་མ།\", \"གཟའ་ཟླ་བ།\", \"གཟའ་མིག་དམར།\", \"གཟའ་ལྷག་པ།\", \"གཟའ་ཕུར་བུ།\", \"གཟའ་པ་སངས།\", \"གཟའ་སྤེན་པ།\"],\n                        namesAbbr: [\"ཉི་མ།\", \"ཟླ་བ།\", \"མིག་དམར།\", \"ལྷག་པ།\", \"ཕུར་བུ།\", \"པ་སངས།\", \"སྤེན་པ།\"],\n                        namesShort: [\"༧\", \"༡\", \"༢\", \"༣\", \"༤\", \"༥\", \"༦\"]\n                    },\n                    months: {\n                        names: [\"སྤྱི་ཟླ་དང་པོ།\", \"སྤྱི་ཟླ་གཉིས་པ།\", \"སྤྱི་ཟླ་གསུམ་པ།\", \"སྤྱི་ཟླ་བཞི་པ།\", \"སྤྱི་ཟླ་ལྔ་པ།\", \"སྤྱི་ཟླ་དྲུག་པ།\", \"སྤྱི་ཟླ་བདུན་པ།\", \"སྤྱི་ཟླ་བརྒྱད་པ།\", \"སྤྱི་ཟླ་དགུ་པ།\", \"སྤྱི་ཟླ་བཅུ་པོ།\", \"སྤྱི་ཟླ་བཅུ་གཅིག་པ།\", \"སྤྱི་ཟླ་བཅུ་གཉིས་པ།\", \"\"],\n                        namesAbbr: [\"ཟླ་ ༡\", \"ཟླ་ ༢\", \"ཟླ་ ༣\", \"ཟླ་ ༤\", \"ཟླ་ ༥\", \"ཟླ་ ༦\", \"ཟླ་ ༧\", \"ཟླ་ ༨\", \"ཟླ་ ༩\", \"ཟླ་ ༡༠\", \"ཟླ་ ༡༡\", \"ཟླ་ ༡༢\", \"\"]\n                    },\n                    AM: [\"སྔ་དྲོ\", \"སྔ་དྲོ\", \"སྔ་དྲོ\"],\n                    PM: [\"ཕྱི་དྲོ\", \"ཕྱི་དྲོ\", \"ཕྱི་དྲོ\"],\n                    eras: [{ \"name\": \"སྤྱི་ལོ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'ལོའི་ཟླ' M'ཚེས' d\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm\",\n                        F: \"yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss\",\n                        M: \"'ཟླ་' M'ཚེས'd\",\n                        Y: \"yyyy.M\"\n                    }\n                }\n            }\n        }],\n    \"cy\": [\"cy\", \"default\", {\n            name: \"cy\",\n            englishName: \"Welsh\",\n            nativeName: \"Cymraeg\",\n            language: \"cy\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"£\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Dydd Sul\", \"Dydd Llun\", \"Dydd Mawrth\", \"Dydd Mercher\", \"Dydd Iau\", \"Dydd Gwener\", \"Dydd Sadwrn\"],\n                        namesAbbr: [\"Sul\", \"Llun\", \"Maw\", \"Mer\", \"Iau\", \"Gwe\", \"Sad\"],\n                        namesShort: [\"Su\", \"Ll\", \"Ma\", \"Me\", \"Ia\", \"Gw\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Ionawr\", \"Chwefror\", \"Mawrth\", \"Ebrill\", \"Mai\", \"Mehefin\", \"Gorffennaf\", \"Awst\", \"Medi\", \"Hydref\", \"Tachwedd\", \"Rhagfyr\", \"\"],\n                        namesAbbr: [\"Ion\", \"Chwe\", \"Maw\", \"Ebr\", \"Mai\", \"Meh\", \"Gor\", \"Aws\", \"Med\", \"Hyd\", \"Tach\", \"Rhag\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"km\": [\"km\", \"default\", {\n            name: \"km\",\n            englishName: \"Khmer\",\n            nativeName: \"ខ្មែរ\",\n            language: \"km\",\n            numberFormat: {\n                pattern: [\"- n\"],\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    symbol: \"៛\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"ថ្ងៃអាទិត្យ\", \"ថ្ងៃច័ន្ទ\", \"ថ្ងៃអង្គារ\", \"ថ្ងៃពុធ\", \"ថ្ងៃព្រហស្បតិ៍\", \"ថ្ងៃសុក្រ\", \"ថ្ងៃសៅរ៍\"],\n                        namesAbbr: [\"អាទិ.\", \"ច.\", \"អ.\", \"ពុ\", \"ព្រហ.\", \"សុ.\", \"ស.\"],\n                        namesShort: [\"អា\", \"ច\", \"អ\", \"ពុ\", \"ព្\", \"សុ\", \"ស\"]\n                    },\n                    months: {\n                        names: [\"មករា\", \"កុម្ភៈ\", \"មិនា\", \"មេសា\", \"ឧសភា\", \"មិថុនា\", \"កក្កដា\", \"សីហា\", \"កញ្ញា\", \"តុលា\", \"វិច្ឆិកា\", \"ធ្នូ\", \"\"],\n                        namesAbbr: [\"១\", \"២\", \"៣\", \"៤\", \"៥\", \"៦\", \"៧\", \"៨\", \"៩\", \"១០\", \"១១\", \"១២\", \"\"]\n                    },\n                    AM: [\"ព្រឹក\", \"ព្រឹក\", \"ព្រឹក\"],\n                    PM: [\"ល្ងាច\", \"ល្ងាច\", \"ល្ងាច\"],\n                    eras: [{ \"name\": \"មុនគ.ស.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm tt\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy H:mm tt\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"'ថ្ងៃទី' dd 'ខែ' MM\",\n                        Y: \"'ខែ' MM 'ឆ្នាំ' yyyy\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ព្រឹក\", \"ព្រឹក\", \"ព្រឹក\"],\n                    PM: [\"ល្ងាច\", \"ល្ងាច\", \"ល្ងាច\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm tt\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy HH:mm:ss\"\n                    }\n                }\n            }\n        }],\n    \"lo\": [\"lo\", \"default\", {\n            name: \"lo\",\n            englishName: \"Lao\",\n            nativeName: \"ລາວ\",\n            language: \"lo\",\n            numberFormat: {\n                pattern: [\"(n)\"],\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"(n$)\", \"n$\"],\n                    groupSizes: [3, 0],\n                    symbol: \"₭\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"ວັນອາທິດ\", \"ວັນຈັນ\", \"ວັນອັງຄານ\", \"ວັນພຸດ\", \"ວັນພະຫັດ\", \"ວັນສຸກ\", \"ວັນເສົາ\"],\n                        namesAbbr: [\"ອາທິດ\", \"ຈັນ\", \"ອັງຄານ\", \"ພຸດ\", \"ພະຫັດ\", \"ສຸກ\", \"ເສົາ\"],\n                        namesShort: [\"ອ\", \"ຈ\", \"ອ\", \"ພ\", \"ພ\", \"ສ\", \"ເ\"]\n                    },\n                    months: {\n                        names: [\"ມັງກອນ\", \"ກຸມພາ\", \"ມີນາ\", \"ເມສາ\", \"ພຶດສະພາ\", \"ມິຖຸນາ\", \"ກໍລະກົດ\", \"ສິງຫາ\", \"ກັນຍາ\", \"ຕຸລາ\", \"ພະຈິກ\", \"ທັນວາ\", \"\"],\n                        namesAbbr: [\"ມັງກອນ\", \"ກຸມພາ\", \"ມີນາ\", \"ເມສາ\", \"ພຶດສະພາ\", \"ມິຖຸນາ\", \"ກໍລະກົດ\", \"ສິງຫາ\", \"ກັນຍາ\", \"ຕຸລາ\", \"ພະຈິກ\", \"ທັນວາ\", \"\"]\n                    },\n                    AM: [\"ເຊົ້າ\", \"ເຊົ້າ\", \"ເຊົ້າ\"],\n                    PM: [\"ແລງ\", \"ແລງ\", \"ແລງ\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"H:mm tt\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy H:mm tt\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"gl\": [\"gl\", \"default\", {\n            name: \"gl\",\n            englishName: \"Galician\",\n            nativeName: \"galego\",\n            language: \"gl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domingo\", \"luns\", \"martes\", \"mércores\", \"xoves\", \"venres\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"luns\", \"mar\", \"mér\", \"xov\", \"ven\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mé\", \"xo\", \"ve\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"xaneiro\", \"febreiro\", \"marzo\", \"abril\", \"maio\", \"xuño\", \"xullo\", \"agosto\", \"setembro\", \"outubro\", \"novembro\", \"decembro\", \"\"],\n                        namesAbbr: [\"xan\", \"feb\", \"mar\", \"abr\", \"maio\", \"xuñ\", \"xull\", \"ago\", \"set\", \"out\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"kok\": [\"kok\", \"default\", {\n            name: \"kok\",\n            englishName: \"Konkani\",\n            nativeName: \"कोंकणी\",\n            language: \"kok\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"आयतार\", \"सोमार\", \"मंगळार\", \"बुधवार\", \"बिरेस्तार\", \"सुक्रार\", \"शेनवार\"],\n                        namesAbbr: [\"आय.\", \"सोम.\", \"मंगळ.\", \"बुध.\", \"बिरे.\", \"सुक्र.\", \"शेन.\"],\n                        namesShort: [\"आ\", \"स\", \"म\", \"ब\", \"ब\", \"स\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जानेवारी\", \"फेब्रुवारी\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टेंबर\", \"ऑक्टोबर\", \"नोवेम्बर\", \"डिसेंबर\", \"\"],\n                        namesAbbr: [\"जानेवारी\", \"फेब्रुवारी\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टेंबर\", \"ऑक्टोबर\", \"नोवेम्बर\", \"डिसेंबर\", \"\"]\n                    },\n                    AM: [\"म.पू.\", \"म.पू.\", \"म.पू.\"],\n                    PM: [\"म.नं.\", \"म.नं.\", \"म.नं.\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"syr\": [\"syr\", \"default\", {\n            name: \"syr\",\n            englishName: \"Syriac\",\n            nativeName: \"ܣܘܪܝܝܐ\",\n            language: \"syr\",\n            isRTL: true,\n            numberFormat: {\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ل.س.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"ܚܕ ܒܫܒܐ\", \"ܬܪܝܢ ܒܫܒܐ\", \"ܬܠܬܐ ܒܫܒܐ\", \"ܐܪܒܥܐ ܒܫܒܐ\", \"ܚܡܫܐ ܒܫܒܐ\", \"ܥܪܘܒܬܐ\", \"ܫܒܬܐ\"],\n                        namesAbbr: [\"܏ܐ ܏ܒܫ\", \"܏ܒ ܏ܒܫ\", \"܏ܓ ܏ܒܫ\", \"܏ܕ ܏ܒܫ\", \"܏ܗ ܏ܒܫ\", \"܏ܥܪܘܒ\", \"܏ܫܒ\"],\n                        namesShort: [\"ܐ\", \"ܒ\", \"ܓ\", \"ܕ\", \"ܗ\", \"ܥ\", \"ܫ\"]\n                    },\n                    months: {\n                        names: [\"ܟܢܘܢ ܐܚܪܝ\", \"ܫܒܛ\", \"ܐܕܪ\", \"ܢܝܣܢ\", \"ܐܝܪ\", \"ܚܙܝܪܢ\", \"ܬܡܘܙ\", \"ܐܒ\", \"ܐܝܠܘܠ\", \"ܬܫܪܝ ܩܕܝܡ\", \"ܬܫܪܝ ܐܚܪܝ\", \"ܟܢܘܢ ܩܕܝܡ\", \"\"],\n                        namesAbbr: [\"܏ܟܢ ܏ܒ\", \"ܫܒܛ\", \"ܐܕܪ\", \"ܢܝܣܢ\", \"ܐܝܪ\", \"ܚܙܝܪܢ\", \"ܬܡܘܙ\", \"ܐܒ\", \"ܐܝܠܘܠ\", \"܏ܬܫ ܏ܐ\", \"܏ܬܫ ܏ܒ\", \"܏ܟܢ ܏ܐ\", \"\"]\n                    },\n                    AM: [\"ܩ.ܛ\", \"ܩ.ܛ\", \"ܩ.ܛ\"],\n                    PM: [\"ܒ.ܛ\", \"ܒ.ܛ\", \"ܒ.ܛ\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"si\": [\"si\", \"default\", {\n            name: \"si\",\n            englishName: \"Sinhala\",\n            nativeName: \"සිංහල\",\n            language: \"si\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    symbol: \"රු.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ඉරිදා\", \"සඳුදා\", \"අඟහරුවාදා\", \"බදාදා\", \"බ්‍රහස්පතින්දා\", \"සිකුරාදා\", \"සෙනසුරාදා\"],\n                        namesAbbr: [\"ඉරිදා\", \"සඳුදා\", \"කුජදා\", \"බුදදා\", \"ගුරුදා\", \"කිවිදා\", \"ශනිදා\"],\n                        namesShort: [\"ඉ\", \"ස\", \"අ\", \"බ\", \"බ්‍ර\", \"සි\", \"සෙ\"]\n                    },\n                    months: {\n                        names: [\"ජනවාරි\", \"පෙබරවාරි\", \"මාර්තු\", \"අ‌ප්‍රේල්\", \"මැයි\", \"ජූනි\", \"ජූලි\", \"අ‌ගෝස්තු\", \"සැප්තැම්බර්\", \"ඔක්තෝබර්\", \"නොවැම්බර්\", \"දෙසැම්බර්\", \"\"],\n                        namesAbbr: [\"ජන.\", \"පෙබ.\", \"මාර්තු.\", \"අප්‍රේල්.\", \"මැයි.\", \"ජූනි.\", \"ජූලි.\", \"අගෝ.\", \"සැප්.\", \"ඔක්.\", \"නොවැ.\", \"දෙසැ.\", \"\"]\n                    },\n                    AM: [\"පෙ.ව.\", \"පෙ.ව.\", \"පෙ.ව.\"],\n                    PM: [\"ප.ව.\", \"ප.ව.\", \"ප.ව.\"],\n                    eras: [{ \"name\": \"ක්‍රි.ව.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"yyyy MMMM' මස 'dd' වැනිදා 'dddd\",\n                        f: \"yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt\",\n                        F: \"yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt\",\n                        Y: \"yyyy MMMM\"\n                    }\n                }\n            }\n        }],\n    \"iu\": [\"iu\", \"default\", {\n            name: \"iu\",\n            englishName: \"Inuktitut\",\n            nativeName: \"Inuktitut\",\n            language: \"iu\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Naattiinguja\", \"Naggajjau\", \"Aippiq\", \"Pingatsiq\", \"Sitammiq\", \"Tallirmiq\", \"Sivataarvik\"],\n                        namesAbbr: [\"Nat\", \"Nag\", \"Aip\", \"Pi\", \"Sit\", \"Tal\", \"Siv\"],\n                        namesShort: [\"N\", \"N\", \"A\", \"P\", \"S\", \"T\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Jaannuari\", \"Viivvuari\", \"Maatsi\", \"Iipuri\", \"Mai\", \"Juuni\", \"Julai\", \"Aaggiisi\", \"Sitipiri\", \"Utupiri\", \"Nuvipiri\", \"Tisipiri\", \"\"],\n                        namesAbbr: [\"Jan\", \"Viv\", \"Mas\", \"Ipu\", \"Mai\", \"Jun\", \"Jul\", \"Agi\", \"Sii\", \"Uut\", \"Nuv\", \"Tis\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/MM/yyyy\",\n                        D: \"ddd, MMMM dd,yyyy\",\n                        f: \"ddd, MMMM dd,yyyy h:mm tt\",\n                        F: \"ddd, MMMM dd,yyyy h:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"am\": [\"am\", \"default\", {\n            name: \"am\",\n            englishName: \"Amharic\",\n            nativeName: \"አማርኛ\",\n            language: \"am\",\n            numberFormat: {\n                decimals: 1,\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    decimals: 1,\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"ETB\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"እሑድ\", \"ሰኞ\", \"ማክሰኞ\", \"ረቡዕ\", \"ሐሙስ\", \"ዓርብ\", \"ቅዳሜ\"],\n                        namesAbbr: [\"እሑድ\", \"ሰኞ\", \"ማክሰ\", \"ረቡዕ\", \"ሐሙስ\", \"ዓርብ\", \"ቅዳሜ\"],\n                        namesShort: [\"እ\", \"ሰ\", \"ማ\", \"ረ\", \"ሐ\", \"ዓ\", \"ቅ\"]\n                    },\n                    months: {\n                        names: [\"ጃንዩወሪ\", \"ፌብሩወሪ\", \"ማርች\", \"ኤፕረል\", \"ሜይ\", \"ጁን\", \"ጁላይ\", \"ኦገስት\", \"ሴፕቴምበር\", \"ኦክተውበር\", \"ኖቬምበር\", \"ዲሴምበር\", \"\"],\n                        namesAbbr: [\"ጃንዩ\", \"ፌብሩ\", \"ማርች\", \"ኤፕረ\", \"ሜይ\", \"ጁን\", \"ጁላይ\", \"ኦገስ\", \"ሴፕቴ\", \"ኦክተ\", \"ኖቬም\", \"ዲሴም\", \"\"]\n                    },\n                    AM: [\"ጡዋት\", \"ጡዋት\", \"ጡዋት\"],\n                    PM: [\"ከሰዓት\", \"ከሰዓት\", \"ከሰዓት\"],\n                    eras: [{ \"name\": \"ዓመተ  ምሕረት\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd '፣' MMMM d 'ቀን' yyyy\",\n                        f: \"dddd '፣' MMMM d 'ቀን' yyyy h:mm tt\",\n                        F: \"dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt\",\n                        M: \"MMMM d ቀን\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tzm\": [\"tzm\", \"default\", {\n            name: \"tzm\",\n            englishName: \"Tamazight\",\n            nativeName: \"Tamazight\",\n            language: \"tzm\",\n            numberFormat: {\n                pattern: [\"n-\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    symbol: \"DZD\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"Acer\", \"Arime\", \"Aram\", \"Ahad\", \"Amhadh\", \"Sem\", \"Sedh\"],\n                        namesAbbr: [\"Ace\", \"Ari\", \"Ara\", \"Aha\", \"Amh\", \"Sem\", \"Sed\"],\n                        namesShort: [\"Ac\", \"Ar\", \"Ar\", \"Ah\", \"Am\", \"Se\", \"Se\"]\n                    },\n                    months: {\n                        names: [\"Yenayer\", \"Furar\", \"Maghres\", \"Yebrir\", \"Mayu\", \"Yunyu\", \"Yulyu\", \"Ghuct\", \"Cutenber\", \"Ktuber\", \"Wambir\", \"Dujanbir\", \"\"],\n                        namesAbbr: [\"Yen\", \"Fur\", \"Mag\", \"Yeb\", \"May\", \"Yun\", \"Yul\", \"Ghu\", \"Cut\", \"Ktu\", \"Wam\", \"Duj\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM, yyyy H:mm\",\n                        F: \"dd MMMM, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ne\": [\"ne\", \"default\", {\n            name: \"ne\",\n            englishName: \"Nepali\",\n            nativeName: \"नेपाली\",\n            language: \"ne\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"आइतवार\", \"सोमवार\", \"मङ्गलवार\", \"बुधवार\", \"बिहीवार\", \"शुक्रवार\", \"शनिवार\"],\n                        namesAbbr: [\"आइत\", \"सोम\", \"मङ्गल\", \"बुध\", \"बिही\", \"शुक्र\", \"शनि\"],\n                        namesShort: [\"आ\", \"सो\", \"म\", \"बु\", \"बि\", \"शु\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जनवरी\", \"फेब्रुअरी\", \"मार्च\", \"अप्रिल\", \"मे\", \"जून\", \"जुलाई\", \"अगस्त\", \"सेप्टेम्बर\", \"अक्टोबर\", \"नोभेम्बर\", \"डिसेम्बर\", \"\"],\n                        namesAbbr: [\"जन\", \"फेब\", \"मार्च\", \"अप्रिल\", \"मे\", \"जून\", \"जुलाई\", \"अग\", \"सेप्ट\", \"अक्ट\", \"नोभ\", \"डिस\", \"\"]\n                    },\n                    AM: [\"विहानी\", \"विहानी\", \"विहानी\"],\n                    PM: [\"बेलुकी\", \"बेलुकी\", \"बेलुकी\"],\n                    eras: [{ \"name\": \"a.d.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        Y: \"MMMM,yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fy\": [\"fy\", \"default\", {\n            name: \"fy\",\n            englishName: \"Frisian\",\n            nativeName: \"Frysk\",\n            language: \"fy\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Snein\", \"Moandei\", \"Tiisdei\", \"Woansdei\", \"Tongersdei\", \"Freed\", \"Sneon\"],\n                        namesAbbr: [\"Sn\", \"Mo\", \"Ti\", \"Wo\", \"To\", \"Fr\", \"Sn\"],\n                        namesShort: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n                    },\n                    months: {\n                        names: [\"jannewaris\", \"febrewaris\", \"maart\", \"april\", \"maaie\", \"juny\", \"july\", \"augustus\", \"septimber\", \"oktober\", \"novimber\", \"desimber\", \"\"],\n                        namesAbbr: [\"jann\", \"febr\", \"mrt\", \"apr\", \"maaie\", \"jun\", \"jul\", \"aug\", \"sept\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d-M-yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd d MMMM yyyy H:mm\",\n                        F: \"dddd d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ps\": [\"ps\", \"default\", {\n            name: \"ps\",\n            englishName: \"Pashto\",\n            nativeName: \"پښتو\",\n            language: \"ps\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                \",\": \"،\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"%n-\", \"%n\"],\n                    \",\": \"،\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$n\"],\n                    \",\": \"٬\",\n                    \".\": \"٫\",\n                    symbol: \"؋\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        f: \"dd/MM/yyyy h:mm tt\",\n                        F: \"dd/MM/yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesAbbr: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesShort: [\"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګا ښزمرى\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"لنڈ ۍ\", \"مرغومى\", \"\"],\n                        namesAbbr: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګا ښ\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"لنڈ ۍ\", \"مرغومى\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"ل.ه\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy, dd, MMMM, dddd\",\n                        f: \"yyyy, dd, MMMM, dddd h:mm tt\",\n                        F: \"yyyy, dd, MMMM, dddd h:mm:ss tt\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fil\": [\"fil\", \"default\", {\n            name: \"fil\",\n            englishName: \"Filipino\",\n            nativeName: \"Filipino\",\n            language: \"fil\",\n            numberFormat: {\n                currency: {\n                    symbol: \"PhP\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Linggo\", \"Lunes\", \"Martes\", \"Mierkoles\", \"Huebes\", \"Biernes\", \"Sabado\"],\n                        namesAbbr: [\"Lin\", \"Lun\", \"Mar\", \"Mier\", \"Hueb\", \"Bier\", \"Saba\"],\n                        namesShort: [\"L\", \"L\", \"M\", \"M\", \"H\", \"B\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Enero\", \"Pebrero\", \"Marso\", \"Abril\", \"Mayo\", \"Hunyo\", \"Hulyo\", \"Agosto\", \"Septyembre\", \"Oktubre\", \"Nobyembre\", \"Disyembre\", \"\"],\n                        namesAbbr: [\"En\", \"Peb\", \"Mar\", \"Abr\", \"Mayo\", \"Hun\", \"Hul\", \"Agos\", \"Sept\", \"Okt\", \"Nob\", \"Dis\", \"\"]\n                    },\n                    eras: [{ \"name\": \"Anno Domini\", \"start\": null, \"offset\": 0 }],\n                }\n            }\n        }],\n    \"dv\": [\"dv\", \"default\", {\n            name: \"dv\",\n            englishName: \"Divehi\",\n            nativeName: \"ދިވެހިބަސް\",\n            language: \"dv\",\n            isRTL: true,\n            numberFormat: {\n                currency: {\n                    pattern: [\"n $-\", \"n $\"],\n                    symbol: \"ރ.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Hijri\",\n                    days: {\n                        names: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesAbbr: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesShort: [\"އާ\", \"ހޯ\", \"އަ\", \"ބު\", \"ބު\", \"ހު\", \"ހޮ\"]\n                    },\n                    months: {\n                        names: [\"މުޙައްރަމް\", \"ޞަފަރު\", \"ރަބީޢުލްއައްވަލް\", \"ރަބީޢުލްއާޚިރު\", \"ޖުމާދަލްއޫލާ\", \"ޖުމާދަލްއާޚިރާ\", \"ރަޖަބް\", \"ޝަޢްބާން\", \"ރަމަޟާން\", \"ޝައްވާލް\", \"ޛުލްޤަޢިދާ\", \"ޛުލްޙިއްޖާ\", \"\"],\n                        namesAbbr: [\"މުޙައްރަމް\", \"ޞަފަރު\", \"ރަބީޢުލްއައްވަލް\", \"ރަބީޢުލްއާޚިރު\", \"ޖުމާދަލްއޫލާ\", \"ޖުމާދަލްއާޚިރާ\", \"ރަޖަބް\", \"ޝަޢްބާން\", \"ރަމަޟާން\", \"ޝައްވާލް\", \"ޛުލްޤަޢިދާ\", \"ޛުލްޙިއްޖާ\", \"\"]\n                    },\n                    AM: [\"މކ\", \"މކ\", \"މކ\"],\n                    PM: [\"މފ\", \"މފ\", \"މފ\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd/MM/yyyy HH:mm\",\n                        F: \"dd/MM/yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_Localized: {\n                    days: {\n                        names: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesAbbr: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesShort: [\"އާ\", \"ހޯ\", \"އަ\", \"ބު\", \"ބު\", \"ހު\", \"ހޮ\"]\n                    },\n                    months: {\n                        names: [\"ޖަނަވަރީ\", \"ފެބްރުއަރީ\", \"މާޗް\", \"އޭޕްރިލް\", \"މެއި\", \"ޖޫން\", \"ޖުލައި\", \"އޯގަސްޓް\", \"ސެޕްޓެމްބަރ\", \"އޮކްޓޯބަރ\", \"ނޮވެމްބަރ\", \"ޑިސެމްބަރ\", \"\"],\n                        namesAbbr: [\"ޖަނަވަރީ\", \"ފެބްރުއަރީ\", \"މާޗް\", \"އޭޕްރިލް\", \"މެއި\", \"ޖޫން\", \"ޖުލައި\", \"އޯގަސްޓް\", \"ސެޕްޓެމްބަރ\", \"އޮކްޓޯބަރ\", \"ނޮވެމްބަރ\", \"ޑިސެމްބަރ\", \"\"]\n                    },\n                    AM: [\"މކ\", \"މކ\", \"މކ\"],\n                    PM: [\"މފ\", \"މފ\", \"މފ\"],\n                    eras: [{ \"name\": \"މީލާދީ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"ddd, yyyy MMMM dd\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"ddd, yyyy MMMM dd HH:mm\",\n                        F: \"ddd, yyyy MMMM dd HH:mm:ss\",\n                        Y: \"yyyy, MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ha\": [\"ha\", \"default\", {\n            name: \"ha\",\n            englishName: \"Hausa\",\n            nativeName: \"Hausa\",\n            language: \"ha\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"N\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Lahadi\", \"Litinin\", \"Talata\", \"Laraba\", \"Alhamis\", \"Juma'a\", \"Asabar\"],\n                        namesAbbr: [\"Lah\", \"Lit\", \"Tal\", \"Lar\", \"Alh\", \"Jum\", \"Asa\"],\n                        namesShort: [\"L\", \"L\", \"T\", \"L\", \"A\", \"J\", \"A\"]\n                    },\n                    months: {\n                        names: [\"Januwaru\", \"Febreru\", \"Maris\", \"Afrilu\", \"Mayu\", \"Yuni\", \"Yuli\", \"Agusta\", \"Satumba\", \"Oktocba\", \"Nuwamba\", \"Disamba\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Afr\", \"May\", \"Yun\", \"Yul\", \"Agu\", \"Sat\", \"Okt\", \"Nuw\", \"Dis\", \"\"]\n                    },\n                    AM: [\"Safe\", \"safe\", \"SAFE\"],\n                    PM: [\"Yamma\", \"yamma\", \"YAMMA\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"yo\": [\"yo\", \"default\", {\n            name: \"yo\",\n            englishName: \"Yoruba\",\n            nativeName: \"Yoruba\",\n            language: \"yo\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"N\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Aiku\", \"Aje\", \"Isegun\", \"Ojo'ru\", \"Ojo'bo\", \"Eti\", \"Abameta\"],\n                        namesAbbr: [\"Aik\", \"Aje\", \"Ise\", \"Ojo\", \"Ojo\", \"Eti\", \"Aba\"],\n                        namesShort: [\"A\", \"A\", \"I\", \"O\", \"O\", \"E\", \"A\"]\n                    },\n                    months: {\n                        names: [\"Osu kinni\", \"Osu keji\", \"Osu keta\", \"Osu kerin\", \"Osu karun\", \"Osu kefa\", \"Osu keje\", \"Osu kejo\", \"Osu kesan\", \"Osu kewa\", \"Osu kokanla\", \"Osu keresi\", \"\"],\n                        namesAbbr: [\"kin.\", \"kej.\", \"ket.\", \"ker.\", \"kar.\", \"kef.\", \"kej.\", \"kej.\", \"kes.\", \"kew.\", \"kok.\", \"ker.\", \"\"]\n                    },\n                    AM: [\"Owuro\", \"owuro\", \"OWURO\"],\n                    PM: [\"Ale\", \"ale\", \"ALE\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"quz\": [\"quz\", \"default\", {\n            name: \"quz\",\n            englishName: \"Quechua\",\n            nativeName: \"runasimi\",\n            language: \"quz\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"$b\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"intichaw\", \"killachaw\", \"atipachaw\", \"quyllurchaw\", \"Ch' askachaw\", \"Illapachaw\", \"k'uychichaw\"],\n                        namesAbbr: [\"int\", \"kil\", \"ati\", \"quy\", \"Ch'\", \"Ill\", \"k'u\"],\n                        namesShort: [\"d\", \"k\", \"a\", \"m\", \"h\", \"b\", \"k\"]\n                    },\n                    months: {\n                        names: [\"Qulla puquy\", \"Hatun puquy\", \"Pauqar waray\", \"ayriwa\", \"Aymuray\", \"Inti raymi\", \"Anta Sitwa\", \"Qhapaq Sitwa\", \"Uma raymi\", \"Kantaray\", \"Ayamarq'a\", \"Kapaq Raymi\", \"\"],\n                        namesAbbr: [\"Qul\", \"Hat\", \"Pau\", \"ayr\", \"Aym\", \"Int\", \"Ant\", \"Qha\", \"Uma\", \"Kan\", \"Aya\", \"Kap\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"nso\": [\"nso\", \"default\", {\n            name: \"nso\",\n            englishName: \"Sesotho sa Leboa\",\n            nativeName: \"Sesotho sa Leboa\",\n            language: \"nso\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Lamorena\", \"Mošupologo\", \"Labobedi\", \"Laboraro\", \"Labone\", \"Labohlano\", \"Mokibelo\"],\n                        namesAbbr: [\"Lam\", \"Moš\", \"Lbb\", \"Lbr\", \"Lbn\", \"Lbh\", \"Mok\"],\n                        namesShort: [\"L\", \"M\", \"L\", \"L\", \"L\", \"L\", \"M\"]\n                    },\n                    months: {\n                        names: [\"Pherekgong\", \"Hlakola\", \"Mopitlo\", \"Moranang\", \"Mosegamanye\", \"Ngoatobošego\", \"Phuphu\", \"Phato\", \"Lewedi\", \"Diphalana\", \"Dibatsela\", \"Manthole\", \"\"],\n                        namesAbbr: [\"Pher\", \"Hlak\", \"Mop\", \"Mor\", \"Mos\", \"Ngwat\", \"Phup\", \"Phat\", \"Lew\", \"Dip\", \"Dib\", \"Man\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ba\": [\"ba\", \"default\", {\n            name: \"ba\",\n            englishName: \"Bashkir\",\n            nativeName: \"Башҡорт\",\n            language: \"ba\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"һ.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Йәкшәмбе\", \"Дүшәмбе\", \"Шишәмбе\", \"Шаршамбы\", \"Кесаҙна\", \"Йома\", \"Шәмбе\"],\n                        namesAbbr: [\"Йш\", \"Дш\", \"Шш\", \"Шр\", \"Кс\", \"Йм\", \"Шб\"],\n                        namesShort: [\"Йш\", \"Дш\", \"Шш\", \"Шр\", \"Кс\", \"Йм\", \"Шб\"]\n                    },\n                    months: {\n                        names: [\"ғинуар\", \"февраль\", \"март\", \"апрель\", \"май\", \"июнь\", \"июль\", \"август\", \"сентябрь\", \"октябрь\", \"ноябрь\", \"декабрь\", \"\"],\n                        namesAbbr: [\"ғин\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"d MMMM yyyy 'й'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy 'й' H:mm\",\n                        F: \"d MMMM yyyy 'й' H:mm:ss\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"lb\": [\"lb\", \"default\", {\n            name: \"lb\",\n            englishName: \"Luxembourgish\",\n            nativeName: \"Lëtzebuergesch\",\n            language: \"lb\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonndeg\", \"Méindeg\", \"Dënschdeg\", \"Mëttwoch\", \"Donneschdeg\", \"Freideg\", \"Samschdeg\"],\n                        namesAbbr: [\"Son\", \"Méi\", \"Dën\", \"Mët\", \"Don\", \"Fre\", \"Sam\"],\n                        namesShort: [\"So\", \"Mé\", \"Dë\", \"Më\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januar\", \"Februar\", \"Mäerz\", \"Abrëll\", \"Mee\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mäe\", \"Abr\", \"Mee\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"kl\": [\"kl\", \"default\", {\n            name: \"kl\",\n            englishName: \"Greenlandic\",\n            nativeName: \"kalaallisut\",\n            language: \"kl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 0],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sapaat\", \"ataasinngorneq\", \"marlunngorneq\", \"pingasunngorneq\", \"sisamanngorneq\", \"tallimanngorneq\", \"arfininngorneq\"],\n                        namesAbbr: [\"sap\", \"ata\", \"mar\", \"ping\", \"sis\", \"tal\", \"arf\"],\n                        namesShort: [\"sa\", \"at\", \"ma\", \"pi\", \"si\", \"ta\", \"ar\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"martsi\", \"apriili\", \"maaji\", \"juni\", \"juli\", \"aggusti\", \"septembari\", \"oktobari\", \"novembari\", \"decembari\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ig\": [\"ig\", \"default\", {\n            name: \"ig\",\n            englishName: \"Igbo\",\n            nativeName: \"Igbo\",\n            language: \"ig\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"N\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Aiku\", \"Aje\", \"Isegun\", \"Ojo'ru\", \"Ojo'bo\", \"Eti\", \"Abameta\"],\n                        namesAbbr: [\"Aik\", \"Aje\", \"Ise\", \"Ojo\", \"Ojo\", \"Eti\", \"Aba\"],\n                        namesShort: [\"A\", \"A\", \"I\", \"O\", \"O\", \"E\", \"A\"]\n                    },\n                    months: {\n                        names: [\"Onwa mbu\", \"Onwa ibua\", \"Onwa ato\", \"Onwa ano\", \"Onwa ise\", \"Onwa isi\", \"Onwa asa\", \"Onwa asato\", \"Onwa itolu\", \"Onwa iri\", \"Onwa iri n'ofu\", \"Onwa iri n'ibua\", \"\"],\n                        namesAbbr: [\"mbu.\", \"ibu.\", \"ato.\", \"ano.\", \"ise\", \"isi\", \"asa\", \"asa.\", \"ito.\", \"iri.\", \"n'of.\", \"n'ib.\", \"\"]\n                    },\n                    AM: [\"Ututu\", \"ututu\", \"UTUTU\"],\n                    PM: [\"Efifie\", \"efifie\", \"EFIFIE\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ii\": [\"ii\", \"default\", {\n            name: \"ii\",\n            englishName: \"Yi\",\n            nativeName: \"ꆈꌠꁱꂷ\",\n            language: \"ii\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"ꑭꆏꑍ\", \"ꆏꊂ꒔\", \"ꆏꊂꑍ\", \"ꆏꊂꌕ\", \"ꆏꊂꇖ\", \"ꆏꊂꉬ\", \"ꆏꊂꃘ\"],\n                        namesAbbr: [\"ꑭꆏ\", \"ꆏ꒔\", \"ꆏꑍ\", \"ꆏꌕ\", \"ꆏꇖ\", \"ꆏꉬ\", \"ꆏꃘ\"],\n                        namesShort: [\"ꆏ\", \"꒔\", \"ꑍ\", \"ꌕ\", \"ꇖ\", \"ꉬ\", \"ꃘ\"]\n                    },\n                    months: {\n                        names: [\"ꋍꆪ\", \"ꑍꆪ\", \"ꌕꆪ\", \"ꇖꆪ\", \"ꉬꆪ\", \"ꃘꆪ\", \"ꏃꆪ\", \"ꉆꆪ\", \"ꈬꆪ\", \"ꊰꆪ\", \"ꊯꊪꆪ\", \"ꊰꑋꆪ\", \"\"],\n                        namesAbbr: [\"ꋍꆪ\", \"ꑍꆪ\", \"ꌕꆪ\", \"ꇖꆪ\", \"ꉬꆪ\", \"ꃘꆪ\", \"ꏃꆪ\", \"ꉆꆪ\", \"ꈬꆪ\", \"ꊰꆪ\", \"ꊯꊪꆪ\", \"ꊰꑋꆪ\", \"\"]\n                    },\n                    AM: [\"ꂵꆪꈌꈐ\", \"ꂵꆪꈌꈐ\", \"ꂵꆪꈌꈐ\"],\n                    PM: [\"ꂵꆪꈌꉈ\", \"ꂵꆪꈌꉈ\", \"ꂵꆪꈌꉈ\"],\n                    eras: [{ \"name\": \"ꇬꑼ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'ꈎ' M'ꆪ' d'ꑍ'\",\n                        t: \"tt h:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm\",\n                        F: \"yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss\",\n                        M: \"M'ꆪ' d'ꑍ'\",\n                        Y: \"yyyy'ꈎ' M'ꆪ'\"\n                    }\n                }\n            }\n        }],\n    \"arn\": [\"arn\", \"default\", {\n            name: \"arn\",\n            englishName: \"Mapudungun\",\n            nativeName: \"Mapudungun\",\n            language: \"arn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"moh\": [\"moh\", \"default\", {\n            name: \"moh\",\n            englishName: \"Mohawk\",\n            nativeName: \"Kanien'kéha\",\n            language: \"moh\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Awentatokentì:ke\", \"Awentataón'ke\", \"Ratironhia'kehronòn:ke\", \"Soséhne\", \"Okaristiiáhne\", \"Ronwaia'tanentaktonhne\", \"Entákta\"],\n                        namesShort: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Tsothohrkó:Wa\", \"Enniska\", \"Enniskó:Wa\", \"Onerahtókha\", \"Onerahtohkó:Wa\", \"Ohiari:Ha\", \"Ohiarihkó:Wa\", \"Seskéha\", \"Seskehkó:Wa\", \"Kenténha\", \"Kentenhkó:Wa\", \"Tsothóhrha\", \"\"]\n                    }\n                }\n            }\n        }],\n    \"br\": [\"br\", \"default\", {\n            name: \"br\",\n            englishName: \"Breton\",\n            nativeName: \"brezhoneg\",\n            language: \"br\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sul\", \"Lun\", \"Meurzh\", \"Merc'her\", \"Yaou\", \"Gwener\", \"Sadorn\"],\n                        namesAbbr: [\"Sul\", \"Lun\", \"Meu.\", \"Mer.\", \"Yaou\", \"Gwe.\", \"Sad.\"],\n                        namesShort: [\"Su\", \"Lu\", \"Mz\", \"Mc\", \"Ya\", \"Gw\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Genver\", \"C'hwevrer\", \"Meurzh\", \"Ebrel\", \"Mae\", \"Mezheven\", \"Gouere\", \"Eost\", \"Gwengolo\", \"Here\", \"Du\", \"Kerzu\", \"\"],\n                        namesAbbr: [\"Gen.\", \"C'hwe.\", \"Meur.\", \"Ebr.\", \"Mae\", \"Mezh.\", \"Goue.\", \"Eost\", \"Gwen.\", \"Here\", \"Du\", \"Kzu\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"g. J.-K.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ug\": [\"ug\", \"default\", {\n            name: \"ug\",\n            englishName: \"Uyghur\",\n            nativeName: \"ئۇيغۇرچە\",\n            language: \"ug\",\n            isRTL: true,\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"يەكشەنبە\", \"دۈشەنبە\", \"سەيشەنبە\", \"چارشەنبە\", \"پەيشەنبە\", \"جۈمە\", \"شەنبە\"],\n                        namesAbbr: [\"يە\", \"دۈ\", \"سە\", \"چا\", \"پە\", \"جۈ\", \"شە\"],\n                        namesShort: [\"ي\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"1-ئاي\", \"2-ئاي\", \"3-ئاي\", \"4-ئاي\", \"5-ئاي\", \"6-ئاي\", \"7-ئاي\", \"8-ئاي\", \"9-ئاي\", \"10-ئاي\", \"11-ئاي\", \"12-ئاي\", \"\"],\n                        namesAbbr: [\"1-ئاي\", \"2-ئاي\", \"3-ئاي\", \"4-ئاي\", \"5-ئاي\", \"6-ئاي\", \"7-ئاي\", \"8-ئاي\", \"9-ئاي\", \"10-ئاي\", \"11-ئاي\", \"12-ئاي\", \"\"]\n                    },\n                    AM: [\"چۈشتىن بۇرۇن\", \"چۈشتىن بۇرۇن\", \"چۈشتىن بۇرۇن\"],\n                    PM: [\"چۈشتىن كېيىن\", \"چۈشتىن كېيىن\", \"چۈشتىن كېيىن\"],\n                    eras: [{ \"name\": \"مىلادى\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-M-d\",\n                        D: \"yyyy-'يىلى' MMMM d-'كۈنى،'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy-'يىلى' MMMM d-'كۈنى،' H:mm\",\n                        F: \"yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss\",\n                        M: \"MMMM d'-كۈنى'\",\n                        Y: \"yyyy-'يىلى' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"mi\": [\"mi\", \"default\", {\n            name: \"mi\",\n            englishName: \"Maori\",\n            nativeName: \"Reo Māori\",\n            language: \"mi\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Rātapu\", \"Rāhina\", \"Rātū\", \"Rāapa\", \"Rāpare\", \"Rāmere\", \"Rāhoroi\"],\n                        namesAbbr: [\"Ta\", \"Hi\", \"Tū\", \"Apa\", \"Pa\", \"Me\", \"Ho\"],\n                        namesShort: [\"Ta\", \"Hi\", \"Tū\", \"Aa\", \"Pa\", \"Me\", \"Ho\"]\n                    },\n                    months: {\n                        names: [\"Kohi-tātea\", \"Hui-tanguru\", \"Poutū-te-rangi\", \"Paenga-whāwhā\", \"Haratua\", \"Pipiri\", \"Hōngongoi\", \"Here-turi-kōkā\", \"Mahuru\", \"Whiringa-ā-nuku\", \"Whiringa-ā-rangi\", \"Hakihea\", \"\"],\n                        namesAbbr: [\"Kohi\", \"Hui\", \"Pou\", \"Pae\", \"Hara\", \"Pipi\", \"Hōngo\", \"Here\", \"Mahu\", \"Nuku\", \"Rangi\", \"Haki\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd MMMM, yyyy\",\n                        f: \"dddd, dd MMMM, yyyy h:mm tt\",\n                        F: \"dddd, dd MMMM, yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM, yy\"\n                    }\n                }\n            }\n        }],\n    \"oc\": [\"oc\", \"default\", {\n            name: \"oc\",\n            englishName: \"Occitan\",\n            nativeName: \"Occitan\",\n            language: \"oc\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimenge\", \"diluns\", \"dimars\", \"dimècres\", \"dijòus\", \"divendres\", \"dissabte\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mèc.\", \"jòu.\", \"ven.\", \"sab.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"mè\", \"jò\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"genier\", \"febrier\", \"març\", \"abril\", \"mai\", \"junh\", \"julh\", \"agost\", \"setembre\", \"octobre\", \"novembre\", \"desembre\", \"\"],\n                        namesAbbr: [\"gen.\", \"feb.\", \"mar.\", \"abr.\", \"mai.\", \"jun.\", \"jul.\", \"ag.\", \"set.\", \"oct.\", \"nov.\", \"des.\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"de genier\", \"de febrier\", \"de març\", \"d'abril\", \"de mai\", \"de junh\", \"de julh\", \"d'agost\", \"de setembre\", \"d'octobre\", \"de novembre\", \"de desembre\", \"\"],\n                        namesAbbr: [\"gen.\", \"feb.\", \"mar.\", \"abr.\", \"mai.\", \"jun.\", \"jul.\", \"ag.\", \"set.\", \"oct.\", \"nov.\", \"des.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"après Jèsus-Crist\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd,' lo 'd MMMM' de 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd,' lo 'd MMMM' de 'yyyy HH:mm\",\n                        F: \"dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"co\": [\"co\", \"default\", {\n            name: \"co\",\n            englishName: \"Corsican\",\n            nativeName: \"Corsu\",\n            language: \"co\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dumenica\", \"luni\", \"marti\", \"mercuri\", \"ghjovi\", \"venderi\", \"sabbatu\"],\n                        namesAbbr: [\"dum.\", \"lun.\", \"mar.\", \"mer.\", \"ghj.\", \"ven.\", \"sab.\"],\n                        namesShort: [\"du\", \"lu\", \"ma\", \"me\", \"gh\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"ghjennaghju\", \"ferraghju\", \"marzu\", \"aprile\", \"maghju\", \"ghjunghju\", \"lugliu\", \"aostu\", \"settembre\", \"ottobre\", \"nuvembre\", \"dicembre\", \"\"],\n                        namesAbbr: [\"ghje\", \"ferr\", \"marz\", \"apri\", \"magh\", \"ghju\", \"lugl\", \"aost\", \"sett\", \"otto\", \"nuve\", \"dice\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"dopu J-C\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"gsw\": [\"gsw\", \"default\", {\n            name: \"gsw\",\n            englishName: \"Alsatian\",\n            nativeName: \"Elsässisch\",\n            language: \"gsw\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sundàà\", \"Mondàà\", \"Dienschdàà\", \"Mittwuch\", \"Dunnerschdàà\", \"Fridàà\", \"Sàmschdàà\"],\n                        namesAbbr: [\"Su.\", \"Mo.\", \"Di.\", \"Mi.\", \"Du.\", \"Fr.\", \"Sà.\"],\n                        namesShort: [\"Su\", \"Mo\", \"Di\", \"Mi\", \"Du\", \"Fr\", \"Sà\"]\n                    },\n                    months: {\n                        names: [\"Jänner\", \"Feverje\", \"März\", \"Àpril\", \"Mai\", \"Jüni\", \"Jüli\", \"Augscht\", \"September\", \"Oktower\", \"Nowember\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jän.\", \"Fev.\", \"März\", \"Apr.\", \"Mai\", \"Jüni\", \"Jüli\", \"Aug.\", \"Sept.\", \"Okt.\", \"Now.\", \"Dez.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"Vor J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sah\": [\"sah\", \"default\", {\n            name: \"sah\",\n            englishName: \"Yakut\",\n            nativeName: \"саха\",\n            language: \"sah\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"с.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"баскыһыанньа\", \"бэнидиэнньик\", \"оптуорунньук\", \"сэрэдэ\", \"чэппиэр\", \"бээтинсэ\", \"субуота\"],\n                        namesAbbr: [\"Бс\", \"Бн\", \"Оп\", \"Ср\", \"Чп\", \"Бт\", \"Сб\"],\n                        namesShort: [\"Бс\", \"Бн\", \"Оп\", \"Ср\", \"Чп\", \"Бт\", \"Сб\"]\n                    },\n                    months: {\n                        names: [\"Тохсунньу\", \"Олунньу\", \"Кулун тутар\", \"Муус устар\", \"Ыам ыйа\", \"Бэс ыйа\", \"От ыйа\", \"Атырдьах ыйа\", \"Балаҕан ыйа\", \"Алтынньы\", \"Сэтинньи\", \"Ахсынньы\", \"\"],\n                        namesAbbr: [\"тхс\", \"олн\", \"кул\", \"мст\", \"ыам\", \"бэс\", \"отй\", \"атр\", \"блҕ\", \"алт\", \"стн\", \"ахс\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"тохсунньу\", \"олунньу\", \"кулун тутар\", \"муус устар\", \"ыам ыйын\", \"бэс ыйын\", \"от ыйын\", \"атырдьах ыйын\", \"балаҕан ыйын\", \"алтынньы\", \"сэтинньи\", \"ахсынньы\", \"\"],\n                        namesAbbr: [\"тхс\", \"олн\", \"кул\", \"мст\", \"ыам\", \"бэс\", \"отй\", \"атр\", \"блҕ\", \"алт\", \"стн\", \"ахс\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"MM.dd.yyyy\",\n                        D: \"MMMM d yyyy 'с.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"MMMM d yyyy 'с.' H:mm\",\n                        F: \"MMMM d yyyy 'с.' H:mm:ss\",\n                        Y: \"MMMM yyyy 'с.'\"\n                    }\n                }\n            }\n        }],\n    \"qut\": [\"qut\", \"default\", {\n            name: \"qut\",\n            englishName: \"K'iche\",\n            nativeName: \"K'iche\",\n            language: \"qut\",\n            numberFormat: {\n                currency: {\n                    symbol: \"Q\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"juq'ij\", \"kaq'ij\", \"oxq'ij\", \"kajq'ij\", \"joq'ij\", \"waqq'ij\", \"wuqq'ij\"],\n                        namesAbbr: [\"juq\", \"kaq\", \"oxq\", \"kajq\", \"joq\", \"waqq\", \"wuqq\"],\n                        namesShort: [\"ju\", \"ka\", \"ox\", \"ka\", \"jo\", \"wa\", \"wu\"]\n                    },\n                    months: {\n                        names: [\"nab'e ik'\", \"ukab' ik'\", \"rox ik'\", \"ukaj ik'\", \"uro' ik'\", \"uwaq ik'\", \"uwuq ik'\", \"uwajxaq ik'\", \"ub'elej ik'\", \"ulaj ik'\", \"ujulaj ik'\", \"ukab'laj ik'\", \"\"],\n                        namesAbbr: [\"nab'e\", \"ukab\", \"rox\", \"ukaj\", \"uro\", \"uwaq\", \"uwuq\", \"uwajxaq\", \"ub'elej\", \"ulaj\", \"ujulaj\", \"ukab'laj\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"rw\": [\"rw\", \"default\", {\n            name: \"rw\",\n            englishName: \"Kinyarwanda\",\n            nativeName: \"Kinyarwanda\",\n            language: \"rw\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"RWF\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Ku wa mbere\", \"Ku wa kabiri\", \"Ku wa gatatu\", \"Ku wa kane\", \"Ku wa gatanu\", \"Ku wa gatandatu\", \"Ku cyumweru\"],\n                        namesAbbr: [\"mbe.\", \"kab.\", \"gat.\", \"kan.\", \"gat.\", \"gat.\", \"cyu.\"],\n                        namesShort: [\"mb\", \"ka\", \"ga\", \"ka\", \"ga\", \"ga\", \"cy\"]\n                    },\n                    months: {\n                        names: [\"Mutarama\", \"Gashyantare\", \"Werurwe\", \"Mata\", \"Gicurasi\", \"Kamena\", \"Nyakanga\", \"Kanama\", \"Nzeli\", \"Ukwakira\", \"Ugushyingo\", \"Ukuboza\", \"\"],\n                        namesAbbr: [\"Mut\", \"Gas\", \"Wer\", \"Mat\", \"Gic\", \"Kam\", \"Nya\", \"Kan\", \"Nze\", \"Ukwa\", \"Ugu\", \"Uku\", \"\"]\n                    },\n                    AM: [\"saa moya z.m.\", \"saa moya z.m.\", \"SAA MOYA Z.M.\"],\n                    PM: [\"saa moya z.n.\", \"saa moya z.n.\", \"SAA MOYA Z.N.\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                }\n            }\n        }],\n    \"wo\": [\"wo\", \"default\", {\n            name: \"wo\",\n            englishName: \"Wolof\",\n            nativeName: \"Wolof\",\n            language: \"wo\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"XOF\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"prs\": [\"prs\", \"default\", {\n            name: \"prs\",\n            englishName: \"Dari\",\n            nativeName: \"درى\",\n            language: \"prs\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"%n-\", \"%n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$n\"],\n                    symbol: \"؋\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Hijri\",\n                    firstDay: 5,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        f: \"dd/MM/yyyy h:mm tt\",\n                        F: \"dd/MM/yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 5,\n                    days: {\n                        names: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesAbbr: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesShort: [\"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګاښ\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"ليندۍ\", \"مرغومى\", \"\"],\n                        namesAbbr: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګاښ\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"ليندۍ\", \"مرغومى\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"ل.ه\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy, dd, MMMM, dddd\",\n                        f: \"yyyy, dd, MMMM, dddd h:mm tt\",\n                        F: \"yyyy, dd, MMMM, dddd h:mm:ss tt\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"gd\": [\"gd\", \"default\", {\n            name: \"gd\",\n            englishName: \"Scottish Gaelic\",\n            nativeName: \"Gàidhlig\",\n            language: \"gd\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"£\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Didòmhnaich\", \"Diluain\", \"Dimàirt\", \"Diciadain\", \"Diardaoin\", \"Dihaoine\", \"Disathairne\"],\n                        namesAbbr: [\"Dòm\", \"Lua\", \"Mài\", \"Cia\", \"Ard\", \"Hao\", \"Sat\"],\n                        namesShort: [\"D\", \"L\", \"M\", \"C\", \"A\", \"H\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Am Faoilleach\", \"An Gearran\", \"Am Màrt\", \"An Giblean\", \"An Cèitean\", \"An t-Ògmhios\", \"An t-Iuchar\", \"An Lùnastal\", \"An t-Sultain\", \"An Dàmhair\", \"An t-Samhain\", \"An Dùbhlachd\", \"\"],\n                        namesAbbr: [\"Fao\", \"Gea\", \"Màr\", \"Gib\", \"Cèi\", \"Ògm\", \"Iuc\", \"Lùn\", \"Sul\", \"Dàm\", \"Sam\", \"Dùb\", \"\"]\n                    },\n                    AM: [\"m\", \"m\", \"M\"],\n                    PM: [\"f\", \"f\", \"F\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-SA\": [\"ar-SA\", \"default\", {\n            name: \"ar-SA\",\n            englishName: \"Arabic (Saudi Arabia)\",\n            nativeName: \"العربية (المملكة العربية السعودية)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ر.س.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /*  remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"bg-BG\": [\"bg-BG\", \"default\", {\n            name: \"bg-BG\",\n            englishName: \"Bulgarian (Bulgaria)\",\n            nativeName: \"български (България)\",\n            language: \"bg\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"лв.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"неделя\", \"понеделник\", \"вторник\", \"сряда\", \"четвъртък\", \"петък\", \"събота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"вт\", \"ср\", \"четв\", \"пет\", \"съб\"],\n                        namesShort: [\"н\", \"п\", \"в\", \"с\", \"ч\", \"п\", \"с\"]\n                    },\n                    months: {\n                        names: [\"януари\", \"февруари\", \"март\", \"април\", \"май\", \"юни\", \"юли\", \"август\", \"септември\", \"октомври\", \"ноември\", \"декември\", \"\"],\n                        namesAbbr: [\"ян\", \"февр\", \"март\", \"апр\", \"май\", \"юни\", \"юли\", \"авг\", \"септ\", \"окт\", \"ноември\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"след новата ера\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy 'г.'\",\n                        D: \"dd MMMM yyyy 'г.'\",\n                        t: \"HH:mm 'ч.'\",\n                        T: \"HH:mm:ss 'ч.'\",\n                        f: \"dd MMMM yyyy 'г.' HH:mm 'ч.'\",\n                        F: \"dd MMMM yyyy 'г.' HH:mm:ss 'ч.'\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy 'г.'\"\n                    }\n                }\n            }\n        }],\n    \"ca-ES\": [\"ca-ES\", \"default\", {\n            name: \"ca-ES\",\n            englishName: \"Catalan (Catalan)\",\n            nativeName: \"català (català)\",\n            language: \"ca\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"diumenge\", \"dilluns\", \"dimarts\", \"dimecres\", \"dijous\", \"divendres\", \"dissabte\"],\n                        namesAbbr: [\"dg.\", \"dl.\", \"dt.\", \"dc.\", \"dj.\", \"dv.\", \"ds.\"],\n                        namesShort: [\"dg\", \"dl\", \"dt\", \"dc\", \"dj\", \"dv\", \"ds\"]\n                    },\n                    months: {\n                        names: [\"gener\", \"febrer\", \"març\", \"abril\", \"maig\", \"juny\", \"juliol\", \"agost\", \"setembre\", \"octubre\", \"novembre\", \"desembre\", \"\"],\n                        namesAbbr: [\"gen\", \"feb\", \"març\", \"abr\", \"maig\", \"juny\", \"jul\", \"ag\", \"set\", \"oct\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d' / 'MMMM' / 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d' / 'MMMM' / 'yyyy HH:mm\",\n                        F: \"dddd, d' / 'MMMM' / 'yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' / 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"zh-TW\": [\"zh-TW\", \"default\", {\n            name: \"zh-TW\",\n            englishName: \"Chinese (Traditional, Taiwan)\",\n            nativeName: \"中文(台灣)\",\n            language: \"zh-CHT\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"NT$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"週日\", \"週一\", \"週二\", \"週三\", \"週四\", \"週五\", \"週六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"西元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"tt hh:mm\",\n                        T: \"tt hh:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' tt hh:mm\",\n                        F: \"yyyy'年'M'月'd'日' tt hh:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                },\n                Taiwan: {\n                    name: \"Taiwan\",\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"週日\", \"週一\", \"週二\", \"週三\", \"週四\", \"週五\", \"週六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"\", \"start\": null, \"offset\": 1911 }],\n                    twoDigitYearMax: 99,\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"tt hh:mm\",\n                        T: \"tt hh:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' tt hh:mm\",\n                        F: \"yyyy'年'M'月'd'日' tt hh:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"cs-CZ\": [\"cs-CZ\", \"default\", {\n            name: \"cs-CZ\",\n            englishName: \"Czech (Czech Republic)\",\n            nativeName: \"čeština (Česká republika)\",\n            language: \"cs\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Kč\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"neděle\", \"pondělí\", \"úterý\", \"středa\", \"čtvrtek\", \"pátek\", \"sobota\"],\n                        namesAbbr: [\"ne\", \"po\", \"út\", \"st\", \"čt\", \"pá\", \"so\"],\n                        namesShort: [\"ne\", \"po\", \"út\", \"st\", \"čt\", \"pá\", \"so\"]\n                    },\n                    months: {\n                        names: [\"leden\", \"únor\", \"březen\", \"duben\", \"květen\", \"červen\", \"červenec\", \"srpen\", \"září\", \"říjen\", \"listopad\", \"prosinec\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ledna\", \"února\", \"března\", \"dubna\", \"května\", \"června\", \"července\", \"srpna\", \"září\", \"října\", \"listopadu\", \"prosince\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"dop.\", \"dop.\", \"DOP.\"],\n                    PM: [\"odp.\", \"odp.\", \"ODP.\"],\n                    eras: [{ \"name\": \"n. l.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"da-DK\": [\"da-DK\", \"default\", {\n            name: \"da-DK\",\n            englishName: \"Danish (Denmark)\",\n            nativeName: \"dansk (Danmark)\",\n            language: \"da\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"søndag\", \"mandag\", \"tirsdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lørdag\"],\n                        namesAbbr: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"],\n                        namesShort: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"marts\", \"april\", \"maj\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"de-DE\": [\"de-DE\", \"default\", {\n            name: \"de-DE\",\n            englishName: \"German (Germany)\",\n            nativeName: \"Deutsch (Deutschland)\",\n            language: \"de\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n                        namesAbbr: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n                        namesShort: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d. MMMM yyyy HH:mm\",\n                        F: \"dddd, d. MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"el-GR\": [\"el-GR\", \"default\", {\n            name: \"el-GR\",\n            englishName: \"Greek (Greece)\",\n            nativeName: \"Ελληνικά (Ελλάδα)\",\n            language: \"el\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Κυριακή\", \"Δευτέρα\", \"Τρίτη\", \"Τετάρτη\", \"Πέμπτη\", \"Παρασκευή\", \"Σάββατο\"],\n                        namesAbbr: [\"Κυρ\", \"Δευ\", \"Τρι\", \"Τετ\", \"Πεμ\", \"Παρ\", \"Σαβ\"],\n                        namesShort: [\"Κυ\", \"Δε\", \"Τρ\", \"Τε\", \"Πε\", \"Πα\", \"Σά\"]\n                    },\n                    months: {\n                        names: [\"Ιανουάριος\", \"Φεβρουάριος\", \"Μάρτιος\", \"Απρίλιος\", \"Μάιος\", \"Ιούνιος\", \"Ιούλιος\", \"Αύγουστος\", \"Σεπτέμβριος\", \"Οκτώβριος\", \"Νοέμβριος\", \"Δεκέμβριος\", \"\"],\n                        namesAbbr: [\"Ιαν\", \"Φεβ\", \"Μαρ\", \"Απρ\", \"Μαϊ\", \"Ιουν\", \"Ιουλ\", \"Αυγ\", \"Σεπ\", \"Οκτ\", \"Νοε\", \"Δεκ\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"Ιανουαρίου\", \"Φεβρουαρίου\", \"Μαρτίου\", \"Απριλίου\", \"Μαΐου\", \"Ιουνίου\", \"Ιουλίου\", \"Αυγούστου\", \"Σεπτεμβρίου\", \"Οκτωβρίου\", \"Νοεμβρίου\", \"Δεκεμβρίου\", \"\"],\n                        namesAbbr: [\"Ιαν\", \"Φεβ\", \"Μαρ\", \"Απρ\", \"Μαϊ\", \"Ιουν\", \"Ιουλ\", \"Αυγ\", \"Σεπ\", \"Οκτ\", \"Νοε\", \"Δεκ\", \"\"]\n                    },\n                    AM: [\"πμ\", \"πμ\", \"ΠΜ\"],\n                    PM: [\"μμ\", \"μμ\", \"ΜΜ\"],\n                    eras: [{ \"name\": \"μ.Χ.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd, d MMMM yyyy\",\n                        f: \"dddd, d MMMM yyyy h:mm tt\",\n                        F: \"dddd, d MMMM yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"en-US\": [\"en-US\", \"default\", {\n            englishName: \"English (United States)\"\n        }],\n    \"fi-FI\": [\"fi-FI\", \"default\", {\n            name: \"fi-FI\",\n            englishName: \"Finnish (Finland)\",\n            nativeName: \"suomi (Suomi)\",\n            language: \"fi\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sunnuntai\", \"maanantai\", \"tiistai\", \"keskiviikko\", \"torstai\", \"perjantai\", \"lauantai\"],\n                        namesAbbr: [\"su\", \"ma\", \"ti\", \"ke\", \"to\", \"pe\", \"la\"],\n                        namesShort: [\"su\", \"ma\", \"ti\", \"ke\", \"to\", \"pe\", \"la\"]\n                    },\n                    months: {\n                        names: [\"tammikuu\", \"helmikuu\", \"maaliskuu\", \"huhtikuu\", \"toukokuu\", \"kesäkuu\", \"heinäkuu\", \"elokuu\", \"syyskuu\", \"lokakuu\", \"marraskuu\", \"joulukuu\", \"\"],\n                        namesAbbr: [\"tammi\", \"helmi\", \"maalis\", \"huhti\", \"touko\", \"kesä\", \"heinä\", \"elo\", \"syys\", \"loka\", \"marras\", \"joulu\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM'ta 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM'ta 'yyyy H:mm\",\n                        F: \"d. MMMM'ta 'yyyy H:mm:ss\",\n                        M: \"d. MMMM'ta'\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fr-FR\": [\"fr-FR\", \"default\", {\n            name: \"fr-FR\",\n            englishName: \"French (France)\",\n            nativeName: \"français (France)\",\n            language: \"fr\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"he-IL\": [\"he-IL\", \"default\", {\n            name: \"he-IL\",\n            englishName: \"Hebrew (Israel)\",\n            nativeName: \"עברית (ישראל)\",\n            language: \"he\",\n            isRTL: true,\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"₪\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"יום ראשון\", \"יום שני\", \"יום שלישי\", \"יום רביעי\", \"יום חמישי\", \"יום שישי\", \"שבת\"],\n                        namesAbbr: [\"יום א\", \"יום ב\", \"יום ג\", \"יום ד\", \"יום ה\", \"יום ו\", \"שבת\"],\n                        namesShort: [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"]\n                    },\n                    months: {\n                        names: [\"ינואר\", \"פברואר\", \"מרץ\", \"אפריל\", \"מאי\", \"יוני\", \"יולי\", \"אוגוסט\", \"ספטמבר\", \"אוקטובר\", \"נובמבר\", \"דצמבר\", \"\"],\n                        namesAbbr: [\"ינו\", \"פבר\", \"מרץ\", \"אפר\", \"מאי\", \"יונ\", \"יול\", \"אוג\", \"ספט\", \"אוק\", \"נוב\", \"דצמ\", \"\"]\n                    },\n                    eras: [{ \"name\": \"לספירה\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd dd MMMM yyyy HH:mm\",\n                        F: \"dddd dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                },\n                Hebrew: {\n                    name: \"Hebrew\",\n                    \"/\": \" \",\n                    days: {\n                        names: [\"יום ראשון\", \"יום שני\", \"יום שלישי\", \"יום רביעי\", \"יום חמישי\", \"יום שישי\", \"שבת\"],\n                        namesAbbr: [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"],\n                        namesShort: [\"א\", \"ב\", \"ג\", \"ד\", \"ה\", \"ו\", \"ש\"]\n                    },\n                    months: {\n                        names: [\"תשרי\", \"חשון\", \"כסלו\", \"טבת\", \"שבט\", \"אדר\", \"אדר ב\", \"ניסן\", \"אייר\", \"סיון\", \"תמוז\", \"אב\", \"אלול\"],\n                        namesAbbr: [\"תשרי\", \"חשון\", \"כסלו\", \"טבת\", \"שבט\", \"אדר\", \"אדר ב\", \"ניסן\", \"אייר\", \"סיון\", \"תמוז\", \"אב\", \"אלול\"]\n                    },\n                    eras: [{ \"name\": \"C.E.\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 5790,\n                    patterns: {\n                        d: \"dd MMMM yyyy\",\n                        D: \"dddd dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd dd MMMM yyyy HH:mm\",\n                        F: \"dddd dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hu-HU\": [\"hu-HU\", \"default\", {\n            name: \"hu-HU\",\n            englishName: \"Hungarian (Hungary)\",\n            nativeName: \"magyar (Magyarország)\",\n            language: \"hu\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Ft\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"vasárnap\", \"hétfő\", \"kedd\", \"szerda\", \"csütörtök\", \"péntek\", \"szombat\"],\n                        namesAbbr: [\"V\", \"H\", \"K\", \"Sze\", \"Cs\", \"P\", \"Szo\"],\n                        namesShort: [\"V\", \"H\", \"K\", \"Sze\", \"Cs\", \"P\", \"Szo\"]\n                    },\n                    months: {\n                        names: [\"január\", \"február\", \"március\", \"április\", \"május\", \"június\", \"július\", \"augusztus\", \"szeptember\", \"október\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan.\", \"febr.\", \"márc.\", \"ápr.\", \"máj.\", \"jún.\", \"júl.\", \"aug.\", \"szept.\", \"okt.\", \"nov.\", \"dec.\", \"\"]\n                    },\n                    AM: [\"de.\", \"de.\", \"DE.\"],\n                    PM: [\"du.\", \"du.\", \"DU.\"],\n                    eras: [{ \"name\": \"i.sz.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy.MM.dd.\",\n                        D: \"yyyy. MMMM d.\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy. MMMM d. H:mm\",\n                        F: \"yyyy. MMMM d. H:mm:ss\",\n                        M: \"MMMM d.\",\n                        Y: \"yyyy. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"is-IS\": [\"is-IS\", \"default\", {\n            name: \"is-IS\",\n            englishName: \"Icelandic (Iceland)\",\n            nativeName: \"íslenska (Ísland)\",\n            language: \"is\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    decimals: 0,\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sunnudagur\", \"mánudagur\", \"þriðjudagur\", \"miðvikudagur\", \"fimmtudagur\", \"föstudagur\", \"laugardagur\"],\n                        namesAbbr: [\"sun.\", \"mán.\", \"þri.\", \"mið.\", \"fim.\", \"fös.\", \"lau.\"],\n                        namesShort: [\"su\", \"má\", \"þr\", \"mi\", \"fi\", \"fö\", \"la\"]\n                    },\n                    months: {\n                        names: [\"janúar\", \"febrúar\", \"mars\", \"apríl\", \"maí\", \"júní\", \"júlí\", \"ágúst\", \"september\", \"október\", \"nóvember\", \"desember\", \"\"],\n                        namesAbbr: [\"jan.\", \"feb.\", \"mar.\", \"apr.\", \"maí\", \"jún.\", \"júl.\", \"ágú.\", \"sep.\", \"okt.\", \"nóv.\", \"des.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"it-IT\": [\"it-IT\", \"default\", {\n            name: \"it-IT\",\n            englishName: \"Italian (Italy)\",\n            nativeName: \"italiano (Italia)\",\n            language: \"it\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domenica\", \"lunedì\", \"martedì\", \"mercoledì\", \"giovedì\", \"venerdì\", \"sabato\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mer\", \"gio\", \"ven\", \"sab\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"me\", \"gi\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"gennaio\", \"febbraio\", \"marzo\", \"aprile\", \"maggio\", \"giugno\", \"luglio\", \"agosto\", \"settembre\", \"ottobre\", \"novembre\", \"dicembre\", \"\"],\n                        namesAbbr: [\"gen\", \"feb\", \"mar\", \"apr\", \"mag\", \"giu\", \"lug\", \"ago\", \"set\", \"ott\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ja-JP\": [\"ja-JP\", \"default\", {\n            name: \"ja-JP\",\n            englishName: \"Japanese (Japan)\",\n            nativeName: \"日本語 (日本)\",\n            language: \"ja\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    decimals: 0,\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"日曜日\", \"月曜日\", \"火曜日\", \"水曜日\", \"木曜日\", \"金曜日\", \"土曜日\"],\n                        namesAbbr: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"],\n                        namesShort: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"]\n                    },\n                    months: {\n                        names: [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"午前\", \"午前\", \"午前\"],\n                    PM: [\"午後\", \"午後\", \"午後\"],\n                    eras: [{ \"name\": \"西暦\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                },\n                Japanese: {\n                    name: \"Japanese\",\n                    days: {\n                        names: [\"日曜日\", \"月曜日\", \"火曜日\", \"水曜日\", \"木曜日\", \"金曜日\", \"土曜日\"],\n                        namesAbbr: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"],\n                        namesShort: [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"]\n                    },\n                    months: {\n                        names: [\"1月\", \"2月\", \"3月\", \"4月\", \"5月\", \"6月\", \"7月\", \"8月\", \"9月\", \"10月\", \"11月\", \"12月\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"午前\", \"午前\", \"午前\"],\n                    PM: [\"午後\", \"午後\", \"午後\"],\n                    eras: [{ \"name\": \"平成\", \"start\": null, \"offset\": 1867 }, { \"name\": \"昭和\", \"start\": -1812153600000, \"offset\": 1911 }, { \"name\": \"大正\", \"start\": -1357603200000, \"offset\": 1925 }, { \"name\": \"明治\", \"start\": 60022080000, \"offset\": 1988 }],\n                    twoDigitYearMax: 99,\n                    patterns: {\n                        d: \"gg y/M/d\",\n                        D: \"gg y'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"gg y'年'M'月'd'日' H:mm\",\n                        F: \"gg y'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"gg y'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"ko-KR\": [\"ko-KR\", \"default\", {\n            name: \"ko-KR\",\n            englishName: \"Korean (Korea)\",\n            nativeName: \"한국어 (대한민국)\",\n            language: \"ko\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    decimals: 0,\n                    symbol: \"₩\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"],\n                        namesAbbr: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"],\n                        namesShort: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]\n                    },\n                    months: {\n                        names: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\", \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"오전\", \"오전\", \"오전\"],\n                    PM: [\"오후\", \"오후\", \"오후\"],\n                    eras: [{ \"name\": \"서기\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"yyyy'년' M'월' d'일' dddd\",\n                        t: \"tt h:mm\",\n                        T: \"tt h:mm:ss\",\n                        f: \"yyyy'년' M'월' d'일' dddd tt h:mm\",\n                        F: \"yyyy'년' M'월' d'일' dddd tt h:mm:ss\",\n                        M: \"M'월' d'일'\",\n                        Y: \"yyyy'년' M'월'\"\n                    }\n                },\n                Korean: {\n                    name: \"Korean\",\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"일요일\", \"월요일\", \"화요일\", \"수요일\", \"목요일\", \"금요일\", \"토요일\"],\n                        namesAbbr: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"],\n                        namesShort: [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"]\n                    },\n                    months: {\n                        names: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\", \"7월\", \"8월\", \"9월\", \"10월\", \"11월\", \"12월\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: [\"오전\", \"오전\", \"오전\"],\n                    PM: [\"오후\", \"오후\", \"오후\"],\n                    eras: [{ \"name\": \"단기\", \"start\": null, \"offset\": -2333 }],\n                    twoDigitYearMax: 4362,\n                    patterns: {\n                        d: \"gg yyyy-MM-dd\",\n                        D: \"gg yyyy'년' M'월' d'일' dddd\",\n                        t: \"tt h:mm\",\n                        T: \"tt h:mm:ss\",\n                        f: \"gg yyyy'년' M'월' d'일' dddd tt h:mm\",\n                        F: \"gg yyyy'년' M'월' d'일' dddd tt h:mm:ss\",\n                        M: \"M'월' d'일'\",\n                        Y: \"gg yyyy'년' M'월'\"\n                    }\n                }\n            }\n        }],\n    \"nl-NL\": [\"nl-NL\", \"default\", {\n            name: \"nl-NL\",\n            englishName: \"Dutch (Netherlands)\",\n            nativeName: \"Nederlands (Nederland)\",\n            language: \"nl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"zondag\", \"maandag\", \"dinsdag\", \"woensdag\", \"donderdag\", \"vrijdag\", \"zaterdag\"],\n                        namesAbbr: [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"],\n                        namesShort: [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"maart\", \"april\", \"mei\", \"juni\", \"juli\", \"augustus\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mrt\", \"apr\", \"mei\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d-M-yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd d MMMM yyyy H:mm\",\n                        F: \"dddd d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"nb-NO\": [\"nb-NO\", \"default\", {\n            name: \"nb-NO\",\n            englishName: \"Norwegian, Bokmål (Norway)\",\n            nativeName: \"norsk, bokmål (Norge)\",\n            language: \"nb\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"søndag\", \"mandag\", \"tirsdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lørdag\"],\n                        namesAbbr: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"],\n                        namesShort: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mars\", \"april\", \"mai\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"desember\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"pl-PL\": [\"pl-PL\", \"default\", {\n            name: \"pl-PL\",\n            englishName: \"Polish (Poland)\",\n            nativeName: \"polski (Polska)\",\n            language: \"pl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"zł\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"niedziela\", \"poniedziałek\", \"wtorek\", \"środa\", \"czwartek\", \"piątek\", \"sobota\"],\n                        namesAbbr: [\"N\", \"Pn\", \"Wt\", \"Śr\", \"Cz\", \"Pt\", \"So\"],\n                        namesShort: [\"N\", \"Pn\", \"Wt\", \"Śr\", \"Cz\", \"Pt\", \"So\"]\n                    },\n                    months: {\n                        names: [\"styczeń\", \"luty\", \"marzec\", \"kwiecień\", \"maj\", \"czerwiec\", \"lipiec\", \"sierpień\", \"wrzesień\", \"październik\", \"listopad\", \"grudzień\", \"\"],\n                        namesAbbr: [\"sty\", \"lut\", \"mar\", \"kwi\", \"maj\", \"cze\", \"lip\", \"sie\", \"wrz\", \"paź\", \"lis\", \"gru\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"stycznia\", \"lutego\", \"marca\", \"kwietnia\", \"maja\", \"czerwca\", \"lipca\", \"sierpnia\", \"września\", \"października\", \"listopada\", \"grudnia\", \"\"],\n                        namesAbbr: [\"sty\", \"lut\", \"mar\", \"kwi\", \"maj\", \"cze\", \"lip\", \"sie\", \"wrz\", \"paź\", \"lis\", \"gru\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy HH:mm\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"pt-BR\": [\"pt-BR\", \"default\", {\n            name: \"pt-BR\",\n            englishName: \"Portuguese (Brazil)\",\n            nativeName: \"Português (Brasil)\",\n            language: \"pt\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"R$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"segunda-feira\", \"terça-feira\", \"quarta-feira\", \"quinta-feira\", \"sexta-feira\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"seg\", \"ter\", \"qua\", \"qui\", \"sex\", \"sáb\"],\n                        namesShort: [\"D\", \"S\", \"T\", \"Q\", \"Q\", \"S\", \"S\"]\n                    },\n                    months: {\n                        names: [\"janeiro\", \"fevereiro\", \"março\", \"abril\", \"maio\", \"junho\", \"julho\", \"agosto\", \"setembro\", \"outubro\", \"novembro\", \"dezembro\", \"\"],\n                        namesAbbr: [\"jan\", \"fev\", \"mar\", \"abr\", \"mai\", \"jun\", \"jul\", \"ago\", \"set\", \"out\", \"nov\", \"dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d' de 'MMMM' de 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d' de 'MMMM' de 'yyyy HH:mm\",\n                        F: \"dddd, d' de 'MMMM' de 'yyyy HH:mm:ss\",\n                        M: \"dd' de 'MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"rm-CH\": [\"rm-CH\", \"default\", {\n            name: \"rm-CH\",\n            englishName: \"Romansh (Switzerland)\",\n            nativeName: \"Rumantsch (Svizra)\",\n            language: \"rm\",\n            numberFormat: {\n                \",\": \"'\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \"'\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \"'\",\n                    symbol: \"fr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dumengia\", \"glindesdi\", \"mardi\", \"mesemna\", \"gievgia\", \"venderdi\", \"sonda\"],\n                        namesAbbr: [\"du\", \"gli\", \"ma\", \"me\", \"gie\", \"ve\", \"so\"],\n                        namesShort: [\"du\", \"gli\", \"ma\", \"me\", \"gie\", \"ve\", \"so\"]\n                    },\n                    months: {\n                        names: [\"schaner\", \"favrer\", \"mars\", \"avrigl\", \"matg\", \"zercladur\", \"fanadur\", \"avust\", \"settember\", \"october\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"schan\", \"favr\", \"mars\", \"avr\", \"matg\", \"zercl\", \"fan\", \"avust\", \"sett\", \"oct\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"s. Cr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d MMMM yyyy HH:mm\",\n                        F: \"dddd, d MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ro-RO\": [\"ro-RO\", \"default\", {\n            name: \"ro-RO\",\n            englishName: \"Romanian (Romania)\",\n            nativeName: \"română (România)\",\n            language: \"ro\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"lei\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"duminică\", \"luni\", \"marţi\", \"miercuri\", \"joi\", \"vineri\", \"sâmbătă\"],\n                        namesAbbr: [\"D\", \"L\", \"Ma\", \"Mi\", \"J\", \"V\", \"S\"],\n                        namesShort: [\"D\", \"L\", \"Ma\", \"Mi\", \"J\", \"V\", \"S\"]\n                    },\n                    months: {\n                        names: [\"ianuarie\", \"februarie\", \"martie\", \"aprilie\", \"mai\", \"iunie\", \"iulie\", \"august\", \"septembrie\", \"octombrie\", \"noiembrie\", \"decembrie\", \"\"],\n                        namesAbbr: [\"ian.\", \"feb.\", \"mar.\", \"apr.\", \"mai.\", \"iun.\", \"iul.\", \"aug.\", \"sep.\", \"oct.\", \"nov.\", \"dec.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy HH:mm\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ru-RU\": [\"ru-RU\", \"default\", {\n            name: \"ru-RU\",\n            englishName: \"Russian (Russia)\",\n            nativeName: \"русский (Россия)\",\n            language: \"ru\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"воскресенье\", \"понедельник\", \"вторник\", \"среда\", \"четверг\", \"пятница\", \"суббота\"],\n                        namesAbbr: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n                        namesShort: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]\n                    },\n                    months: {\n                        names: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\", \"\"],\n                        namesAbbr: [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"января\", \"февраля\", \"марта\", \"апреля\", \"мая\", \"июня\", \"июля\", \"августа\", \"сентября\", \"октября\", \"ноября\", \"декабря\", \"\"],\n                        namesAbbr: [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy 'г.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy 'г.' H:mm\",\n                        F: \"d MMMM yyyy 'г.' H:mm:ss\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hr-HR\": [\"hr-HR\", \"default\", {\n            name: \"hr-HR\",\n            englishName: \"Croatian (Croatia)\",\n            nativeName: \"hrvatski (Hrvatska)\",\n            language: \"hr\",\n            numberFormat: {\n                pattern: [\"- n\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kn\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedjelja\", \"ponedjeljak\", \"utorak\", \"srijeda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sri\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"siječanj\", \"veljača\", \"ožujak\", \"travanj\", \"svibanj\", \"lipanj\", \"srpanj\", \"kolovoz\", \"rujan\", \"listopad\", \"studeni\", \"prosinac\", \"\"],\n                        namesAbbr: [\"sij\", \"vlj\", \"ožu\", \"tra\", \"svi\", \"lip\", \"srp\", \"kol\", \"ruj\", \"lis\", \"stu\", \"pro\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"siječnja\", \"veljače\", \"ožujka\", \"travnja\", \"svibnja\", \"lipnja\", \"srpnja\", \"kolovoza\", \"rujna\", \"listopada\", \"studenog\", \"prosinca\", \"\"],\n                        namesAbbr: [\"sij\", \"vlj\", \"ožu\", \"tra\", \"svi\", \"lip\", \"srp\", \"kol\", \"ruj\", \"lis\", \"stu\", \"pro\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy.\",\n                        D: \"d. MMMM yyyy.\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy. H:mm\",\n                        F: \"d. MMMM yyyy. H:mm:ss\",\n                        M: \"d. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"sk-SK\": [\"sk-SK\", \"default\", {\n            name: \"sk-SK\",\n            englishName: \"Slovak (Slovakia)\",\n            nativeName: \"slovenčina (Slovenská republika)\",\n            language: \"sk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \". \",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedeľa\", \"pondelok\", \"utorok\", \"streda\", \"štvrtok\", \"piatok\", \"sobota\"],\n                        namesAbbr: [\"ne\", \"po\", \"ut\", \"st\", \"št\", \"pi\", \"so\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"st\", \"št\", \"pi\", \"so\"]\n                    },\n                    months: {\n                        names: [\"január\", \"február\", \"marec\", \"apríl\", \"máj\", \"jún\", \"júl\", \"august\", \"september\", \"október\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"januára\", \"februára\", \"marca\", \"apríla\", \"mája\", \"júna\", \"júla\", \"augusta\", \"septembra\", \"októbra\", \"novembra\", \"decembra\", \"\"],\n                        namesAbbr: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. l.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d. M. yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sq-AL\": [\"sq-AL\", \"default\", {\n            name: \"sq-AL\",\n            englishName: \"Albanian (Albania)\",\n            nativeName: \"shqipe (Shqipëria)\",\n            language: \"sq\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Lek\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"e diel\", \"e hënë\", \"e martë\", \"e mërkurë\", \"e enjte\", \"e premte\", \"e shtunë\"],\n                        namesAbbr: [\"Die\", \"Hën\", \"Mar\", \"Mër\", \"Enj\", \"Pre\", \"Sht\"],\n                        namesShort: [\"Di\", \"Hë\", \"Ma\", \"Më\", \"En\", \"Pr\", \"Sh\"]\n                    },\n                    months: {\n                        names: [\"janar\", \"shkurt\", \"mars\", \"prill\", \"maj\", \"qershor\", \"korrik\", \"gusht\", \"shtator\", \"tetor\", \"nëntor\", \"dhjetor\", \"\"],\n                        namesAbbr: [\"Jan\", \"Shk\", \"Mar\", \"Pri\", \"Maj\", \"Qer\", \"Kor\", \"Gsh\", \"Sht\", \"Tet\", \"Nën\", \"Dhj\", \"\"]\n                    },\n                    AM: [\"PD\", \"pd\", \"PD\"],\n                    PM: [\"MD\", \"md\", \"MD\"],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"yyyy-MM-dd\",\n                        t: \"h:mm.tt\",\n                        T: \"h:mm:ss.tt\",\n                        f: \"yyyy-MM-dd h:mm.tt\",\n                        F: \"yyyy-MM-dd h:mm:ss.tt\",\n                        Y: \"yyyy-MM\"\n                    }\n                }\n            }\n        }],\n    \"sv-SE\": [\"sv-SE\", \"default\", {\n            name: \"sv-SE\",\n            englishName: \"Swedish (Sweden)\",\n            nativeName: \"svenska (Sverige)\",\n            language: \"sv\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"söndag\", \"måndag\", \"tisdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lördag\"],\n                        namesAbbr: [\"sö\", \"må\", \"ti\", \"on\", \"to\", \"fr\", \"lö\"],\n                        namesShort: [\"sö\", \"må\", \"ti\", \"on\", \"to\", \"fr\", \"lö\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"mars\", \"april\", \"maj\", \"juni\", \"juli\", \"augusti\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"'den 'd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"'den 'd MMMM yyyy HH:mm\",\n                        F: \"'den 'd MMMM yyyy HH:mm:ss\",\n                        M: \"'den 'd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"th-TH\": [\"th-TH\", \"default\", {\n            name: \"th-TH\",\n            englishName: \"Thai (Thailand)\",\n            nativeName: \"ไทย (ไทย)\",\n            language: \"th\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"฿\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"ThaiBuddhist\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"อาทิตย์\", \"จันทร์\", \"อังคาร\", \"พุธ\", \"พฤหัสบดี\", \"ศุกร์\", \"เสาร์\"],\n                        namesAbbr: [\"อา.\", \"จ.\", \"อ.\", \"พ.\", \"พฤ.\", \"ศ.\", \"ส.\"],\n                        namesShort: [\"อ\", \"จ\", \"อ\", \"พ\", \"พ\", \"ศ\", \"ส\"]\n                    },\n                    months: {\n                        names: [\"มกราคม\", \"กุมภาพันธ์\", \"มีนาคม\", \"เมษายน\", \"พฤษภาคม\", \"มิถุนายน\", \"กรกฎาคม\", \"สิงหาคม\", \"กันยายน\", \"ตุลาคม\", \"พฤศจิกายน\", \"ธันวาคม\", \"\"],\n                        namesAbbr: [\"ม.ค.\", \"ก.พ.\", \"มี.ค.\", \"เม.ย.\", \"พ.ค.\", \"มิ.ย.\", \"ก.ค.\", \"ส.ค.\", \"ก.ย.\", \"ต.ค.\", \"พ.ย.\", \"ธ.ค.\", \"\"]\n                    },\n                    eras: [{ \"name\": \"พ.ศ.\", \"start\": null, \"offset\": -543 }],\n                    twoDigitYearMax: 2572,\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"อาทิตย์\", \"จันทร์\", \"อังคาร\", \"พุธ\", \"พฤหัสบดี\", \"ศุกร์\", \"เสาร์\"],\n                        namesAbbr: [\"อา.\", \"จ.\", \"อ.\", \"พ.\", \"พฤ.\", \"ศ.\", \"ส.\"],\n                        namesShort: [\"อ\", \"จ\", \"อ\", \"พ\", \"พ\", \"ศ\", \"ส\"]\n                    },\n                    months: {\n                        names: [\"มกราคม\", \"กุมภาพันธ์\", \"มีนาคม\", \"เมษายน\", \"พฤษภาคม\", \"มิถุนายน\", \"กรกฎาคม\", \"สิงหาคม\", \"กันยายน\", \"ตุลาคม\", \"พฤศจิกายน\", \"ธันวาคม\", \"\"],\n                        namesAbbr: [\"ม.ค.\", \"ก.พ.\", \"มี.ค.\", \"เม.ย.\", \"พ.ค.\", \"มิ.ย.\", \"ก.ค.\", \"ส.ค.\", \"ก.ย.\", \"ต.ค.\", \"พ.ย.\", \"ธ.ค.\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"'วัน'dddd'ที่' d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"'วัน'dddd'ที่' d MMMM yyyy H:mm\",\n                        F: \"'วัน'dddd'ที่' d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tr-TR\": [\"tr-TR\", \"default\", {\n            name: \"tr-TR\",\n            englishName: \"Turkish (Turkey)\",\n            nativeName: \"Türkçe (Türkiye)\",\n            language: \"tr\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"TL\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Pazar\", \"Pazartesi\", \"Salı\", \"Çarşamba\", \"Perşembe\", \"Cuma\", \"Cumartesi\"],\n                        namesAbbr: [\"Paz\", \"Pzt\", \"Sal\", \"Çar\", \"Per\", \"Cum\", \"Cmt\"],\n                        namesShort: [\"Pz\", \"Pt\", \"Sa\", \"Ça\", \"Pe\", \"Cu\", \"Ct\"]\n                    },\n                    months: {\n                        names: [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\", \"\"],\n                        namesAbbr: [\"Oca\", \"Şub\", \"Mar\", \"Nis\", \"May\", \"Haz\", \"Tem\", \"Ağu\", \"Eyl\", \"Eki\", \"Kas\", \"Ara\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dd MMMM yyyy dddd\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy dddd HH:mm\",\n                        F: \"dd MMMM yyyy dddd HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ur-PK\": [\"ur-PK\", \"default\", {\n            name: \"ur-PK\",\n            englishName: \"Urdu (Islamic Republic of Pakistan)\",\n            nativeName: \"اُردو (پاکستان)\",\n            language: \"ur\",\n            isRTL: true,\n            numberFormat: {\n                currency: {\n                    pattern: [\"$n-\", \"$n\"],\n                    symbol: \"Rs\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"اتوار\", \"پير\", \"منگل\", \"بدھ\", \"جمعرات\", \"جمعه\", \"هفته\"],\n                        namesAbbr: [\"اتوار\", \"پير\", \"منگل\", \"بدھ\", \"جمعرات\", \"جمعه\", \"هفته\"],\n                        namesShort: [\"ا\", \"پ\", \"م\", \"ب\", \"ج\", \"ج\", \"ه\"]\n                    },\n                    months: {\n                        names: [\"جنوری\", \"فروری\", \"مارچ\", \"اپریل\", \"مئی\", \"جون\", \"جولائی\", \"اگست\", \"ستمبر\", \"اکتوبر\", \"نومبر\", \"دسمبر\", \"\"],\n                        namesAbbr: [\"جنوری\", \"فروری\", \"مارچ\", \"اپریل\", \"مئی\", \"جون\", \"جولائی\", \"اگست\", \"ستمبر\", \"اکتوبر\", \"نومبر\", \"دسمبر\", \"\"]\n                    },\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        f: \"dd MMMM, yyyy h:mm tt\",\n                        F: \"dd MMMM, yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        f: \"dd/MM/yyyy h:mm tt\",\n                        F: \"dd/MM/yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                }\n            }\n        }],\n    \"id-ID\": [\"id-ID\", \"default\", {\n            name: \"id-ID\",\n            englishName: \"Indonesian (Indonesia)\",\n            nativeName: \"Bahasa Indonesia (Indonesia)\",\n            language: \"id\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    decimals: 0,\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Rp\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Minggu\", \"Senin\", \"Selasa\", \"Rabu\", \"Kamis\", \"Jumat\", \"Sabtu\"],\n                        namesAbbr: [\"Minggu\", \"Sen\", \"Sel\", \"Rabu\", \"Kamis\", \"Jumat\", \"Sabtu\"],\n                        namesShort: [\"M\", \"S\", \"S\", \"R\", \"K\", \"J\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Januari\", \"Februari\", \"Maret\", \"April\", \"Mei\", \"Juni\", \"Juli\", \"Agustus\", \"September\", \"Oktober\", \"Nopember\", \"Desember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Agust\", \"Sep\", \"Okt\", \"Nop\", \"Des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM yyyy H:mm\",\n                        F: \"dd MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"uk-UA\": [\"uk-UA\", \"default\", {\n            name: \"uk-UA\",\n            englishName: \"Ukrainian (Ukraine)\",\n            nativeName: \"українська (Україна)\",\n            language: \"uk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"₴\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"неділя\", \"понеділок\", \"вівторок\", \"середа\", \"четвер\", \"п'ятниця\", \"субота\"],\n                        namesAbbr: [\"Нд\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n                        namesShort: [\"Нд\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"]\n                    },\n                    months: {\n                        names: [\"Січень\", \"Лютий\", \"Березень\", \"Квітень\", \"Травень\", \"Червень\", \"Липень\", \"Серпень\", \"Вересень\", \"Жовтень\", \"Листопад\", \"Грудень\", \"\"],\n                        namesAbbr: [\"Січ\", \"Лют\", \"Бер\", \"Кві\", \"Тра\", \"Чер\", \"Лип\", \"Сер\", \"Вер\", \"Жов\", \"Лис\", \"Гру\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"січня\", \"лютого\", \"березня\", \"квітня\", \"травня\", \"червня\", \"липня\", \"серпня\", \"вересня\", \"жовтня\", \"листопада\", \"грудня\", \"\"],\n                        namesAbbr: [\"січ\", \"лют\", \"бер\", \"кві\", \"тра\", \"чер\", \"лип\", \"сер\", \"вер\", \"жов\", \"лис\", \"гру\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy' р.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy' р.' H:mm\",\n                        F: \"d MMMM yyyy' р.' H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy' р.'\"\n                    }\n                }\n            }\n        }],\n    \"be-BY\": [\"be-BY\", \"default\", {\n            name: \"be-BY\",\n            englishName: \"Belarusian (Belarus)\",\n            nativeName: \"Беларускі (Беларусь)\",\n            language: \"be\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"нядзеля\", \"панядзелак\", \"аўторак\", \"серада\", \"чацвер\", \"пятніца\", \"субота\"],\n                        namesAbbr: [\"нд\", \"пн\", \"аў\", \"ср\", \"чц\", \"пт\", \"сб\"],\n                        namesShort: [\"нд\", \"пн\", \"аў\", \"ср\", \"чц\", \"пт\", \"сб\"]\n                    },\n                    months: {\n                        names: [\"Студзень\", \"Люты\", \"Сакавік\", \"Красавік\", \"Май\", \"Чэрвень\", \"Ліпень\", \"Жнівень\", \"Верасень\", \"Кастрычнік\", \"Лістапад\", \"Снежань\", \"\"],\n                        namesAbbr: [\"Сту\", \"Лют\", \"Сак\", \"Кра\", \"Май\", \"Чэр\", \"Ліп\", \"Жні\", \"Вер\", \"Кас\", \"Ліс\", \"Сне\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"студзеня\", \"лютага\", \"сакавіка\", \"красавіка\", \"мая\", \"чэрвеня\", \"ліпеня\", \"жніўня\", \"верасня\", \"кастрычніка\", \"лістапада\", \"снежня\", \"\"],\n                        namesAbbr: [\"Сту\", \"Лют\", \"Сак\", \"Кра\", \"Май\", \"Чэр\", \"Ліп\", \"Жні\", \"Вер\", \"Кас\", \"Ліс\", \"Сне\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sl-SI\": [\"sl-SI\", \"default\", {\n            name: \"sl-SI\",\n            englishName: \"Slovenian (Slovenia)\",\n            nativeName: \"slovenski (Slovenija)\",\n            language: \"sl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljek\", \"torek\", \"sreda\", \"četrtek\", \"petek\", \"sobota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"tor\", \"sre\", \"čet\", \"pet\", \"sob\"],\n                        namesShort: [\"ne\", \"po\", \"to\", \"sr\", \"če\", \"pe\", \"so\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"marec\", \"april\", \"maj\", \"junij\", \"julij\", \"avgust\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"et-EE\": [\"et-EE\", \"default\", {\n            name: \"et-EE\",\n            englishName: \"Estonian (Estonia)\",\n            nativeName: \"eesti (Eesti)\",\n            language: \"et\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"pühapäev\", \"esmaspäev\", \"teisipäev\", \"kolmapäev\", \"neljapäev\", \"reede\", \"laupäev\"],\n                        namesAbbr: [\"P\", \"E\", \"T\", \"K\", \"N\", \"R\", \"L\"],\n                        namesShort: [\"P\", \"E\", \"T\", \"K\", \"N\", \"R\", \"L\"]\n                    },\n                    months: {\n                        names: [\"jaanuar\", \"veebruar\", \"märts\", \"aprill\", \"mai\", \"juuni\", \"juuli\", \"august\", \"september\", \"oktoober\", \"november\", \"detsember\", \"\"],\n                        namesAbbr: [\"jaan\", \"veebr\", \"märts\", \"apr\", \"mai\", \"juuni\", \"juuli\", \"aug\", \"sept\", \"okt\", \"nov\", \"dets\", \"\"]\n                    },\n                    AM: [\"EL\", \"el\", \"EL\"],\n                    PM: [\"PL\", \"pl\", \"PL\"],\n                    patterns: {\n                        d: \"d.MM.yyyy\",\n                        D: \"d. MMMM yyyy'. a.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy'. a.' H:mm\",\n                        F: \"d. MMMM yyyy'. a.' H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy'. a.'\"\n                    }\n                }\n            }\n        }],\n    \"lv-LV\": [\"lv-LV\", \"default\", {\n            name: \"lv-LV\",\n            englishName: \"Latvian (Latvia)\",\n            nativeName: \"latviešu (Latvija)\",\n            language: \"lv\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Ls\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"svētdiena\", \"pirmdiena\", \"otrdiena\", \"trešdiena\", \"ceturtdiena\", \"piektdiena\", \"sestdiena\"],\n                        namesAbbr: [\"sv\", \"pr\", \"ot\", \"tr\", \"ce\", \"pk\", \"se\"],\n                        namesShort: [\"sv\", \"pr\", \"ot\", \"tr\", \"ce\", \"pk\", \"se\"]\n                    },\n                    months: {\n                        names: [\"janvāris\", \"februāris\", \"marts\", \"aprīlis\", \"maijs\", \"jūnijs\", \"jūlijs\", \"augusts\", \"septembris\", \"oktobris\", \"novembris\", \"decembris\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jūn\", \"jūl\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"janvārī\", \"februārī\", \"martā\", \"aprīlī\", \"maijā\", \"jūnijā\", \"jūlijā\", \"augustā\", \"septembrī\", \"oktobrī\", \"novembrī\", \"decembrī\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jūn\", \"jūl\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy.MM.dd.\",\n                        D: \"dddd, yyyy'. gada 'd. MMMM\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, yyyy'. gada 'd. MMMM H:mm\",\n                        F: \"dddd, yyyy'. gada 'd. MMMM H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"yyyy. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"lt-LT\": [\"lt-LT\", \"default\", {\n            name: \"lt-LT\",\n            englishName: \"Lithuanian (Lithuania)\",\n            nativeName: \"lietuvių (Lietuva)\",\n            language: \"lt\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Lt\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sekmadienis\", \"pirmadienis\", \"antradienis\", \"trečiadienis\", \"ketvirtadienis\", \"penktadienis\", \"šeštadienis\"],\n                        namesAbbr: [\"Sk\", \"Pr\", \"An\", \"Tr\", \"Kt\", \"Pn\", \"Št\"],\n                        namesShort: [\"S\", \"P\", \"A\", \"T\", \"K\", \"Pn\", \"Š\"]\n                    },\n                    months: {\n                        names: [\"sausis\", \"vasaris\", \"kovas\", \"balandis\", \"gegužė\", \"birželis\", \"liepa\", \"rugpjūtis\", \"rugsėjis\", \"spalis\", \"lapkritis\", \"gruodis\", \"\"],\n                        namesAbbr: [\"Sau\", \"Vas\", \"Kov\", \"Bal\", \"Geg\", \"Bir\", \"Lie\", \"Rgp\", \"Rgs\", \"Spl\", \"Lap\", \"Grd\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"sausio\", \"vasario\", \"kovo\", \"balandžio\", \"gegužės\", \"birželio\", \"liepos\", \"rugpjūčio\", \"rugsėjo\", \"spalio\", \"lapkričio\", \"gruodžio\", \"\"],\n                        namesAbbr: [\"Sau\", \"Vas\", \"Kov\", \"Bal\", \"Geg\", \"Bir\", \"Lie\", \"Rgp\", \"Rgs\", \"Spl\", \"Lap\", \"Grd\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy.MM.dd\",\n                        D: \"yyyy 'm.' MMMM d 'd.'\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy 'm.' MMMM d 'd.' HH:mm\",\n                        F: \"yyyy 'm.' MMMM d 'd.' HH:mm:ss\",\n                        M: \"MMMM d 'd.'\",\n                        Y: \"yyyy 'm.' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"tg-Cyrl-TJ\": [\"tg-Cyrl-TJ\", \"default\", {\n            name: \"tg-Cyrl-TJ\",\n            englishName: \"Tajik (Cyrillic, Tajikistan)\",\n            nativeName: \"Тоҷикӣ (Тоҷикистон)\",\n            language: \"tg-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \";\",\n                    symbol: \"т.р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    days: {\n                        names: [\"Яш\", \"Душанбе\", \"Сешанбе\", \"Чоршанбе\", \"Панҷшанбе\", \"Ҷумъа\", \"Шанбе\"],\n                        namesAbbr: [\"Яш\", \"Дш\", \"Сш\", \"Чш\", \"Пш\", \"Ҷм\", \"Шн\"],\n                        namesShort: [\"Яш\", \"Дш\", \"Сш\", \"Чш\", \"Пш\", \"Ҷм\", \"Шн\"]\n                    },\n                    months: {\n                        names: [\"Январ\", \"Феврал\", \"Март\", \"Апрел\", \"Май\", \"Июн\", \"Июл\", \"Август\", \"Сентябр\", \"Октябр\", \"Ноябр\", \"Декабр\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"январи\", \"феврали\", \"марти\", \"апрели\", \"маи\", \"июни\", \"июли\", \"августи\", \"сентябри\", \"октябри\", \"ноябри\", \"декабри\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fa-IR\": [\"fa-IR\", \"default\", {\n            name: \"fa-IR\",\n            englishName: \"Persian\",\n            nativeName: \"فارسى (ایران)\",\n            language: \"fa\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    \".\": \"/\",\n                    symbol: \"ريال\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"يكشنبه\", \"دوشنبه\", \"سه شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesAbbr: [\"يكشنبه\", \"دوشنبه\", \"سه شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesShort: [\"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"ژانويه\", \"فوريه\", \"مارس\", \"آوريل\", \"مى\", \"ژوئن\", \"ژوئيه\", \"اوت\", \"سپتامبر\", \"اُكتبر\", \"نوامبر\", \"دسامبر\", \"\"],\n                        namesAbbr: [\"ژانويه\", \"فوريه\", \"مارس\", \"آوريل\", \"مى\", \"ژوئن\", \"ژوئيه\", \"اوت\", \"سپتامبر\", \"اُكتبر\", \"نوامبر\", \"دسامبر\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"yyyy/MM/dd\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"yyyy/MM/dd hh:mm tt\",\n                        F: \"yyyy/MM/dd hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ق.ظ\", \"ق.ظ\", \"ق.ظ\"],\n                    PM: [\"ب.ظ\", \"ب.ظ\", \"ب.ظ\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"vi-VN\": [\"vi-VN\", \"default\", {\n            name: \"vi-VN\",\n            englishName: \"Vietnamese (Vietnam)\",\n            nativeName: \"Tiếng Việt (Việt Nam)\",\n            language: \"vi\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"₫\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Chủ Nhật\", \"Thứ Hai\", \"Thứ Ba\", \"Thứ Tư\", \"Thứ Năm\", \"Thứ Sáu\", \"Thứ Bảy\"],\n                        namesAbbr: [\"CN\", \"Hai\", \"Ba\", \"Tư\", \"Năm\", \"Sáu\", \"Bảy\"],\n                        namesShort: [\"C\", \"H\", \"B\", \"T\", \"N\", \"S\", \"B\"]\n                    },\n                    months: {\n                        names: [\"Tháng Giêng\", \"Tháng Hai\", \"Tháng Ba\", \"Tháng Tư\", \"Tháng Năm\", \"Tháng Sáu\", \"Tháng Bảy\", \"Tháng Tám\", \"Tháng Chín\", \"Tháng Mười\", \"Tháng Mười Một\", \"Tháng Mười Hai\", \"\"],\n                        namesAbbr: [\"Thg1\", \"Thg2\", \"Thg3\", \"Thg4\", \"Thg5\", \"Thg6\", \"Thg7\", \"Thg8\", \"Thg9\", \"Thg10\", \"Thg11\", \"Thg12\", \"\"]\n                    },\n                    AM: [\"SA\", \"sa\", \"SA\"],\n                    PM: [\"CH\", \"ch\", \"CH\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        f: \"dd MMMM yyyy h:mm tt\",\n                        F: \"dd MMMM yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hy-AM\": [\"hy-AM\", \"default\", {\n            name: \"hy-AM\",\n            englishName: \"Armenian (Armenia)\",\n            nativeName: \"Հայերեն (Հայաստան)\",\n            language: \"hy\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    symbol: \"դր.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Կիրակի\", \"Երկուշաբթի\", \"Երեքշաբթի\", \"Չորեքշաբթի\", \"Հինգշաբթի\", \"ՈՒրբաթ\", \"Շաբաթ\"],\n                        namesAbbr: [\"Կիր\", \"Երկ\", \"Երք\", \"Չրք\", \"Հնգ\", \"ՈՒր\", \"Շբթ\"],\n                        namesShort: [\"Կ\", \"Ե\", \"Ե\", \"Չ\", \"Հ\", \"Ո\", \"Շ\"]\n                    },\n                    months: {\n                        names: [\"Հունվար\", \"Փետրվար\", \"Մարտ\", \"Ապրիլ\", \"Մայիս\", \"Հունիս\", \"Հուլիս\", \"Օգոստոս\", \"Սեպտեմբեր\", \"Հոկտեմբեր\", \"Նոյեմբեր\", \"Դեկտեմբեր\", \"\"],\n                        namesAbbr: [\"ՀՆՎ\", \"ՓՏՎ\", \"ՄՐՏ\", \"ԱՊՐ\", \"ՄՅՍ\", \"ՀՆՍ\", \"ՀԼՍ\", \"ՕԳՍ\", \"ՍԵՊ\", \"ՀՈԿ\", \"ՆՈՅ\", \"ԴԵԿ\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM, yyyy H:mm\",\n                        F: \"d MMMM, yyyy H:mm:ss\",\n                        M: \"d MMMM\"\n                    }\n                }\n            }\n        }],\n    \"az-Latn-AZ\": [\"az-Latn-AZ\", \"default\", {\n            name: \"az-Latn-AZ\",\n            englishName: \"Azeri (Latin, Azerbaijan)\",\n            nativeName: \"Azərbaycan­ılı (Azərbaycan)\",\n            language: \"az-Latn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"man.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Bazar\", \"Bazar ertəsi\", \"Çərşənbə axşamı\", \"Çərşənbə\", \"Cümə axşamı\", \"Cümə\", \"Şənbə\"],\n                        namesAbbr: [\"B\", \"Be\", \"Ça\", \"Ç\", \"Ca\", \"C\", \"Ş\"],\n                        namesShort: [\"B\", \"Be\", \"Ça\", \"Ç\", \"Ca\", \"C\", \"Ş\"]\n                    },\n                    months: {\n                        names: [\"Yanvar\", \"Fevral\", \"Mart\", \"Aprel\", \"May\", \"İyun\", \"İyul\", \"Avgust\", \"Sentyabr\", \"Oktyabr\", \"Noyabr\", \"Dekabr\", \"\"],\n                        namesAbbr: [\"Yan\", \"Fev\", \"Mar\", \"Apr\", \"May\", \"İyun\", \"İyul\", \"Avg\", \"Sen\", \"Okt\", \"Noy\", \"Dek\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"],\n                        namesAbbr: [\"Yan\", \"Fev\", \"Mar\", \"Apr\", \"May\", \"İyun\", \"İyul\", \"Avg\", \"Sen\", \"Okt\", \"Noy\", \"Dek\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"eu-ES\": [\"eu-ES\", \"default\", {\n            name: \"eu-ES\",\n            englishName: \"Basque (Basque)\",\n            nativeName: \"euskara (euskara)\",\n            language: \"eu\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"igandea\", \"astelehena\", \"asteartea\", \"asteazkena\", \"osteguna\", \"ostirala\", \"larunbata\"],\n                        namesAbbr: [\"ig.\", \"al.\", \"as.\", \"az.\", \"og.\", \"or.\", \"lr.\"],\n                        namesShort: [\"ig\", \"al\", \"as\", \"az\", \"og\", \"or\", \"lr\"]\n                    },\n                    months: {\n                        names: [\"urtarrila\", \"otsaila\", \"martxoa\", \"apirila\", \"maiatza\", \"ekaina\", \"uztaila\", \"abuztua\", \"iraila\", \"urria\", \"azaroa\", \"abendua\", \"\"],\n                        namesAbbr: [\"urt.\", \"ots.\", \"mar.\", \"api.\", \"mai.\", \"eka.\", \"uzt.\", \"abu.\", \"ira.\", \"urr.\", \"aza.\", \"abe.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dddd, yyyy.'eko' MMMM'k 'd\",\n                        t: \"HH:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, yyyy.'eko' MMMM'k 'd HH:mm\",\n                        F: \"dddd, yyyy.'eko' MMMM'k 'd H:mm:ss\",\n                        Y: \"yyyy.'eko' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"hsb-DE\": [\"hsb-DE\", \"default\", {\n            name: \"hsb-DE\",\n            englishName: \"Upper Sorbian (Germany)\",\n            nativeName: \"hornjoserbšćina (Němska)\",\n            language: \"hsb\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \". \",\n                    firstDay: 1,\n                    days: {\n                        names: [\"njedźela\", \"póndźela\", \"wutora\", \"srjeda\", \"štwórtk\", \"pjatk\", \"sobota\"],\n                        namesAbbr: [\"nje\", \"pón\", \"wut\", \"srj\", \"štw\", \"pja\", \"sob\"],\n                        namesShort: [\"n\", \"p\", \"w\", \"s\", \"š\", \"p\", \"s\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"měrc\", \"apryl\", \"meja\", \"junij\", \"julij\", \"awgust\", \"september\", \"oktober\", \"nowember\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"mej\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"januara\", \"februara\", \"měrca\", \"apryla\", \"meje\", \"junija\", \"julija\", \"awgusta\", \"septembra\", \"oktobra\", \"nowembra\", \"decembra\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"mej\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"po Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d. M. yyyy\",\n                        D: \"dddd, 'dnja' d. MMMM yyyy\",\n                        t: \"H.mm 'hodź.'\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, 'dnja' d. MMMM yyyy H.mm 'hodź.'\",\n                        F: \"dddd, 'dnja' d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"mk-MK\": [\"mk-MK\", \"default\", {\n            name: \"mk-MK\",\n            englishName: \"Macedonian (Former Yugoslav Republic of Macedonia)\",\n            nativeName: \"македонски јазик (Македонија)\",\n            language: \"mk\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"ден.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недела\", \"понеделник\", \"вторник\", \"среда\", \"четврток\", \"петок\", \"сабота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"втр\", \"срд\", \"чет\", \"пет\", \"саб\"],\n                        namesShort: [\"не\", \"по\", \"вт\", \"ср\", \"че\", \"пе\", \"са\"]\n                    },\n                    months: {\n                        names: [\"јануари\", \"февруари\", \"март\", \"април\", \"мај\", \"јуни\", \"јули\", \"август\", \"септември\", \"октомври\", \"ноември\", \"декември\", \"\"],\n                        namesAbbr: [\"јан\", \"фев\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"ное\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, dd MMMM yyyy HH:mm\",\n                        F: \"dddd, dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tn-ZA\": [\"tn-ZA\", \"default\", {\n            name: \"tn-ZA\",\n            englishName: \"Setswana (South Africa)\",\n            nativeName: \"Setswana (Aforika Borwa)\",\n            language: \"tn\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Latshipi\", \"Mosupologo\", \"Labobedi\", \"Laboraro\", \"Labone\", \"Labotlhano\", \"Lamatlhatso\"],\n                        namesAbbr: [\"Ltp.\", \"Mos.\", \"Lbd.\", \"Lbr.\", \"Lbn.\", \"Lbt.\", \"Lmt.\"],\n                        namesShort: [\"Lp\", \"Ms\", \"Lb\", \"Lr\", \"Ln\", \"Lt\", \"Lm\"]\n                    },\n                    months: {\n                        names: [\"Ferikgong\", \"Tlhakole\", \"Mopitloe\", \"Moranang\", \"Motsheganong\", \"Seetebosigo\", \"Phukwi\", \"Phatwe\", \"Lwetse\", \"Diphalane\", \"Ngwanatsele\", \"Sedimothole\", \"\"],\n                        namesAbbr: [\"Fer.\", \"Tlhak.\", \"Mop.\", \"Mor.\", \"Motsh.\", \"Seet.\", \"Phukw.\", \"Phatw.\", \"Lwets.\", \"Diph.\", \"Ngwan.\", \"Sed.\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"xh-ZA\": [\"xh-ZA\", \"default\", {\n            name: \"xh-ZA\",\n            englishName: \"isiXhosa (South Africa)\",\n            nativeName: \"isiXhosa (uMzantsi Afrika)\",\n            language: \"xh\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"iCawa\", \"uMvulo\", \"uLwesibini\", \"uLwesithathu\", \"uLwesine\", \"uLwesihlanu\", \"uMgqibelo\"],\n                        namesShort: [\"Ca\", \"Mv\", \"Lb\", \"Lt\", \"Ln\", \"Lh\", \"Mg\"]\n                    },\n                    months: {\n                        names: [\"Mqungu\", \"Mdumba\", \"Kwindla\", \"Tshazimpuzi\", \"Canzibe\", \"Silimela\", \"Khala\", \"Thupha\", \"Msintsi\", \"Dwarha\", \"Nkanga\", \"Mnga\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"zu-ZA\": [\"zu-ZA\", \"default\", {\n            name: \"zu-ZA\",\n            englishName: \"isiZulu (South Africa)\",\n            nativeName: \"isiZulu (iNingizimu Afrika)\",\n            language: \"zu\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"iSonto\", \"uMsombuluko\", \"uLwesibili\", \"uLwesithathu\", \"uLwesine\", \"uLwesihlanu\", \"uMgqibelo\"],\n                        namesAbbr: [\"Son.\", \"Mso.\", \"Bi.\", \"Tha.\", \"Ne.\", \"Hla.\", \"Mgq.\"]\n                    },\n                    months: {\n                        names: [\"uMasingana\", \"uNhlolanja\", \"uNdasa\", \"uMbaso\", \"uNhlaba\", \"uNhlangulana\", \"uNtulikazi\", \"uNcwaba\", \"uMandulo\", \"uMfumfu\", \"uLwezi\", \"uZibandlela\", \"\"],\n                        namesAbbr: [\"Mas.\", \"Nhlo.\", \"Nda.\", \"Mba.\", \"Nhla.\", \"Nhlang.\", \"Ntu.\", \"Ncwa.\", \"Man.\", \"Mfu.\", \"Lwe.\", \"Zib.\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"af-ZA\": [\"af-ZA\", \"default\", {\n            name: \"af-ZA\",\n            englishName: \"Afrikaans (South Africa)\",\n            nativeName: \"Afrikaans (Suid Afrika)\",\n            language: \"af\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Sondag\", \"Maandag\", \"Dinsdag\", \"Woensdag\", \"Donderdag\", \"Vrydag\", \"Saterdag\"],\n                        namesAbbr: [\"Son\", \"Maan\", \"Dins\", \"Woen\", \"Dond\", \"Vry\", \"Sat\"],\n                        namesShort: [\"So\", \"Ma\", \"Di\", \"Wo\", \"Do\", \"Vr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januarie\", \"Februarie\", \"Maart\", \"April\", \"Mei\", \"Junie\", \"Julie\", \"Augustus\", \"September\", \"Oktober\", \"November\", \"Desember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Des\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ka-GE\": [\"ka-GE\", \"default\", {\n            name: \"ka-GE\",\n            englishName: \"Georgian (Georgia)\",\n            nativeName: \"ქართული (საქართველო)\",\n            language: \"ka\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"Lari\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"კვირა\", \"ორშაბათი\", \"სამშაბათი\", \"ოთხშაბათი\", \"ხუთშაბათი\", \"პარასკევი\", \"შაბათი\"],\n                        namesAbbr: [\"კვირა\", \"ორშაბათი\", \"სამშაბათი\", \"ოთხშაბათი\", \"ხუთშაბათი\", \"პარასკევი\", \"შაბათი\"],\n                        namesShort: [\"კ\", \"ო\", \"ს\", \"ო\", \"ხ\", \"პ\", \"შ\"]\n                    },\n                    months: {\n                        names: [\"იანვარი\", \"თებერვალი\", \"მარტი\", \"აპრილი\", \"მაისი\", \"ივნისი\", \"ივლისი\", \"აგვისტო\", \"სექტემბერი\", \"ოქტომბერი\", \"ნოემბერი\", \"დეკემბერი\", \"\"],\n                        namesAbbr: [\"იან\", \"თებ\", \"მარ\", \"აპრ\", \"მაის\", \"ივნ\", \"ივლ\", \"აგვ\", \"სექ\", \"ოქტ\", \"ნოემ\", \"დეკ\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"yyyy 'წლის' dd MM, dddd\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy 'წლის' dd MM, dddd H:mm\",\n                        F: \"yyyy 'წლის' dd MM, dddd H:mm:ss\",\n                        M: \"dd MM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fo-FO\": [\"fo-FO\", \"default\", {\n            name: \"fo-FO\",\n            englishName: \"Faroese (Faroe Islands)\",\n            nativeName: \"føroyskt (Føroyar)\",\n            language: \"fo\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sunnudagur\", \"mánadagur\", \"týsdagur\", \"mikudagur\", \"hósdagur\", \"fríggjadagur\", \"leygardagur\"],\n                        namesAbbr: [\"sun\", \"mán\", \"týs\", \"mik\", \"hós\", \"frí\", \"leyg\"],\n                        namesShort: [\"su\", \"má\", \"tý\", \"mi\", \"hó\", \"fr\", \"ley\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mars\", \"apríl\", \"mai\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"desember\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hi-IN\": [\"hi-IN\", \"default\", {\n            name: \"hi-IN\",\n            englishName: \"Hindi (India)\",\n            nativeName: \"हिंदी (भारत)\",\n            language: \"hi\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"रविवार\", \"सोमवार\", \"मंगलवार\", \"बुधवार\", \"गुरुवार\", \"शुक्रवार\", \"शनिवार\"],\n                        namesAbbr: [\"रवि.\", \"सोम.\", \"मंगल.\", \"बुध.\", \"गुरु.\", \"शुक्र.\", \"शनि.\"],\n                        namesShort: [\"र\", \"स\", \"म\", \"ब\", \"ग\", \"श\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"],\n                        namesAbbr: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"]\n                    },\n                    AM: [\"पूर्वाह्न\", \"पूर्वाह्न\", \"पूर्वाह्न\"],\n                    PM: [\"अपराह्न\", \"अपराह्न\", \"अपराह्न\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"mt-MT\": [\"mt-MT\", \"default\", {\n            name: \"mt-MT\",\n            englishName: \"Maltese (Malta)\",\n            nativeName: \"Malti (Malta)\",\n            language: \"mt\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Il-Ħadd\", \"It-Tnejn\", \"It-Tlieta\", \"L-Erbgħa\", \"Il-Ħamis\", \"Il-Ġimgħa\", \"Is-Sibt\"],\n                        namesAbbr: [\"Ħad\", \"Tne\", \"Tli\", \"Erb\", \"Ħam\", \"Ġim\", \"Sib\"],\n                        namesShort: [\"I\", \"I\", \"I\", \"L\", \"I\", \"I\", \"I\"]\n                    },\n                    months: {\n                        names: [\"Jannar\", \"Frar\", \"Marzu\", \"April\", \"Mejju\", \"Ġunju\", \"Lulju\", \"Awissu\", \"Settembru\", \"Ottubru\", \"Novembru\", \"Diċembru\", \"\"],\n                        namesAbbr: [\"Jan\", \"Fra\", \"Mar\", \"Apr\", \"Mej\", \"Ġun\", \"Lul\", \"Awi\", \"Set\", \"Ott\", \"Nov\", \"Diċ\", \"\"]\n                    },\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, d' ta\\\\' 'MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d' ta\\\\' 'MMMM yyyy HH:mm\",\n                        F: \"dddd, d' ta\\\\' 'MMMM yyyy HH:mm:ss\",\n                        M: \"d' ta\\\\' 'MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"se-NO\": [\"se-NO\", \"default\", {\n            name: \"se-NO\",\n            englishName: \"Sami, Northern (Norway)\",\n            nativeName: \"davvisámegiella (Norga)\",\n            language: \"se\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sotnabeaivi\", \"vuossárga\", \"maŋŋebárga\", \"gaskavahkku\", \"duorastat\", \"bearjadat\", \"lávvardat\"],\n                        namesAbbr: [\"sotn\", \"vuos\", \"maŋ\", \"gask\", \"duor\", \"bear\", \"láv\"],\n                        namesShort: [\"s\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"ođđajagemánnu\", \"guovvamánnu\", \"njukčamánnu\", \"cuoŋománnu\", \"miessemánnu\", \"geassemánnu\", \"suoidnemánnu\", \"borgemánnu\", \"čakčamánnu\", \"golggotmánnu\", \"skábmamánnu\", \"juovlamánnu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ođđajagimánu\", \"guovvamánu\", \"njukčamánu\", \"cuoŋománu\", \"miessemánu\", \"geassemánu\", \"suoidnemánu\", \"borgemánu\", \"čakčamánu\", \"golggotmánu\", \"skábmamánu\", \"juovlamánu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ms-MY\": [\"ms-MY\", \"default\", {\n            name: \"ms-MY\",\n            englishName: \"Malay (Malaysia)\",\n            nativeName: \"Bahasa Melayu (Malaysia)\",\n            language: \"ms\",\n            numberFormat: {\n                currency: {\n                    decimals: 0,\n                    symbol: \"RM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Ahad\", \"Isnin\", \"Selasa\", \"Rabu\", \"Khamis\", \"Jumaat\", \"Sabtu\"],\n                        namesAbbr: [\"Ahad\", \"Isnin\", \"Sel\", \"Rabu\", \"Khamis\", \"Jumaat\", \"Sabtu\"],\n                        namesShort: [\"A\", \"I\", \"S\", \"R\", \"K\", \"J\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Januari\", \"Februari\", \"Mac\", \"April\", \"Mei\", \"Jun\", \"Julai\", \"Ogos\", \"September\", \"Oktober\", \"November\", \"Disember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mac\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Ogos\", \"Sept\", \"Okt\", \"Nov\", \"Dis\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM yyyy H:mm\",\n                        F: \"dd MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"kk-KZ\": [\"kk-KZ\", \"default\", {\n            name: \"kk-KZ\",\n            englishName: \"Kazakh (Kazakhstan)\",\n            nativeName: \"Қазақ (Қазақстан)\",\n            language: \"kk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    \",\": \" \",\n                    \".\": \"-\",\n                    symbol: \"Т\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Жексенбі\", \"Дүйсенбі\", \"Сейсенбі\", \"Сәрсенбі\", \"Бейсенбі\", \"Жұма\", \"Сенбі\"],\n                        namesAbbr: [\"Жк\", \"Дс\", \"Сс\", \"Ср\", \"Бс\", \"Жм\", \"Сн\"],\n                        namesShort: [\"Жк\", \"Дс\", \"Сс\", \"Ср\", \"Бс\", \"Жм\", \"Сн\"]\n                    },\n                    months: {\n                        names: [\"қаңтар\", \"ақпан\", \"наурыз\", \"сәуір\", \"мамыр\", \"маусым\", \"шілде\", \"тамыз\", \"қыркүйек\", \"қазан\", \"қараша\", \"желтоқсан\", \"\"],\n                        namesAbbr: [\"Қаң\", \"Ақп\", \"Нау\", \"Сәу\", \"Мам\", \"Мау\", \"Шіл\", \"Там\", \"Қыр\", \"Қаз\", \"Қар\", \"Жел\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy 'ж.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy 'ж.' H:mm\",\n                        F: \"d MMMM yyyy 'ж.' H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ky-KG\": [\"ky-KG\", \"default\", {\n            name: \"ky-KG\",\n            englishName: \"Kyrgyz (Kyrgyzstan)\",\n            nativeName: \"Кыргыз (Кыргызстан)\",\n            language: \"ky\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \"-\",\n                    symbol: \"сом\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Жекшемби\", \"Дүйшөмбү\", \"Шейшемби\", \"Шаршемби\", \"Бейшемби\", \"Жума\", \"Ишемби\"],\n                        namesAbbr: [\"Жш\", \"Дш\", \"Шш\", \"Шр\", \"Бш\", \"Жм\", \"Иш\"],\n                        namesShort: [\"Жш\", \"Дш\", \"Шш\", \"Шр\", \"Бш\", \"Жм\", \"Иш\"]\n                    },\n                    months: {\n                        names: [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"d'-'MMMM yyyy'-ж.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d'-'MMMM yyyy'-ж.' H:mm\",\n                        F: \"d'-'MMMM yyyy'-ж.' H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy'-ж.'\"\n                    }\n                }\n            }\n        }],\n    \"sw-KE\": [\"sw-KE\", \"default\", {\n            name: \"sw-KE\",\n            englishName: \"Kiswahili (Kenya)\",\n            nativeName: \"Kiswahili (Kenya)\",\n            language: \"sw\",\n            numberFormat: {\n                currency: {\n                    symbol: \"S\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Jumapili\", \"Jumatatu\", \"Jumanne\", \"Jumatano\", \"Alhamisi\", \"Ijumaa\", \"Jumamosi\"],\n                        namesAbbr: [\"Jumap.\", \"Jumat.\", \"Juman.\", \"Jumat.\", \"Alh.\", \"Iju.\", \"Jumam.\"],\n                        namesShort: [\"P\", \"T\", \"N\", \"T\", \"A\", \"I\", \"M\"]\n                    },\n                    months: {\n                        names: [\"Januari\", \"Februari\", \"Machi\", \"Aprili\", \"Mei\", \"Juni\", \"Julai\", \"Agosti\", \"Septemba\", \"Oktoba\", \"Novemba\", \"Decemba\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mac\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Ago\", \"Sep\", \"Okt\", \"Nov\", \"Dec\", \"\"]\n                    }\n                }\n            }\n        }],\n    \"tk-TM\": [\"tk-TM\", \"default\", {\n            name: \"tk-TM\",\n            englishName: \"Turkmen (Turkmenistan)\",\n            nativeName: \"türkmençe (Türkmenistan)\",\n            language: \"tk\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"m.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Duşenbe\", \"Sişenbe\", \"Çarşenbe\", \"Penşenbe\", \"Anna\", \"Şenbe\", \"Ýekşenbe\"],\n                        namesAbbr: [\"Db\", \"Sb\", \"Çb\", \"Pb\", \"An\", \"Şb\", \"Ýb\"],\n                        namesShort: [\"D\", \"S\", \"Ç\", \"P\", \"A\", \"Ş\", \"Ý\"]\n                    },\n                    months: {\n                        names: [\"Ýanwar\", \"Fewral\", \"Mart\", \"Aprel\", \"Maý\", \"lýun\", \"lýul\", \"Awgust\", \"Sentýabr\", \"Oktýabr\", \"Noýabr\", \"Dekabr\", \"\"],\n                        namesAbbr: [\"Ýan\", \"Few\", \"Mart\", \"Apr\", \"Maý\", \"lýun\", \"lýul\", \"Awg\", \"Sen\", \"Okt\", \"Not\", \"Dek\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"yyyy 'ý.' MMMM d\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy 'ý.' MMMM d H:mm\",\n                        F: \"yyyy 'ý.' MMMM d H:mm:ss\",\n                        Y: \"yyyy 'ý.' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"uz-Latn-UZ\": [\"uz-Latn-UZ\", \"default\", {\n            name: \"uz-Latn-UZ\",\n            englishName: \"Uzbek (Latin, Uzbekistan)\",\n            nativeName: \"U'zbek (U'zbekiston Respublikasi)\",\n            language: \"uz-Latn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    decimals: 0,\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"so'm\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"yakshanba\", \"dushanba\", \"seshanba\", \"chorshanba\", \"payshanba\", \"juma\", \"shanba\"],\n                        namesAbbr: [\"yak.\", \"dsh.\", \"sesh.\", \"chr.\", \"psh.\", \"jm.\", \"sh.\"],\n                        namesShort: [\"ya\", \"d\", \"s\", \"ch\", \"p\", \"j\", \"sh\"]\n                    },\n                    months: {\n                        names: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"],\n                        namesAbbr: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM yyyy\",\n                        D: \"yyyy 'yil' d-MMMM\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy 'yil' d-MMMM HH:mm\",\n                        F: \"yyyy 'yil' d-MMMM HH:mm:ss\",\n                        M: \"d-MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tt-RU\": [\"tt-RU\", \"default\", {\n            name: \"tt-RU\",\n            englishName: \"Tatar (Russia)\",\n            nativeName: \"Татар (Россия)\",\n            language: \"tt\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Якшәмбе\", \"Дүшәмбе\", \"Сишәмбе\", \"Чәршәмбе\", \"Пәнҗешәмбе\", \"Җомга\", \"Шимбә\"],\n                        namesAbbr: [\"Якш\", \"Дүш\", \"Сиш\", \"Чәрш\", \"Пәнҗ\", \"Җом\", \"Шим\"],\n                        namesShort: [\"Я\", \"Д\", \"С\", \"Ч\", \"П\", \"Җ\", \"Ш\"]\n                    },\n                    months: {\n                        names: [\"Гыйнвар\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\", \"\"],\n                        namesAbbr: [\"Гыйн.\", \"Фев.\", \"Мар.\", \"Апр.\", \"Май\", \"Июнь\", \"Июль\", \"Авг.\", \"Сен.\", \"Окт.\", \"Нояб.\", \"Дек.\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"Гыйнварның\", \"Февральнең\", \"Мартның\", \"Апрельнең\", \"Майның\", \"Июньнең\", \"Июльнең\", \"Августның\", \"Сентябрьның\", \"Октябрьның\", \"Ноябрьның\", \"Декабрьның\", \"\"],\n                        namesAbbr: [\"Гыйн.-ның\", \"Фев.-нең\", \"Мар.-ның\", \"Апр.-нең\", \"Майның\", \"Июньнең\", \"Июльнең\", \"Авг.-ның\", \"Сен.-ның\", \"Окт.-ның\", \"Нояб.-ның\", \"Дек.-ның\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"bn-IN\": [\"bn-IN\", \"default\", {\n            name: \"bn-IN\",\n            englishName: \"Bengali (India)\",\n            nativeName: \"বাংলা (ভারত)\",\n            language: \"bn\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"টা\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    \":\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"রবিবার\", \"সোমবার\", \"মঙ্গলবার\", \"বুধবার\", \"বৃহস্পতিবার\", \"শুক্রবার\", \"শনিবার\"],\n                        namesAbbr: [\"রবি.\", \"সোম.\", \"মঙ্গল.\", \"বুধ.\", \"বৃহস্পতি.\", \"শুক্র.\", \"শনি.\"],\n                        namesShort: [\"র\", \"স\", \"ম\", \"ব\", \"ব\", \"শ\", \"শ\"]\n                    },\n                    months: {\n                        names: [\"জানুয়ারী\", \"ফেব্রুয়ারী\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগস্ট\", \"সেপ্টেম্বর\", \"অক্টোবর\", \"নভেম্বর\", \"ডিসেম্বর\", \"\"],\n                        namesAbbr: [\"জানু.\", \"ফেব্রু.\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগ.\", \"সেপ্টে.\", \"অক্টো.\", \"নভে.\", \"ডিসে.\", \"\"]\n                    },\n                    AM: [\"পুর্বাহ্ন\", \"পুর্বাহ্ন\", \"পুর্বাহ্ন\"],\n                    PM: [\"অপরাহ্ন\", \"অপরাহ্ন\", \"অপরাহ্ন\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH.mm\",\n                        T: \"HH.mm.ss\",\n                        f: \"dd MMMM yyyy HH.mm\",\n                        F: \"dd MMMM yyyy HH.mm.ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"pa-IN\": [\"pa-IN\", \"default\", {\n            name: \"pa-IN\",\n            englishName: \"Punjabi (India)\",\n            nativeName: \"ਪੰਜਾਬੀ (ਭਾਰਤ)\",\n            language: \"pa\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ਰੁ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ਐਤਵਾਰ\", \"ਸੋਮਵਾਰ\", \"ਮੰਗਲਵਾਰ\", \"ਬੁੱਧਵਾਰ\", \"ਵੀਰਵਾਰ\", \"ਸ਼ੁੱਕਰਵਾਰ\", \"ਸ਼ਨਿੱਚਰਵਾਰ\"],\n                        namesAbbr: [\"ਐਤ.\", \"ਸੋਮ.\", \"ਮੰਗਲ.\", \"ਬੁੱਧ.\", \"ਵੀਰ.\", \"ਸ਼ੁਕਰ.\", \"ਸ਼ਨਿੱਚਰ.\"],\n                        namesShort: [\"ਐ\", \"ਸ\", \"ਮ\", \"ਬ\", \"ਵ\", \"ਸ਼\", \"ਸ਼\"]\n                    },\n                    months: {\n                        names: [\"ਜਨਵਰੀ\", \"ਫ਼ਰਵਰੀ\", \"ਮਾਰਚ\", \"ਅਪ੍ਰੈਲ\", \"ਮਈ\", \"ਜੂਨ\", \"ਜੁਲਾਈ\", \"ਅਗਸਤ\", \"ਸਤੰਬਰ\", \"ਅਕਤੂਬਰ\", \"ਨਵੰਬਰ\", \"ਦਸੰਬਰ\", \"\"],\n                        namesAbbr: [\"ਜਨਵਰੀ\", \"ਫ਼ਰਵਰੀ\", \"ਮਾਰਚ\", \"ਅਪ੍ਰੈਲ\", \"ਮਈ\", \"ਜੂਨ\", \"ਜੁਲਾਈ\", \"ਅਗਸਤ\", \"ਸਤੰਬਰ\", \"ਅਕਤੂਬਰ\", \"ਨਵੰਬਰ\", \"ਦਸੰਬਰ\", \"\"]\n                    },\n                    AM: [\"ਸਵੇਰ\", \"ਸਵੇਰ\", \"ਸਵੇਰ\"],\n                    PM: [\"ਸ਼ਾਮ\", \"ਸ਼ਾਮ\", \"ਸ਼ਾਮ\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy dddd\",\n                        t: \"tt hh:mm\",\n                        T: \"tt hh:mm:ss\",\n                        f: \"dd MMMM yyyy dddd tt hh:mm\",\n                        F: \"dd MMMM yyyy dddd tt hh:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"gu-IN\": [\"gu-IN\", \"default\", {\n            name: \"gu-IN\",\n            englishName: \"Gujarati (India)\",\n            nativeName: \"ગુજરાતી (ભારત)\",\n            language: \"gu\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"રૂ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"રવિવાર\", \"સોમવાર\", \"મંગળવાર\", \"બુધવાર\", \"ગુરુવાર\", \"શુક્રવાર\", \"શનિવાર\"],\n                        namesAbbr: [\"રવિ\", \"સોમ\", \"મંગળ\", \"બુધ\", \"ગુરુ\", \"શુક્ર\", \"શનિ\"],\n                        namesShort: [\"ર\", \"સ\", \"મ\", \"બ\", \"ગ\", \"શ\", \"શ\"]\n                    },\n                    months: {\n                        names: [\"જાન્યુઆરી\", \"ફેબ્રુઆરી\", \"માર્ચ\", \"એપ્રિલ\", \"મે\", \"જૂન\", \"જુલાઈ\", \"ઑગસ્ટ\", \"સપ્ટેમ્બર\", \"ઑક્ટ્બર\", \"નવેમ્બર\", \"ડિસેમ્બર\", \"\"],\n                        namesAbbr: [\"જાન્યુ\", \"ફેબ્રુ\", \"માર્ચ\", \"એપ્રિલ\", \"મે\", \"જૂન\", \"જુલાઈ\", \"ઑગસ્ટ\", \"સપ્ટે\", \"ઑક્ટો\", \"નવે\", \"ડિસે\", \"\"]\n                    },\n                    AM: [\"પૂર્વ મધ્યાહ્ન\", \"પૂર્વ મધ્યાહ્ન\", \"પૂર્વ મધ્યાહ્ન\"],\n                    PM: [\"ઉત્તર મધ્યાહ્ન\", \"ઉત્તર મધ્યાહ્ન\", \"ઉત્તર મધ્યાહ્ન\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"or-IN\": [\"or-IN\", \"default\", {\n            name: \"or-IN\",\n            englishName: \"Oriya (India)\",\n            nativeName: \"ଓଡ଼ିଆ (ଭାରତ)\",\n            language: \"or\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ଟ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"ରବିବାର\", \"ସୋମବାର\", \"ମଙ୍ଗଳବାର\", \"ବୁଧବାର\", \"ଗୁରୁବାର\", \"ଶୁକ୍ରବାର\", \"ଶନିବାର\"],\n                        namesAbbr: [\"ରବି.\", \"ସୋମ.\", \"ମଙ୍ଗଳ.\", \"ବୁଧ.\", \"ଗୁରୁ.\", \"ଶୁକ୍ର.\", \"ଶନି.\"],\n                        namesShort: [\"ର\", \"ସୋ\", \"ମ\", \"ବୁ\", \"ଗୁ\", \"ଶୁ\", \"ଶ\"]\n                    },\n                    months: {\n                        names: [\"ଜାନୁୟାରୀ\", \"ଫ୍ରେବୃୟାରୀ\", \"ମାର୍ଚ୍ଚ\", \"ଏପ୍ରିଲ୍‌\", \"ମେ\", \"ଜୁନ୍‌\", \"ଜୁଲାଇ\", \"ଅଗଷ୍ଟ\", \"ସେପ୍ଟେମ୍ବର\", \"ଅକ୍ଟୋବର\", \"ନଭେମ୍ବର\", \"(ଡିସେମ୍ବର\", \"\"],\n                        namesAbbr: [\"ଜାନୁୟାରୀ\", \"ଫ୍ରେବୃୟାରୀ\", \"ମାର୍ଚ୍ଚ\", \"ଏପ୍ରିଲ୍‌\", \"ମେ\", \"ଜୁନ୍‌\", \"ଜୁଲାଇ\", \"ଅଗଷ୍ଟ\", \"ସେପ୍ଟେମ୍ବର\", \"ଅକ୍ଟୋବର\", \"ନଭେମ୍ବର\", \"(ଡିସେମ୍ବର\", \"\"]\n                    },\n                    eras: [{ \"name\": \"ଖ୍ରୀଷ୍ଟାବ୍ଦ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ta-IN\": [\"ta-IN\", \"default\", {\n            name: \"ta-IN\",\n            englishName: \"Tamil (India)\",\n            nativeName: \"தமிழ் (இந்தியா)\",\n            language: \"ta\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ரூ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ஞாயிற்றுக்கிழமை\", \"திங்கள்கிழமை\", \"செவ்வாய்கிழமை\", \"புதன்கிழமை\", \"வியாழக்கிழமை\", \"வெள்ளிக்கிழமை\", \"சனிக்கிழமை\"],\n                        namesAbbr: [\"ஞாயிறு\", \"திங்கள்\", \"செவ்வாய்\", \"புதன்\", \"வியாழன்\", \"வெள்ளி\", \"சனி\"],\n                        namesShort: [\"ஞா\", \"தி\", \"செ\", \"பு\", \"வி\", \"வெ\", \"ச\"]\n                    },\n                    months: {\n                        names: [\"ஜனவரி\", \"பிப்ரவரி\", \"மார்ச்\", \"ஏப்ரல்\", \"மே\", \"ஜூன்\", \"ஜூலை\", \"ஆகஸ்ட்\", \"செப்டம்பர்\", \"அக்டோபர்\", \"நவம்பர்\", \"டிசம்பர்\", \"\"],\n                        namesAbbr: [\"ஜனவரி\", \"பிப்ரவரி\", \"மார்ச்\", \"ஏப்ரல்\", \"மே\", \"ஜூன்\", \"ஜூலை\", \"ஆகஸ்ட்\", \"செப்டம்பர்\", \"அக்டோபர்\", \"நவம்பர்\", \"டிசம்பர்\", \"\"]\n                    },\n                    AM: [\"காலை\", \"காலை\", \"காலை\"],\n                    PM: [\"மாலை\", \"மாலை\", \"மாலை\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"te-IN\": [\"te-IN\", \"default\", {\n            name: \"te-IN\",\n            englishName: \"Telugu (India)\",\n            nativeName: \"తెలుగు (భారత దేశం)\",\n            language: \"te\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"రూ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ఆదివారం\", \"సోమవారం\", \"మంగళవారం\", \"బుధవారం\", \"గురువారం\", \"శుక్రవారం\", \"శనివారం\"],\n                        namesAbbr: [\"ఆది.\", \"సోమ.\", \"మంగళ.\", \"బుధ.\", \"గురు.\", \"శుక్ర.\", \"శని.\"],\n                        namesShort: [\"ఆ\", \"సో\", \"మం\", \"బు\", \"గు\", \"శు\", \"శ\"]\n                    },\n                    months: {\n                        names: [\"జనవరి\", \"ఫిబ్రవరి\", \"మార్చి\", \"ఏప్రిల్\", \"మే\", \"జూన్\", \"జూలై\", \"ఆగస్టు\", \"సెప్టెంబర్\", \"అక్టోబర్\", \"నవంబర్\", \"డిసెంబర్\", \"\"],\n                        namesAbbr: [\"జనవరి\", \"ఫిబ్రవరి\", \"మార్చి\", \"ఏప్రిల్\", \"మే\", \"జూన్\", \"జూలై\", \"ఆగస్టు\", \"సెప్టెంబర్\", \"అక్టోబర్\", \"నవంబర్\", \"డిసెంబర్\", \"\"]\n                    },\n                    AM: [\"పూర్వాహ్న\", \"పూర్వాహ్న\", \"పూర్వాహ్న\"],\n                    PM: [\"అపరాహ్న\", \"అపరాహ్న\", \"అపరాహ్న\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"kn-IN\": [\"kn-IN\", \"default\", {\n            name: \"kn-IN\",\n            englishName: \"Kannada (India)\",\n            nativeName: \"ಕನ್ನಡ (ಭಾರತ)\",\n            language: \"kn\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ರೂ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ಭಾನುವಾರ\", \"ಸೋಮವಾರ\", \"ಮಂಗಳವಾರ\", \"ಬುಧವಾರ\", \"ಗುರುವಾರ\", \"ಶುಕ್ರವಾರ\", \"ಶನಿವಾರ\"],\n                        namesAbbr: [\"ಭಾನು.\", \"ಸೋಮ.\", \"ಮಂಗಳ.\", \"ಬುಧ.\", \"ಗುರು.\", \"ಶುಕ್ರ.\", \"ಶನಿ.\"],\n                        namesShort: [\"ರ\", \"ಸ\", \"ಮ\", \"ಬ\", \"ಗ\", \"ಶ\", \"ಶ\"]\n                    },\n                    months: {\n                        names: [\"ಜನವರಿ\", \"ಫೆಬ್ರವರಿ\", \"ಮಾರ್ಚ್\", \"ಎಪ್ರಿಲ್\", \"ಮೇ\", \"ಜೂನ್\", \"ಜುಲೈ\", \"ಆಗಸ್ಟ್\", \"ಸೆಪ್ಟಂಬರ್\", \"ಅಕ್ಟೋಬರ್\", \"ನವೆಂಬರ್\", \"ಡಿಸೆಂಬರ್\", \"\"],\n                        namesAbbr: [\"ಜನವರಿ\", \"ಫೆಬ್ರವರಿ\", \"ಮಾರ್ಚ್\", \"ಎಪ್ರಿಲ್\", \"ಮೇ\", \"ಜೂನ್\", \"ಜುಲೈ\", \"ಆಗಸ್ಟ್\", \"ಸೆಪ್ಟಂಬರ್\", \"ಅಕ್ಟೋಬರ್\", \"ನವೆಂಬರ್\", \"ಡಿಸೆಂಬರ್\", \"\"]\n                    },\n                    AM: [\"ಪೂರ್ವಾಹ್ನ\", \"ಪೂರ್ವಾಹ್ನ\", \"ಪೂರ್ವಾಹ್ನ\"],\n                    PM: [\"ಅಪರಾಹ್ನ\", \"ಅಪರಾಹ್ನ\", \"ಅಪರಾಹ್ನ\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ml-IN\": [\"ml-IN\", \"default\", {\n            name: \"ml-IN\",\n            englishName: \"Malayalam (India)\",\n            nativeName: \"മലയാളം (ഭാരതം)\",\n            language: \"ml\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ക\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    \":\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ഞായറാഴ്ച\", \"തിങ്കളാഴ്ച\", \"ചൊവ്വാഴ്ച\", \"ബുധനാഴ്ച\", \"വ്യാഴാഴ്ച\", \"വെള്ളിയാഴ്ച\", \"ശനിയാഴ്ച\"],\n                        namesAbbr: [\"ഞായർ.\", \"തിങ്കൾ.\", \"ചൊവ്വ.\", \"ബുധൻ.\", \"വ്യാഴം.\", \"വെള്ളി.\", \"ശനി.\"],\n                        namesShort: [\"ഞ\", \"ത\", \"ച\", \"ബ\", \"വ\", \"വെ\", \"ശ\"]\n                    },\n                    months: {\n                        names: [\"ജനുവരി\", \"ഫെബ്റുവരി\", \"മാറ്ച്ച്\", \"ഏപ്റില്\", \"മെയ്\", \"ജൂണ്\", \"ജൂലൈ\", \"ഓഗസ്ററ്\", \"സെപ്ററംബറ്\", \"ഒക്ടോബറ്\", \"നവംബറ്\", \"ഡിസംബറ്\", \"\"],\n                        namesAbbr: [\"ജനുവരി\", \"ഫെബ്റുവരി\", \"മാറ്ച്ച്\", \"ഏപ്റില്\", \"മെയ്\", \"ജൂണ്\", \"ജൂലൈ\", \"ഓഗസ്ററ്\", \"സെപ്ററംബറ്\", \"ഒക്ടോബറ്\", \"നവംബറ്\", \"ഡിസംബറ്\", \"\"]\n                    },\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH.mm\",\n                        T: \"HH.mm.ss\",\n                        f: \"dd MMMM yyyy HH.mm\",\n                        F: \"dd MMMM yyyy HH.mm.ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"as-IN\": [\"as-IN\", \"default\", {\n            name: \"as-IN\",\n            englishName: \"Assamese (India)\",\n            nativeName: \"অসমীয়া (ভাৰত)\",\n            language: \"as\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"n$\"],\n                    groupSizes: [3, 2],\n                    symbol: \"ট\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"সোমবাৰ\", \"মঙ্গলবাৰ\", \"বুধবাৰ\", \"বৃহস্পতিবাৰ\", \"শুক্রবাৰ\", \"শনিবাৰ\", \"ৰবিবাৰ\"],\n                        namesAbbr: [\"সোম.\", \"মঙ্গল.\", \"বুধ.\", \"বৃহ.\", \"শুক্র.\", \"শনি.\", \"ৰবি.\"],\n                        namesShort: [\"সো\", \"ম\", \"বু\", \"বৃ\", \"শু\", \"শ\", \"র\"]\n                    },\n                    months: {\n                        names: [\"জানুৱাৰী\", \"ফেব্রুৱাৰী\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগষ্ট\", \"চেপ্টেম্বর\", \"অক্টোবর\", \"নবেম্বর\", \"ডিচেম্বর\", \"\"],\n                        namesAbbr: [\"জানু\", \"ফেব্রু\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগষ্ট\", \"চেপ্টে\", \"অক্টো\", \"নবে\", \"ডিচে\", \"\"]\n                    },\n                    AM: [\"ৰাতিপু\", \"ৰাতিপু\", \"ৰাতিপু\"],\n                    PM: [\"আবেলি\", \"আবেলি\", \"আবেলি\"],\n                    eras: [{ \"name\": \"খ্রীষ্টাব্দ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"yyyy,MMMM dd, dddd\",\n                        t: \"tt h:mm\",\n                        T: \"tt h:mm:ss\",\n                        f: \"yyyy,MMMM dd, dddd tt h:mm\",\n                        F: \"yyyy,MMMM dd, dddd tt h:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM,yy\"\n                    }\n                }\n            }\n        }],\n    \"mr-IN\": [\"mr-IN\", \"default\", {\n            name: \"mr-IN\",\n            englishName: \"Marathi (India)\",\n            nativeName: \"मराठी (भारत)\",\n            language: \"mr\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"रविवार\", \"सोमवार\", \"मंगळवार\", \"बुधवार\", \"गुरुवार\", \"शुक्रवार\", \"शनिवार\"],\n                        namesAbbr: [\"रवि.\", \"सोम.\", \"मंगळ.\", \"बुध.\", \"गुरु.\", \"शुक्र.\", \"शनि.\"],\n                        namesShort: [\"र\", \"स\", \"म\", \"ब\", \"ग\", \"श\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जानेवारी\", \"फेब्रुवारी\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टेंबर\", \"ऑक्टोबर\", \"नोव्हेंबर\", \"डिसेंबर\", \"\"],\n                        namesAbbr: [\"जाने.\", \"फेब्रु.\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टें.\", \"ऑक्टो.\", \"नोव्हें.\", \"डिसें.\", \"\"]\n                    },\n                    AM: [\"म.पू.\", \"म.पू.\", \"म.पू.\"],\n                    PM: [\"म.नं.\", \"म.नं.\", \"म.नं.\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"sa-IN\": [\"sa-IN\", \"default\", {\n            name: \"sa-IN\",\n            englishName: \"Sanskrit (India)\",\n            nativeName: \"संस्कृत (भारतम्)\",\n            language: \"sa\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"रविवासरः\", \"सोमवासरः\", \"मङ्गलवासरः\", \"बुधवासरः\", \"गुरुवासरः\", \"शुक्रवासरः\", \"शनिवासरः\"],\n                        namesAbbr: [\"रविवासरः\", \"सोमवासरः\", \"मङ्गलवासरः\", \"बुधवासरः\", \"गुरुवासरः\", \"शुक्रवासरः\", \"शनिवासरः\"],\n                        namesShort: [\"र\", \"स\", \"म\", \"ब\", \"ग\", \"श\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"],\n                        namesAbbr: [\"जनवरी\", \"फरवरी\", \"मार्च\", \"अप्रैल\", \"मई\", \"जून\", \"जुलाई\", \"अगस्त\", \"सितम्बर\", \"अक्तूबर\", \"नवम्बर\", \"दिसम्बर\", \"\"]\n                    },\n                    AM: [\"पूर्वाह्न\", \"पूर्वाह्न\", \"पूर्वाह्न\"],\n                    PM: [\"अपराह्न\", \"अपराह्न\", \"अपराह्न\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy dddd\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy dddd HH:mm\",\n                        F: \"dd MMMM yyyy dddd HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"mn-MN\": [\"mn-MN\", \"default\", {\n            name: \"mn-MN\",\n            englishName: \"Mongolian (Cyrillic, Mongolia)\",\n            nativeName: \"Монгол хэл (Монгол улс)\",\n            language: \"mn-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"₮\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Ням\", \"Даваа\", \"Мягмар\", \"Лхагва\", \"Пүрэв\", \"Баасан\", \"Бямба\"],\n                        namesAbbr: [\"Ня\", \"Да\", \"Мя\", \"Лх\", \"Пү\", \"Ба\", \"Бя\"],\n                        namesShort: [\"Ня\", \"Да\", \"Мя\", \"Лх\", \"Пү\", \"Ба\", \"Бя\"]\n                    },\n                    months: {\n                        names: [\"1 дүгээр сар\", \"2 дугаар сар\", \"3 дугаар сар\", \"4 дүгээр сар\", \"5 дугаар сар\", \"6 дугаар сар\", \"7 дугаар сар\", \"8 дугаар сар\", \"9 дүгээр сар\", \"10 дугаар сар\", \"11 дүгээр сар\", \"12 дугаар сар\", \"\"],\n                        namesAbbr: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"1 дүгээр сарын\", \"2 дугаар сарын\", \"3 дугаар сарын\", \"4 дүгээр сарын\", \"5 дугаар сарын\", \"6 дугаар сарын\", \"7 дугаар сарын\", \"8 дугаар сарын\", \"9 дүгээр сарын\", \"10 дугаар сарын\", \"11 дүгээр сарын\", \"12 дугаар сарын\", \"\"],\n                        namesAbbr: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yy.MM.dd\",\n                        D: \"yyyy 'оны' MMMM d\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy 'оны' MMMM d H:mm\",\n                        F: \"yyyy 'оны' MMMM d H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"yyyy 'он' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"bo-CN\": [\"bo-CN\", \"default\", {\n            name: \"bo-CN\",\n            englishName: \"Tibetan (PRC)\",\n            nativeName: \"བོད་ཡིག (ཀྲུང་ཧྭ་མི་དམངས་སྤྱི་མཐུན་རྒྱལ་ཁབ།)\",\n            language: \"bo\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"གཟའ་ཉི་མ།\", \"གཟའ་ཟླ་བ།\", \"གཟའ་མིག་དམར།\", \"གཟའ་ལྷག་པ།\", \"གཟའ་ཕུར་བུ།\", \"གཟའ་པ་སངས།\", \"གཟའ་སྤེན་པ།\"],\n                        namesAbbr: [\"ཉི་མ།\", \"ཟླ་བ།\", \"མིག་དམར།\", \"ལྷག་པ།\", \"ཕུར་བུ།\", \"པ་སངས།\", \"སྤེན་པ།\"],\n                        namesShort: [\"༧\", \"༡\", \"༢\", \"༣\", \"༤\", \"༥\", \"༦\"]\n                    },\n                    months: {\n                        names: [\"སྤྱི་ཟླ་དང་པོ།\", \"སྤྱི་ཟླ་གཉིས་པ།\", \"སྤྱི་ཟླ་གསུམ་པ།\", \"སྤྱི་ཟླ་བཞི་པ།\", \"སྤྱི་ཟླ་ལྔ་པ།\", \"སྤྱི་ཟླ་དྲུག་པ།\", \"སྤྱི་ཟླ་བདུན་པ།\", \"སྤྱི་ཟླ་བརྒྱད་པ།\", \"སྤྱི་ཟླ་དགུ་པ།\", \"སྤྱི་ཟླ་བཅུ་པོ།\", \"སྤྱི་ཟླ་བཅུ་གཅིག་པ།\", \"སྤྱི་ཟླ་བཅུ་གཉིས་པ།\", \"\"],\n                        namesAbbr: [\"ཟླ་ ༡\", \"ཟླ་ ༢\", \"ཟླ་ ༣\", \"ཟླ་ ༤\", \"ཟླ་ ༥\", \"ཟླ་ ༦\", \"ཟླ་ ༧\", \"ཟླ་ ༨\", \"ཟླ་ ༩\", \"ཟླ་ ༡༠\", \"ཟླ་ ༡༡\", \"ཟླ་ ༡༢\", \"\"]\n                    },\n                    AM: [\"སྔ་དྲོ\", \"སྔ་དྲོ\", \"སྔ་དྲོ\"],\n                    PM: [\"ཕྱི་དྲོ\", \"ཕྱི་དྲོ\", \"ཕྱི་དྲོ\"],\n                    eras: [{ \"name\": \"སྤྱི་ལོ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'ལོའི་ཟླ' M'ཚེས' d\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm\",\n                        F: \"yyyy'ལོའི་ཟླ' M'ཚེས' d HH:mm:ss\",\n                        M: \"'ཟླ་' M'ཚེས'd\",\n                        Y: \"yyyy.M\"\n                    }\n                }\n            }\n        }],\n    \"cy-GB\": [\"cy-GB\", \"default\", {\n            name: \"cy-GB\",\n            englishName: \"Welsh (United Kingdom)\",\n            nativeName: \"Cymraeg (y Deyrnas Unedig)\",\n            language: \"cy\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"£\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Dydd Sul\", \"Dydd Llun\", \"Dydd Mawrth\", \"Dydd Mercher\", \"Dydd Iau\", \"Dydd Gwener\", \"Dydd Sadwrn\"],\n                        namesAbbr: [\"Sul\", \"Llun\", \"Maw\", \"Mer\", \"Iau\", \"Gwe\", \"Sad\"],\n                        namesShort: [\"Su\", \"Ll\", \"Ma\", \"Me\", \"Ia\", \"Gw\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Ionawr\", \"Chwefror\", \"Mawrth\", \"Ebrill\", \"Mai\", \"Mehefin\", \"Gorffennaf\", \"Awst\", \"Medi\", \"Hydref\", \"Tachwedd\", \"Rhagfyr\", \"\"],\n                        namesAbbr: [\"Ion\", \"Chwe\", \"Maw\", \"Ebr\", \"Mai\", \"Meh\", \"Gor\", \"Aws\", \"Med\", \"Hyd\", \"Tach\", \"Rhag\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"km-KH\": [\"km-KH\", \"default\", {\n            name: \"km-KH\",\n            englishName: \"Khmer (Cambodia)\",\n            nativeName: \"ខ្មែរ (កម្ពុជា)\",\n            language: \"km\",\n            numberFormat: {\n                pattern: [\"- n\"],\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    symbol: \"៛\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"ថ្ងៃអាទិត្យ\", \"ថ្ងៃច័ន្ទ\", \"ថ្ងៃអង្គារ\", \"ថ្ងៃពុធ\", \"ថ្ងៃព្រហស្បតិ៍\", \"ថ្ងៃសុក្រ\", \"ថ្ងៃសៅរ៍\"],\n                        namesAbbr: [\"អាទិ.\", \"ច.\", \"អ.\", \"ពុ\", \"ព្រហ.\", \"សុ.\", \"ស.\"],\n                        namesShort: [\"អា\", \"ច\", \"អ\", \"ពុ\", \"ព្\", \"សុ\", \"ស\"]\n                    },\n                    months: {\n                        names: [\"មករា\", \"កុម្ភៈ\", \"មិនា\", \"មេសា\", \"ឧសភា\", \"មិថុនា\", \"កក្កដា\", \"សីហា\", \"កញ្ញា\", \"តុលា\", \"វិច្ឆិកា\", \"ធ្នូ\", \"\"],\n                        namesAbbr: [\"១\", \"២\", \"៣\", \"៤\", \"៥\", \"៦\", \"៧\", \"៨\", \"៩\", \"១០\", \"១១\", \"១២\", \"\"]\n                    },\n                    AM: [\"ព្រឹក\", \"ព្រឹក\", \"ព្រឹក\"],\n                    PM: [\"ល្ងាច\", \"ល្ងាច\", \"ល្ងាច\"],\n                    eras: [{ \"name\": \"មុនគ.ស.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm tt\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy H:mm tt\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"'ថ្ងៃទី' dd 'ខែ' MM\",\n                        Y: \"'ខែ' MM 'ឆ្នាំ' yyyy\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ព្រឹក\", \"ព្រឹក\", \"ព្រឹក\"],\n                    PM: [\"ល្ងាច\", \"ល្ងាច\", \"ល្ងាច\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm tt\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy HH:mm:ss\"\n                    }\n                }\n            }\n        }],\n    \"lo-LA\": [\"lo-LA\", \"default\", {\n            name: \"lo-LA\",\n            englishName: \"Lao (Lao P.D.R.)\",\n            nativeName: \"ລາວ (ສ.ປ.ປ. ລາວ)\",\n            language: \"lo\",\n            numberFormat: {\n                pattern: [\"(n)\"],\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"(n$)\", \"n$\"],\n                    groupSizes: [3, 0],\n                    symbol: \"₭\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"ວັນອາທິດ\", \"ວັນຈັນ\", \"ວັນອັງຄານ\", \"ວັນພຸດ\", \"ວັນພະຫັດ\", \"ວັນສຸກ\", \"ວັນເສົາ\"],\n                        namesAbbr: [\"ອາທິດ\", \"ຈັນ\", \"ອັງຄານ\", \"ພຸດ\", \"ພະຫັດ\", \"ສຸກ\", \"ເສົາ\"],\n                        namesShort: [\"ອ\", \"ຈ\", \"ອ\", \"ພ\", \"ພ\", \"ສ\", \"ເ\"]\n                    },\n                    months: {\n                        names: [\"ມັງກອນ\", \"ກຸມພາ\", \"ມີນາ\", \"ເມສາ\", \"ພຶດສະພາ\", \"ມິຖຸນາ\", \"ກໍລະກົດ\", \"ສິງຫາ\", \"ກັນຍາ\", \"ຕຸລາ\", \"ພະຈິກ\", \"ທັນວາ\", \"\"],\n                        namesAbbr: [\"ມັງກອນ\", \"ກຸມພາ\", \"ມີນາ\", \"ເມສາ\", \"ພຶດສະພາ\", \"ມິຖຸນາ\", \"ກໍລະກົດ\", \"ສິງຫາ\", \"ກັນຍາ\", \"ຕຸລາ\", \"ພະຈິກ\", \"ທັນວາ\", \"\"]\n                    },\n                    AM: [\"ເຊົ້າ\", \"ເຊົ້າ\", \"ເຊົ້າ\"],\n                    PM: [\"ແລງ\", \"ແລງ\", \"ແລງ\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"H:mm tt\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy H:mm tt\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"gl-ES\": [\"gl-ES\", \"default\", {\n            name: \"gl-ES\",\n            englishName: \"Galician (Galician)\",\n            nativeName: \"galego (galego)\",\n            language: \"gl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domingo\", \"luns\", \"martes\", \"mércores\", \"xoves\", \"venres\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"luns\", \"mar\", \"mér\", \"xov\", \"ven\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mé\", \"xo\", \"ve\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"xaneiro\", \"febreiro\", \"marzo\", \"abril\", \"maio\", \"xuño\", \"xullo\", \"agosto\", \"setembro\", \"outubro\", \"novembro\", \"decembro\", \"\"],\n                        namesAbbr: [\"xan\", \"feb\", \"mar\", \"abr\", \"maio\", \"xuñ\", \"xull\", \"ago\", \"set\", \"out\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"kok-IN\": [\"kok-IN\", \"default\", {\n            name: \"kok-IN\",\n            englishName: \"Konkani (India)\",\n            nativeName: \"कोंकणी (भारत)\",\n            language: \"kok\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"आयतार\", \"सोमार\", \"मंगळार\", \"बुधवार\", \"बिरेस्तार\", \"सुक्रार\", \"शेनवार\"],\n                        namesAbbr: [\"आय.\", \"सोम.\", \"मंगळ.\", \"बुध.\", \"बिरे.\", \"सुक्र.\", \"शेन.\"],\n                        namesShort: [\"आ\", \"स\", \"म\", \"ब\", \"ब\", \"स\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जानेवारी\", \"फेब्रुवारी\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टेंबर\", \"ऑक्टोबर\", \"नोवेम्बर\", \"डिसेंबर\", \"\"],\n                        namesAbbr: [\"जानेवारी\", \"फेब्रुवारी\", \"मार्च\", \"एप्रिल\", \"मे\", \"जून\", \"जुलै\", \"ऑगस्ट\", \"सप्टेंबर\", \"ऑक्टोबर\", \"नोवेम्बर\", \"डिसेंबर\", \"\"]\n                    },\n                    AM: [\"म.पू.\", \"म.पू.\", \"म.पू.\"],\n                    PM: [\"म.नं.\", \"म.नं.\", \"म.नं.\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"syr-SY\": [\"syr-SY\", \"default\", {\n            name: \"syr-SY\",\n            englishName: \"Syriac (Syria)\",\n            nativeName: \"ܣܘܪܝܝܐ (سوريا)\",\n            language: \"syr\",\n            isRTL: true,\n            numberFormat: {\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ل.س.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"ܚܕ ܒܫܒܐ\", \"ܬܪܝܢ ܒܫܒܐ\", \"ܬܠܬܐ ܒܫܒܐ\", \"ܐܪܒܥܐ ܒܫܒܐ\", \"ܚܡܫܐ ܒܫܒܐ\", \"ܥܪܘܒܬܐ\", \"ܫܒܬܐ\"],\n                        namesAbbr: [\"܏ܐ ܏ܒܫ\", \"܏ܒ ܏ܒܫ\", \"܏ܓ ܏ܒܫ\", \"܏ܕ ܏ܒܫ\", \"܏ܗ ܏ܒܫ\", \"܏ܥܪܘܒ\", \"܏ܫܒ\"],\n                        namesShort: [\"ܐ\", \"ܒ\", \"ܓ\", \"ܕ\", \"ܗ\", \"ܥ\", \"ܫ\"]\n                    },\n                    months: {\n                        names: [\"ܟܢܘܢ ܐܚܪܝ\", \"ܫܒܛ\", \"ܐܕܪ\", \"ܢܝܣܢ\", \"ܐܝܪ\", \"ܚܙܝܪܢ\", \"ܬܡܘܙ\", \"ܐܒ\", \"ܐܝܠܘܠ\", \"ܬܫܪܝ ܩܕܝܡ\", \"ܬܫܪܝ ܐܚܪܝ\", \"ܟܢܘܢ ܩܕܝܡ\", \"\"],\n                        namesAbbr: [\"܏ܟܢ ܏ܒ\", \"ܫܒܛ\", \"ܐܕܪ\", \"ܢܝܣܢ\", \"ܐܝܪ\", \"ܚܙܝܪܢ\", \"ܬܡܘܙ\", \"ܐܒ\", \"ܐܝܠܘܠ\", \"܏ܬܫ ܏ܐ\", \"܏ܬܫ ܏ܒ\", \"܏ܟܢ ܏ܐ\", \"\"]\n                    },\n                    AM: [\"ܩ.ܛ\", \"ܩ.ܛ\", \"ܩ.ܛ\"],\n                    PM: [\"ܒ.ܛ\", \"ܒ.ܛ\", \"ܒ.ܛ\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"si-LK\": [\"si-LK\", \"default\", {\n            name: \"si-LK\",\n            englishName: \"Sinhala (Sri Lanka)\",\n            nativeName: \"සිංහල (ශ්‍රී ලංකා)\",\n            language: \"si\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    symbol: \"රු.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ඉරිදා\", \"සඳුදා\", \"අඟහරුවාදා\", \"බදාදා\", \"බ්‍රහස්පතින්දා\", \"සිකුරාදා\", \"සෙනසුරාදා\"],\n                        namesAbbr: [\"ඉරිදා\", \"සඳුදා\", \"කුජදා\", \"බුදදා\", \"ගුරුදා\", \"කිවිදා\", \"ශනිදා\"],\n                        namesShort: [\"ඉ\", \"ස\", \"අ\", \"බ\", \"බ්‍ර\", \"සි\", \"සෙ\"]\n                    },\n                    months: {\n                        names: [\"ජනවාරි\", \"පෙබරවාරි\", \"මාර්තු\", \"අ‌ප්‍රේල්\", \"මැයි\", \"ජූනි\", \"ජූලි\", \"අ‌ගෝස්තු\", \"සැප්තැම්බර්\", \"ඔක්තෝබර්\", \"නොවැම්බර්\", \"දෙසැම්බර්\", \"\"],\n                        namesAbbr: [\"ජන.\", \"පෙබ.\", \"මාර්තු.\", \"අප්‍රේල්.\", \"මැයි.\", \"ජූනි.\", \"ජූලි.\", \"අගෝ.\", \"සැප්.\", \"ඔක්.\", \"නොවැ.\", \"දෙසැ.\", \"\"]\n                    },\n                    AM: [\"පෙ.ව.\", \"පෙ.ව.\", \"පෙ.ව.\"],\n                    PM: [\"ප.ව.\", \"ප.ව.\", \"ප.ව.\"],\n                    eras: [{ \"name\": \"ක්‍රි.ව.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"yyyy MMMM' මස 'dd' වැනිදා 'dddd\",\n                        f: \"yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm tt\",\n                        F: \"yyyy MMMM' මස 'dd' වැනිදා 'dddd h:mm:ss tt\",\n                        Y: \"yyyy MMMM\"\n                    }\n                }\n            }\n        }],\n    \"iu-Cans-CA\": [\"iu-Cans-CA\", \"default\", {\n            name: \"iu-Cans-CA\",\n            englishName: \"Inuktitut (Syllabics, Canada)\",\n            nativeName: \"ᐃᓄᒃᑎᑐᑦ (ᑲᓇᑕᒥ)\",\n            language: \"iu-Cans\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"ᓈᑦᑏᖑᔭ\", \"ᓇᒡᒐᔾᔭᐅ\", \"ᐊᐃᑉᐱᖅ\", \"ᐱᖓᑦᓯᖅ\", \"ᓯᑕᒻᒥᖅ\", \"ᑕᓪᓕᕐᒥᖅ\", \"ᓯᕙᑖᕐᕕᒃ\"],\n                        namesAbbr: [\"ᓈᑦᑏ\", \"ᓇᒡᒐ\", \"ᐊᐃᑉᐱ\", \"ᐱᖓᑦᓯ\", \"ᓯᑕ\", \"ᑕᓪᓕ\", \"ᓯᕙᑖᕐᕕᒃ\"],\n                        namesShort: [\"ᓈ\", \"ᓇ\", \"ᐊ\", \"ᐱ\", \"ᓯ\", \"ᑕ\", \"ᓯ\"]\n                    },\n                    months: {\n                        names: [\"ᔮᓐᓄᐊᕆ\", \"ᕖᕝᕗᐊᕆ\", \"ᒫᑦᓯ\", \"ᐄᐳᕆ\", \"ᒪᐃ\", \"ᔫᓂ\", \"ᔪᓚᐃ\", \"ᐋᒡᒌᓯ\", \"ᓯᑎᐱᕆ\", \"ᐅᑐᐱᕆ\", \"ᓄᕕᐱᕆ\", \"ᑎᓯᐱᕆ\", \"\"],\n                        namesAbbr: [\"ᔮᓐᓄ\", \"ᕖᕝᕗ\", \"ᒫᑦᓯ\", \"ᐄᐳᕆ\", \"ᒪᐃ\", \"ᔫᓂ\", \"ᔪᓚᐃ\", \"ᐋᒡᒌ\", \"ᓯᑎᐱ\", \"ᐅᑐᐱ\", \"ᓄᕕᐱ\", \"ᑎᓯᐱ\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd,MMMM dd,yyyy\",\n                        f: \"dddd,MMMM dd,yyyy h:mm tt\",\n                        F: \"dddd,MMMM dd,yyyy h:mm:ss tt\",\n                        Y: \"MMMM,yyyy\"\n                    }\n                }\n            }\n        }],\n    \"am-ET\": [\"am-ET\", \"default\", {\n            name: \"am-ET\",\n            englishName: \"Amharic (Ethiopia)\",\n            nativeName: \"አማርኛ (ኢትዮጵያ)\",\n            language: \"am\",\n            numberFormat: {\n                decimals: 1,\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    decimals: 1,\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"ETB\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"እሑድ\", \"ሰኞ\", \"ማክሰኞ\", \"ረቡዕ\", \"ሐሙስ\", \"ዓርብ\", \"ቅዳሜ\"],\n                        namesAbbr: [\"እሑድ\", \"ሰኞ\", \"ማክሰ\", \"ረቡዕ\", \"ሐሙስ\", \"ዓርብ\", \"ቅዳሜ\"],\n                        namesShort: [\"እ\", \"ሰ\", \"ማ\", \"ረ\", \"ሐ\", \"ዓ\", \"ቅ\"]\n                    },\n                    months: {\n                        names: [\"ጃንዩወሪ\", \"ፌብሩወሪ\", \"ማርች\", \"ኤፕረል\", \"ሜይ\", \"ጁን\", \"ጁላይ\", \"ኦገስት\", \"ሴፕቴምበር\", \"ኦክተውበር\", \"ኖቬምበር\", \"ዲሴምበር\", \"\"],\n                        namesAbbr: [\"ጃንዩ\", \"ፌብሩ\", \"ማርች\", \"ኤፕረ\", \"ሜይ\", \"ጁን\", \"ጁላይ\", \"ኦገስ\", \"ሴፕቴ\", \"ኦክተ\", \"ኖቬም\", \"ዲሴም\", \"\"]\n                    },\n                    AM: [\"ጡዋት\", \"ጡዋት\", \"ጡዋት\"],\n                    PM: [\"ከሰዓት\", \"ከሰዓት\", \"ከሰዓት\"],\n                    eras: [{ \"name\": \"ዓመተ  ምሕረት\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd '፣' MMMM d 'ቀን' yyyy\",\n                        f: \"dddd '፣' MMMM d 'ቀን' yyyy h:mm tt\",\n                        F: \"dddd '፣' MMMM d 'ቀን' yyyy h:mm:ss tt\",\n                        M: \"MMMM d ቀን\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ne-NP\": [\"ne-NP\", \"default\", {\n            name: \"ne-NP\",\n            englishName: \"Nepali (Nepal)\",\n            nativeName: \"नेपाली (नेपाल)\",\n            language: \"ne\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"रु\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"आइतवार\", \"सोमवार\", \"मङ्गलवार\", \"बुधवार\", \"बिहीवार\", \"शुक्रवार\", \"शनिवार\"],\n                        namesAbbr: [\"आइत\", \"सोम\", \"मङ्गल\", \"बुध\", \"बिही\", \"शुक्र\", \"शनि\"],\n                        namesShort: [\"आ\", \"सो\", \"म\", \"बु\", \"बि\", \"शु\", \"श\"]\n                    },\n                    months: {\n                        names: [\"जनवरी\", \"फेब्रुअरी\", \"मार्च\", \"अप्रिल\", \"मे\", \"जून\", \"जुलाई\", \"अगस्त\", \"सेप्टेम्बर\", \"अक्टोबर\", \"नोभेम्बर\", \"डिसेम्बर\", \"\"],\n                        namesAbbr: [\"जन\", \"फेब\", \"मार्च\", \"अप्रिल\", \"मे\", \"जून\", \"जुलाई\", \"अग\", \"सेप्ट\", \"अक्ट\", \"नोभ\", \"डिस\", \"\"]\n                    },\n                    AM: [\"विहानी\", \"विहानी\", \"विहानी\"],\n                    PM: [\"बेलुकी\", \"बेलुकी\", \"बेलुकी\"],\n                    eras: [{ \"name\": \"a.d.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        Y: \"MMMM,yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fy-NL\": [\"fy-NL\", \"default\", {\n            name: \"fy-NL\",\n            englishName: \"Frisian (Netherlands)\",\n            nativeName: \"Frysk (Nederlân)\",\n            language: \"fy\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Snein\", \"Moandei\", \"Tiisdei\", \"Woansdei\", \"Tongersdei\", \"Freed\", \"Sneon\"],\n                        namesAbbr: [\"Sn\", \"Mo\", \"Ti\", \"Wo\", \"To\", \"Fr\", \"Sn\"],\n                        namesShort: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n                    },\n                    months: {\n                        names: [\"jannewaris\", \"febrewaris\", \"maart\", \"april\", \"maaie\", \"juny\", \"july\", \"augustus\", \"septimber\", \"oktober\", \"novimber\", \"desimber\", \"\"],\n                        namesAbbr: [\"jann\", \"febr\", \"mrt\", \"apr\", \"maaie\", \"jun\", \"jul\", \"aug\", \"sept\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d-M-yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd d MMMM yyyy H:mm\",\n                        F: \"dddd d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ps-AF\": [\"ps-AF\", \"default\", {\n            name: \"ps-AF\",\n            englishName: \"Pashto (Afghanistan)\",\n            nativeName: \"پښتو (افغانستان)\",\n            language: \"ps\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                \",\": \"،\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"%n-\", \"%n\"],\n                    \",\": \"،\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$n\"],\n                    \",\": \"٬\",\n                    \".\": \"٫\",\n                    symbol: \"؋\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        f: \"dd/MM/yyyy h:mm tt\",\n                        F: \"dd/MM/yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesAbbr: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesShort: [\"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګا ښزمرى\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"لنڈ ۍ\", \"مرغومى\", \"\"],\n                        namesAbbr: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګا ښ\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"لنڈ ۍ\", \"مرغومى\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"ل.ه\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy, dd, MMMM, dddd\",\n                        f: \"yyyy, dd, MMMM, dddd h:mm tt\",\n                        F: \"yyyy, dd, MMMM, dddd h:mm:ss tt\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fil-PH\": [\"fil-PH\", \"default\", {\n            name: \"fil-PH\",\n            englishName: \"Filipino (Philippines)\",\n            nativeName: \"Filipino (Pilipinas)\",\n            language: \"fil\",\n            numberFormat: {\n                currency: {\n                    symbol: \"PhP\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Linggo\", \"Lunes\", \"Martes\", \"Mierkoles\", \"Huebes\", \"Biernes\", \"Sabado\"],\n                        namesAbbr: [\"Lin\", \"Lun\", \"Mar\", \"Mier\", \"Hueb\", \"Bier\", \"Saba\"],\n                        namesShort: [\"L\", \"L\", \"M\", \"M\", \"H\", \"B\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Enero\", \"Pebrero\", \"Marso\", \"Abril\", \"Mayo\", \"Hunyo\", \"Hulyo\", \"Agosto\", \"Septyembre\", \"Oktubre\", \"Nobyembre\", \"Disyembre\", \"\"],\n                        namesAbbr: [\"En\", \"Peb\", \"Mar\", \"Abr\", \"Mayo\", \"Hun\", \"Hul\", \"Agos\", \"Sept\", \"Okt\", \"Nob\", \"Dis\", \"\"]\n                    },\n                    eras: [{ \"name\": \"Anno Domini\", \"start\": null, \"offset\": 0 }],\n                }\n            }\n        }],\n    \"dv-MV\": [\"dv-MV\", \"default\", {\n            name: \"dv-MV\",\n            englishName: \"Divehi (Maldives)\",\n            nativeName: \"ދިވެހިބަސް (ދިވެހި ރާއްޖެ)\",\n            language: \"dv\",\n            isRTL: true,\n            numberFormat: {\n                currency: {\n                    pattern: [\"n $-\", \"n $\"],\n                    symbol: \"ރ.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Hijri\",\n                    days: {\n                        names: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesAbbr: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesShort: [\"އާ\", \"ހޯ\", \"އަ\", \"ބު\", \"ބު\", \"ހު\", \"ހޮ\"]\n                    },\n                    months: {\n                        names: [\"މުޙައްރަމް\", \"ޞަފަރު\", \"ރަބީޢުލްއައްވަލް\", \"ރަބީޢުލްއާޚިރު\", \"ޖުމާދަލްއޫލާ\", \"ޖުމާދަލްއާޚިރާ\", \"ރަޖަބް\", \"ޝަޢްބާން\", \"ރަމަޟާން\", \"ޝައްވާލް\", \"ޛުލްޤަޢިދާ\", \"ޛުލްޙިއްޖާ\", \"\"],\n                        namesAbbr: [\"މުޙައްރަމް\", \"ޞަފަރު\", \"ރަބީޢުލްއައްވަލް\", \"ރަބީޢުލްއާޚިރު\", \"ޖުމާދަލްއޫލާ\", \"ޖުމާދަލްއާޚިރާ\", \"ރަޖަބް\", \"ޝަޢްބާން\", \"ރަމަޟާން\", \"ޝައްވާލް\", \"ޛުލްޤަޢިދާ\", \"ޛުލްޙިއްޖާ\", \"\"]\n                    },\n                    AM: [\"މކ\", \"މކ\", \"މކ\"],\n                    PM: [\"މފ\", \"މފ\", \"މފ\"],\n                    eras: [{ \"name\": \"ހިޖްރީ\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd/MM/yyyy HH:mm\",\n                        F: \"dd/MM/yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_Localized: {\n                    days: {\n                        names: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesAbbr: [\"އާދީއްތަ\", \"ހޯމަ\", \"އަންގާރަ\", \"ބުދަ\", \"ބުރާސްފަތި\", \"ހުކުރު\", \"ހޮނިހިރު\"],\n                        namesShort: [\"އާ\", \"ހޯ\", \"އަ\", \"ބު\", \"ބު\", \"ހު\", \"ހޮ\"]\n                    },\n                    months: {\n                        names: [\"ޖަނަވަރީ\", \"ފެބްރުއަރީ\", \"މާޗް\", \"އޭޕްރިލް\", \"މެއި\", \"ޖޫން\", \"ޖުލައި\", \"އޯގަސްޓް\", \"ސެޕްޓެމްބަރ\", \"އޮކްޓޯބަރ\", \"ނޮވެމްބަރ\", \"ޑިސެމްބަރ\", \"\"],\n                        namesAbbr: [\"ޖަނަވަރީ\", \"ފެބްރުއަރީ\", \"މާޗް\", \"އޭޕްރިލް\", \"މެއި\", \"ޖޫން\", \"ޖުލައި\", \"އޯގަސްޓް\", \"ސެޕްޓެމްބަރ\", \"އޮކްޓޯބަރ\", \"ނޮވެމްބަރ\", \"ޑިސެމްބަރ\", \"\"]\n                    },\n                    AM: [\"މކ\", \"މކ\", \"މކ\"],\n                    PM: [\"މފ\", \"މފ\", \"މފ\"],\n                    eras: [{ \"name\": \"މީލާދީ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"ddd, yyyy MMMM dd\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"ddd, yyyy MMMM dd HH:mm\",\n                        F: \"ddd, yyyy MMMM dd HH:mm:ss\",\n                        Y: \"yyyy, MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ha-Latn-NG\": [\"ha-Latn-NG\", \"default\", {\n            name: \"ha-Latn-NG\",\n            englishName: \"Hausa (Latin, Nigeria)\",\n            nativeName: \"Hausa (Nigeria)\",\n            language: \"ha-Latn\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"N\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Lahadi\", \"Litinin\", \"Talata\", \"Laraba\", \"Alhamis\", \"Juma'a\", \"Asabar\"],\n                        namesAbbr: [\"Lah\", \"Lit\", \"Tal\", \"Lar\", \"Alh\", \"Jum\", \"Asa\"],\n                        namesShort: [\"L\", \"L\", \"T\", \"L\", \"A\", \"J\", \"A\"]\n                    },\n                    months: {\n                        names: [\"Januwaru\", \"Febreru\", \"Maris\", \"Afrilu\", \"Mayu\", \"Yuni\", \"Yuli\", \"Agusta\", \"Satumba\", \"Oktocba\", \"Nuwamba\", \"Disamba\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Afr\", \"May\", \"Yun\", \"Yul\", \"Agu\", \"Sat\", \"Okt\", \"Nuw\", \"Dis\", \"\"]\n                    },\n                    AM: [\"Safe\", \"safe\", \"SAFE\"],\n                    PM: [\"Yamma\", \"yamma\", \"YAMMA\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"yo-NG\": [\"yo-NG\", \"default\", {\n            name: \"yo-NG\",\n            englishName: \"Yoruba (Nigeria)\",\n            nativeName: \"Yoruba (Nigeria)\",\n            language: \"yo\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"N\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Aiku\", \"Aje\", \"Isegun\", \"Ojo'ru\", \"Ojo'bo\", \"Eti\", \"Abameta\"],\n                        namesAbbr: [\"Aik\", \"Aje\", \"Ise\", \"Ojo\", \"Ojo\", \"Eti\", \"Aba\"],\n                        namesShort: [\"A\", \"A\", \"I\", \"O\", \"O\", \"E\", \"A\"]\n                    },\n                    months: {\n                        names: [\"Osu kinni\", \"Osu keji\", \"Osu keta\", \"Osu kerin\", \"Osu karun\", \"Osu kefa\", \"Osu keje\", \"Osu kejo\", \"Osu kesan\", \"Osu kewa\", \"Osu kokanla\", \"Osu keresi\", \"\"],\n                        namesAbbr: [\"kin.\", \"kej.\", \"ket.\", \"ker.\", \"kar.\", \"kef.\", \"kej.\", \"kej.\", \"kes.\", \"kew.\", \"kok.\", \"ker.\", \"\"]\n                    },\n                    AM: [\"Owuro\", \"owuro\", \"OWURO\"],\n                    PM: [\"Ale\", \"ale\", \"ALE\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"quz-BO\": [\"quz-BO\", \"default\", {\n            name: \"quz-BO\",\n            englishName: \"Quechua (Bolivia)\",\n            nativeName: \"runasimi (Qullasuyu)\",\n            language: \"quz\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"$b\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"intichaw\", \"killachaw\", \"atipachaw\", \"quyllurchaw\", \"Ch' askachaw\", \"Illapachaw\", \"k'uychichaw\"],\n                        namesAbbr: [\"int\", \"kil\", \"ati\", \"quy\", \"Ch'\", \"Ill\", \"k'u\"],\n                        namesShort: [\"d\", \"k\", \"a\", \"m\", \"h\", \"b\", \"k\"]\n                    },\n                    months: {\n                        names: [\"Qulla puquy\", \"Hatun puquy\", \"Pauqar waray\", \"ayriwa\", \"Aymuray\", \"Inti raymi\", \"Anta Sitwa\", \"Qhapaq Sitwa\", \"Uma raymi\", \"Kantaray\", \"Ayamarq'a\", \"Kapaq Raymi\", \"\"],\n                        namesAbbr: [\"Qul\", \"Hat\", \"Pau\", \"ayr\", \"Aym\", \"Int\", \"Ant\", \"Qha\", \"Uma\", \"Kan\", \"Aya\", \"Kap\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"nso-ZA\": [\"nso-ZA\", \"default\", {\n            name: \"nso-ZA\",\n            englishName: \"Sesotho sa Leboa (South Africa)\",\n            nativeName: \"Sesotho sa Leboa (Afrika Borwa)\",\n            language: \"nso\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Lamorena\", \"Mošupologo\", \"Labobedi\", \"Laboraro\", \"Labone\", \"Labohlano\", \"Mokibelo\"],\n                        namesAbbr: [\"Lam\", \"Moš\", \"Lbb\", \"Lbr\", \"Lbn\", \"Lbh\", \"Mok\"],\n                        namesShort: [\"L\", \"M\", \"L\", \"L\", \"L\", \"L\", \"M\"]\n                    },\n                    months: {\n                        names: [\"Pherekgong\", \"Hlakola\", \"Mopitlo\", \"Moranang\", \"Mosegamanye\", \"Ngoatobošego\", \"Phuphu\", \"Phato\", \"Lewedi\", \"Diphalana\", \"Dibatsela\", \"Manthole\", \"\"],\n                        namesAbbr: [\"Pher\", \"Hlak\", \"Mop\", \"Mor\", \"Mos\", \"Ngwat\", \"Phup\", \"Phat\", \"Lew\", \"Dip\", \"Dib\", \"Man\", \"\"]\n                    },\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ba-RU\": [\"ba-RU\", \"default\", {\n            name: \"ba-RU\",\n            englishName: \"Bashkir (Russia)\",\n            nativeName: \"Башҡорт (Россия)\",\n            language: \"ba\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"һ.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Йәкшәмбе\", \"Дүшәмбе\", \"Шишәмбе\", \"Шаршамбы\", \"Кесаҙна\", \"Йома\", \"Шәмбе\"],\n                        namesAbbr: [\"Йш\", \"Дш\", \"Шш\", \"Шр\", \"Кс\", \"Йм\", \"Шб\"],\n                        namesShort: [\"Йш\", \"Дш\", \"Шш\", \"Шр\", \"Кс\", \"Йм\", \"Шб\"]\n                    },\n                    months: {\n                        names: [\"ғинуар\", \"февраль\", \"март\", \"апрель\", \"май\", \"июнь\", \"июль\", \"август\", \"сентябрь\", \"октябрь\", \"ноябрь\", \"декабрь\", \"\"],\n                        namesAbbr: [\"ғин\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"d MMMM yyyy 'й'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy 'й' H:mm\",\n                        F: \"d MMMM yyyy 'й' H:mm:ss\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"lb-LU\": [\"lb-LU\", \"default\", {\n            name: \"lb-LU\",\n            englishName: \"Luxembourgish (Luxembourg)\",\n            nativeName: \"Lëtzebuergesch (Luxembourg)\",\n            language: \"lb\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonndeg\", \"Méindeg\", \"Dënschdeg\", \"Mëttwoch\", \"Donneschdeg\", \"Freideg\", \"Samschdeg\"],\n                        namesAbbr: [\"Son\", \"Méi\", \"Dën\", \"Mët\", \"Don\", \"Fre\", \"Sam\"],\n                        namesShort: [\"So\", \"Mé\", \"Dë\", \"Më\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januar\", \"Februar\", \"Mäerz\", \"Abrëll\", \"Mee\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mäe\", \"Abr\", \"Mee\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"kl-GL\": [\"kl-GL\", \"default\", {\n            name: \"kl-GL\",\n            englishName: \"Greenlandic (Greenland)\",\n            nativeName: \"kalaallisut (Kalaallit Nunaat)\",\n            language: \"kl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 0],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sapaat\", \"ataasinngorneq\", \"marlunngorneq\", \"pingasunngorneq\", \"sisamanngorneq\", \"tallimanngorneq\", \"arfininngorneq\"],\n                        namesAbbr: [\"sap\", \"ata\", \"mar\", \"ping\", \"sis\", \"tal\", \"arf\"],\n                        namesShort: [\"sa\", \"at\", \"ma\", \"pi\", \"si\", \"ta\", \"ar\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"martsi\", \"apriili\", \"maaji\", \"juni\", \"juli\", \"aggusti\", \"septembari\", \"oktobari\", \"novembari\", \"decembari\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ig-NG\": [\"ig-NG\", \"default\", {\n            name: \"ig-NG\",\n            englishName: \"Igbo (Nigeria)\",\n            nativeName: \"Igbo (Nigeria)\",\n            language: \"ig\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"N\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Aiku\", \"Aje\", \"Isegun\", \"Ojo'ru\", \"Ojo'bo\", \"Eti\", \"Abameta\"],\n                        namesAbbr: [\"Aik\", \"Aje\", \"Ise\", \"Ojo\", \"Ojo\", \"Eti\", \"Aba\"],\n                        namesShort: [\"A\", \"A\", \"I\", \"O\", \"O\", \"E\", \"A\"]\n                    },\n                    months: {\n                        names: [\"Onwa mbu\", \"Onwa ibua\", \"Onwa ato\", \"Onwa ano\", \"Onwa ise\", \"Onwa isi\", \"Onwa asa\", \"Onwa asato\", \"Onwa itolu\", \"Onwa iri\", \"Onwa iri n'ofu\", \"Onwa iri n'ibua\", \"\"],\n                        namesAbbr: [\"mbu.\", \"ibu.\", \"ato.\", \"ano.\", \"ise\", \"isi\", \"asa\", \"asa.\", \"ito.\", \"iri.\", \"n'of.\", \"n'ib.\", \"\"]\n                    },\n                    AM: [\"Ututu\", \"ututu\", \"UTUTU\"],\n                    PM: [\"Efifie\", \"efifie\", \"EFIFIE\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ii-CN\": [\"ii-CN\", \"default\", {\n            name: \"ii-CN\",\n            englishName: \"Yi (PRC)\",\n            nativeName: \"ꆈꌠꁱꂷ (ꍏꉸꏓꂱꇭꉼꇩ)\",\n            language: \"ii\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"ꑭꆏꑍ\", \"ꆏꊂ꒔\", \"ꆏꊂꑍ\", \"ꆏꊂꌕ\", \"ꆏꊂꇖ\", \"ꆏꊂꉬ\", \"ꆏꊂꃘ\"],\n                        namesAbbr: [\"ꑭꆏ\", \"ꆏ꒔\", \"ꆏꑍ\", \"ꆏꌕ\", \"ꆏꇖ\", \"ꆏꉬ\", \"ꆏꃘ\"],\n                        namesShort: [\"ꆏ\", \"꒔\", \"ꑍ\", \"ꌕ\", \"ꇖ\", \"ꉬ\", \"ꃘ\"]\n                    },\n                    months: {\n                        names: [\"ꋍꆪ\", \"ꑍꆪ\", \"ꌕꆪ\", \"ꇖꆪ\", \"ꉬꆪ\", \"ꃘꆪ\", \"ꏃꆪ\", \"ꉆꆪ\", \"ꈬꆪ\", \"ꊰꆪ\", \"ꊯꊪꆪ\", \"ꊰꑋꆪ\", \"\"],\n                        namesAbbr: [\"ꋍꆪ\", \"ꑍꆪ\", \"ꌕꆪ\", \"ꇖꆪ\", \"ꉬꆪ\", \"ꃘꆪ\", \"ꏃꆪ\", \"ꉆꆪ\", \"ꈬꆪ\", \"ꊰꆪ\", \"ꊯꊪꆪ\", \"ꊰꑋꆪ\", \"\"]\n                    },\n                    AM: [\"ꂵꆪꈌꈐ\", \"ꂵꆪꈌꈐ\", \"ꂵꆪꈌꈐ\"],\n                    PM: [\"ꂵꆪꈌꉈ\", \"ꂵꆪꈌꉈ\", \"ꂵꆪꈌꉈ\"],\n                    eras: [{ \"name\": \"ꇬꑼ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'ꈎ' M'ꆪ' d'ꑍ'\",\n                        t: \"tt h:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'ꈎ' M'ꆪ' d'ꑍ' tt h:mm\",\n                        F: \"yyyy'ꈎ' M'ꆪ' d'ꑍ' H:mm:ss\",\n                        M: \"M'ꆪ' d'ꑍ'\",\n                        Y: \"yyyy'ꈎ' M'ꆪ'\"\n                    }\n                }\n            }\n        }],\n    \"arn-CL\": [\"arn-CL\", \"default\", {\n            name: \"arn-CL\",\n            englishName: \"Mapudungun (Chile)\",\n            nativeName: \"Mapudungun (Chile)\",\n            language: \"arn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"moh-CA\": [\"moh-CA\", \"default\", {\n            name: \"moh-CA\",\n            englishName: \"Mohawk (Mohawk)\",\n            nativeName: \"Kanien'kéha\",\n            language: \"moh\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Awentatokentì:ke\", \"Awentataón'ke\", \"Ratironhia'kehronòn:ke\", \"Soséhne\", \"Okaristiiáhne\", \"Ronwaia'tanentaktonhne\", \"Entákta\"],\n                        namesShort: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Tsothohrkó:Wa\", \"Enniska\", \"Enniskó:Wa\", \"Onerahtókha\", \"Onerahtohkó:Wa\", \"Ohiari:Ha\", \"Ohiarihkó:Wa\", \"Seskéha\", \"Seskehkó:Wa\", \"Kenténha\", \"Kentenhkó:Wa\", \"Tsothóhrha\", \"\"]\n                    }\n                }\n            }\n        }],\n    \"br-FR\": [\"br-FR\", \"default\", {\n            name: \"br-FR\",\n            englishName: \"Breton (France)\",\n            nativeName: \"brezhoneg (Frañs)\",\n            language: \"br\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sul\", \"Lun\", \"Meurzh\", \"Merc'her\", \"Yaou\", \"Gwener\", \"Sadorn\"],\n                        namesAbbr: [\"Sul\", \"Lun\", \"Meu.\", \"Mer.\", \"Yaou\", \"Gwe.\", \"Sad.\"],\n                        namesShort: [\"Su\", \"Lu\", \"Mz\", \"Mc\", \"Ya\", \"Gw\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Genver\", \"C'hwevrer\", \"Meurzh\", \"Ebrel\", \"Mae\", \"Mezheven\", \"Gouere\", \"Eost\", \"Gwengolo\", \"Here\", \"Du\", \"Kerzu\", \"\"],\n                        namesAbbr: [\"Gen.\", \"C'hwe.\", \"Meur.\", \"Ebr.\", \"Mae\", \"Mezh.\", \"Goue.\", \"Eost\", \"Gwen.\", \"Here\", \"Du\", \"Kzu\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"g. J.-K.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ug-CN\": [\"ug-CN\", \"default\", {\n            name: \"ug-CN\",\n            englishName: \"Uyghur (PRC)\",\n            nativeName: \"ئۇيغۇرچە (جۇڭخۇا خەلق جۇمھۇرىيىتى)\",\n            language: \"ug\",\n            isRTL: true,\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"يەكشەنبە\", \"دۈشەنبە\", \"سەيشەنبە\", \"چارشەنبە\", \"پەيشەنبە\", \"جۈمە\", \"شەنبە\"],\n                        namesAbbr: [\"يە\", \"دۈ\", \"سە\", \"چا\", \"پە\", \"جۈ\", \"شە\"],\n                        namesShort: [\"ي\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"1-ئاي\", \"2-ئاي\", \"3-ئاي\", \"4-ئاي\", \"5-ئاي\", \"6-ئاي\", \"7-ئاي\", \"8-ئاي\", \"9-ئاي\", \"10-ئاي\", \"11-ئاي\", \"12-ئاي\", \"\"],\n                        namesAbbr: [\"1-ئاي\", \"2-ئاي\", \"3-ئاي\", \"4-ئاي\", \"5-ئاي\", \"6-ئاي\", \"7-ئاي\", \"8-ئاي\", \"9-ئاي\", \"10-ئاي\", \"11-ئاي\", \"12-ئاي\", \"\"]\n                    },\n                    AM: [\"چۈشتىن بۇرۇن\", \"چۈشتىن بۇرۇن\", \"چۈشتىن بۇرۇن\"],\n                    PM: [\"چۈشتىن كېيىن\", \"چۈشتىن كېيىن\", \"چۈشتىن كېيىن\"],\n                    eras: [{ \"name\": \"مىلادى\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-M-d\",\n                        D: \"yyyy-'يىلى' MMMM d-'كۈنى،'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy-'يىلى' MMMM d-'كۈنى،' H:mm\",\n                        F: \"yyyy-'يىلى' MMMM d-'كۈنى،' H:mm:ss\",\n                        M: \"MMMM d'-كۈنى'\",\n                        Y: \"yyyy-'يىلى' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"mi-NZ\": [\"mi-NZ\", \"default\", {\n            name: \"mi-NZ\",\n            englishName: \"Maori (New Zealand)\",\n            nativeName: \"Reo Māori (Aotearoa)\",\n            language: \"mi\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"-$n\", \"$n\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Rātapu\", \"Rāhina\", \"Rātū\", \"Rāapa\", \"Rāpare\", \"Rāmere\", \"Rāhoroi\"],\n                        namesAbbr: [\"Ta\", \"Hi\", \"Tū\", \"Apa\", \"Pa\", \"Me\", \"Ho\"],\n                        namesShort: [\"Ta\", \"Hi\", \"Tū\", \"Aa\", \"Pa\", \"Me\", \"Ho\"]\n                    },\n                    months: {\n                        names: [\"Kohi-tātea\", \"Hui-tanguru\", \"Poutū-te-rangi\", \"Paenga-whāwhā\", \"Haratua\", \"Pipiri\", \"Hōngongoi\", \"Here-turi-kōkā\", \"Mahuru\", \"Whiringa-ā-nuku\", \"Whiringa-ā-rangi\", \"Hakihea\", \"\"],\n                        namesAbbr: [\"Kohi\", \"Hui\", \"Pou\", \"Pae\", \"Hara\", \"Pipi\", \"Hōngo\", \"Here\", \"Mahu\", \"Nuku\", \"Rangi\", \"Haki\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd MMMM, yyyy\",\n                        f: \"dddd, dd MMMM, yyyy h:mm tt\",\n                        F: \"dddd, dd MMMM, yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM, yy\"\n                    }\n                }\n            }\n        }],\n    \"oc-FR\": [\"oc-FR\", \"default\", {\n            name: \"oc-FR\",\n            englishName: \"Occitan (France)\",\n            nativeName: \"Occitan (França)\",\n            language: \"oc\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimenge\", \"diluns\", \"dimars\", \"dimècres\", \"dijòus\", \"divendres\", \"dissabte\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mèc.\", \"jòu.\", \"ven.\", \"sab.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"mè\", \"jò\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"genier\", \"febrier\", \"març\", \"abril\", \"mai\", \"junh\", \"julh\", \"agost\", \"setembre\", \"octobre\", \"novembre\", \"desembre\", \"\"],\n                        namesAbbr: [\"gen.\", \"feb.\", \"mar.\", \"abr.\", \"mai.\", \"jun.\", \"jul.\", \"ag.\", \"set.\", \"oct.\", \"nov.\", \"des.\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"de genier\", \"de febrier\", \"de març\", \"d'abril\", \"de mai\", \"de junh\", \"de julh\", \"d'agost\", \"de setembre\", \"d'octobre\", \"de novembre\", \"de desembre\", \"\"],\n                        namesAbbr: [\"gen.\", \"feb.\", \"mar.\", \"abr.\", \"mai.\", \"jun.\", \"jul.\", \"ag.\", \"set.\", \"oct.\", \"nov.\", \"des.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"après Jèsus-Crist\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd,' lo 'd MMMM' de 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd,' lo 'd MMMM' de 'yyyy HH:mm\",\n                        F: \"dddd,' lo 'd MMMM' de 'yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"co-FR\": [\"co-FR\", \"default\", {\n            name: \"co-FR\",\n            englishName: \"Corsican (France)\",\n            nativeName: \"Corsu (France)\",\n            language: \"co\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dumenica\", \"luni\", \"marti\", \"mercuri\", \"ghjovi\", \"venderi\", \"sabbatu\"],\n                        namesAbbr: [\"dum.\", \"lun.\", \"mar.\", \"mer.\", \"ghj.\", \"ven.\", \"sab.\"],\n                        namesShort: [\"du\", \"lu\", \"ma\", \"me\", \"gh\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"ghjennaghju\", \"ferraghju\", \"marzu\", \"aprile\", \"maghju\", \"ghjunghju\", \"lugliu\", \"aostu\", \"settembre\", \"ottobre\", \"nuvembre\", \"dicembre\", \"\"],\n                        namesAbbr: [\"ghje\", \"ferr\", \"marz\", \"apri\", \"magh\", \"ghju\", \"lugl\", \"aost\", \"sett\", \"otto\", \"nuve\", \"dice\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"dopu J-C\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"gsw-FR\": [\"gsw-FR\", \"default\", {\n            name: \"gsw-FR\",\n            englishName: \"Alsatian (France)\",\n            nativeName: \"Elsässisch (Frànkrisch)\",\n            language: \"gsw\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sundàà\", \"Mondàà\", \"Dienschdàà\", \"Mittwuch\", \"Dunnerschdàà\", \"Fridàà\", \"Sàmschdàà\"],\n                        namesAbbr: [\"Su.\", \"Mo.\", \"Di.\", \"Mi.\", \"Du.\", \"Fr.\", \"Sà.\"],\n                        namesShort: [\"Su\", \"Mo\", \"Di\", \"Mi\", \"Du\", \"Fr\", \"Sà\"]\n                    },\n                    months: {\n                        names: [\"Jänner\", \"Feverje\", \"März\", \"Àpril\", \"Mai\", \"Jüni\", \"Jüli\", \"Augscht\", \"September\", \"Oktower\", \"Nowember\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jän.\", \"Fev.\", \"März\", \"Apr.\", \"Mai\", \"Jüni\", \"Jüli\", \"Aug.\", \"Sept.\", \"Okt.\", \"Now.\", \"Dez.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"Vor J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sah-RU\": [\"sah-RU\", \"default\", {\n            name: \"sah-RU\",\n            englishName: \"Yakut (Russia)\",\n            nativeName: \"саха (Россия)\",\n            language: \"sah\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"с.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"баскыһыанньа\", \"бэнидиэнньик\", \"оптуорунньук\", \"сэрэдэ\", \"чэппиэр\", \"бээтинсэ\", \"субуота\"],\n                        namesAbbr: [\"Бс\", \"Бн\", \"Оп\", \"Ср\", \"Чп\", \"Бт\", \"Сб\"],\n                        namesShort: [\"Бс\", \"Бн\", \"Оп\", \"Ср\", \"Чп\", \"Бт\", \"Сб\"]\n                    },\n                    months: {\n                        names: [\"Тохсунньу\", \"Олунньу\", \"Кулун тутар\", \"Муус устар\", \"Ыам ыйа\", \"Бэс ыйа\", \"От ыйа\", \"Атырдьах ыйа\", \"Балаҕан ыйа\", \"Алтынньы\", \"Сэтинньи\", \"Ахсынньы\", \"\"],\n                        namesAbbr: [\"тхс\", \"олн\", \"кул\", \"мст\", \"ыам\", \"бэс\", \"отй\", \"атр\", \"блҕ\", \"алт\", \"стн\", \"ахс\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"тохсунньу\", \"олунньу\", \"кулун тутар\", \"муус устар\", \"ыам ыйын\", \"бэс ыйын\", \"от ыйын\", \"атырдьах ыйын\", \"балаҕан ыйын\", \"алтынньы\", \"сэтинньи\", \"ахсынньы\", \"\"],\n                        namesAbbr: [\"тхс\", \"олн\", \"кул\", \"мст\", \"ыам\", \"бэс\", \"отй\", \"атр\", \"блҕ\", \"алт\", \"стн\", \"ахс\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"MM.dd.yyyy\",\n                        D: \"MMMM d yyyy 'с.'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"MMMM d yyyy 'с.' H:mm\",\n                        F: \"MMMM d yyyy 'с.' H:mm:ss\",\n                        Y: \"MMMM yyyy 'с.'\"\n                    }\n                }\n            }\n        }],\n    \"qut-GT\": [\"qut-GT\", \"default\", {\n            name: \"qut-GT\",\n            englishName: \"K'iche (Guatemala)\",\n            nativeName: \"K'iche (Guatemala)\",\n            language: \"qut\",\n            numberFormat: {\n                currency: {\n                    symbol: \"Q\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"juq'ij\", \"kaq'ij\", \"oxq'ij\", \"kajq'ij\", \"joq'ij\", \"waqq'ij\", \"wuqq'ij\"],\n                        namesAbbr: [\"juq\", \"kaq\", \"oxq\", \"kajq\", \"joq\", \"waqq\", \"wuqq\"],\n                        namesShort: [\"ju\", \"ka\", \"ox\", \"ka\", \"jo\", \"wa\", \"wu\"]\n                    },\n                    months: {\n                        names: [\"nab'e ik'\", \"ukab' ik'\", \"rox ik'\", \"ukaj ik'\", \"uro' ik'\", \"uwaq ik'\", \"uwuq ik'\", \"uwajxaq ik'\", \"ub'elej ik'\", \"ulaj ik'\", \"ujulaj ik'\", \"ukab'laj ik'\", \"\"],\n                        namesAbbr: [\"nab'e\", \"ukab\", \"rox\", \"ukaj\", \"uro\", \"uwaq\", \"uwuq\", \"uwajxaq\", \"ub'elej\", \"ulaj\", \"ujulaj\", \"ukab'laj\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"rw-RW\": [\"rw-RW\", \"default\", {\n            name: \"rw-RW\",\n            englishName: \"Kinyarwanda (Rwanda)\",\n            nativeName: \"Kinyarwanda (Rwanda)\",\n            language: \"rw\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"RWF\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Ku wa mbere\", \"Ku wa kabiri\", \"Ku wa gatatu\", \"Ku wa kane\", \"Ku wa gatanu\", \"Ku wa gatandatu\", \"Ku cyumweru\"],\n                        namesAbbr: [\"mbe.\", \"kab.\", \"gat.\", \"kan.\", \"gat.\", \"gat.\", \"cyu.\"],\n                        namesShort: [\"mb\", \"ka\", \"ga\", \"ka\", \"ga\", \"ga\", \"cy\"]\n                    },\n                    months: {\n                        names: [\"Mutarama\", \"Gashyantare\", \"Werurwe\", \"Mata\", \"Gicurasi\", \"Kamena\", \"Nyakanga\", \"Kanama\", \"Nzeli\", \"Ukwakira\", \"Ugushyingo\", \"Ukuboza\", \"\"],\n                        namesAbbr: [\"Mut\", \"Gas\", \"Wer\", \"Mat\", \"Gic\", \"Kam\", \"Nya\", \"Kan\", \"Nze\", \"Ukwa\", \"Ugu\", \"Uku\", \"\"]\n                    },\n                    AM: [\"saa moya z.m.\", \"saa moya z.m.\", \"SAA MOYA Z.M.\"],\n                    PM: [\"saa moya z.n.\", \"saa moya z.n.\", \"SAA MOYA Z.N.\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                }\n            }\n        }],\n    \"wo-SN\": [\"wo-SN\", \"default\", {\n            name: \"wo-SN\",\n            englishName: \"Wolof (Senegal)\",\n            nativeName: \"Wolof (Sénégal)\",\n            language: \"wo\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"XOF\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"prs-AF\": [\"prs-AF\", \"default\", {\n            name: \"prs-AF\",\n            englishName: \"Dari (Afghanistan)\",\n            nativeName: \"درى (افغانستان)\",\n            language: \"prs\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"%n-\", \"%n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$n\"],\n                    symbol: \"؋\"\n                }\n            },\n            calendars: {\n                standard: {\n                    name: \"Hijri\",\n                    firstDay: 5,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        f: \"dd/MM/yyyy h:mm tt\",\n                        F: \"dd/MM/yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_Localized: {\n                    firstDay: 5,\n                    days: {\n                        names: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesAbbr: [\"یکشنبه\", \"دوشنبه\", \"سه‌شنبه\", \"چهارشنبه\", \"پنجشنبه\", \"جمعه\", \"شنبه\"],\n                        namesShort: [\"ی\", \"د\", \"س\", \"چ\", \"پ\", \"ج\", \"ش\"]\n                    },\n                    months: {\n                        names: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګاښ\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"ليندۍ\", \"مرغومى\", \"\"],\n                        namesAbbr: [\"سلواغه\", \"كب\", \"ورى\", \"غويى\", \"غبرګولى\", \"چنګاښ\", \"زمرى\", \"وږى\", \"تله\", \"لړم\", \"ليندۍ\", \"مرغومى\", \"\"]\n                    },\n                    AM: [\"غ.م\", \"غ.م\", \"غ.م\"],\n                    PM: [\"غ.و\", \"غ.و\", \"غ.و\"],\n                    eras: [{ \"name\": \"ل.ه\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy, dd, MMMM, dddd\",\n                        f: \"yyyy, dd, MMMM, dddd h:mm tt\",\n                        F: \"yyyy, dd, MMMM, dddd h:mm:ss tt\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"gd-GB\": [\"gd-GB\", \"default\", {\n            name: \"gd-GB\",\n            englishName: \"Scottish Gaelic (United Kingdom)\",\n            nativeName: \"Gàidhlig (An Rìoghachd Aonaichte)\",\n            language: \"gd\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"£\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Didòmhnaich\", \"Diluain\", \"Dimàirt\", \"Diciadain\", \"Diardaoin\", \"Dihaoine\", \"Disathairne\"],\n                        namesAbbr: [\"Dòm\", \"Lua\", \"Mài\", \"Cia\", \"Ard\", \"Hao\", \"Sat\"],\n                        namesShort: [\"D\", \"L\", \"M\", \"C\", \"A\", \"H\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Am Faoilleach\", \"An Gearran\", \"Am Màrt\", \"An Giblean\", \"An Cèitean\", \"An t-Ògmhios\", \"An t-Iuchar\", \"An Lùnastal\", \"An t-Sultain\", \"An Dàmhair\", \"An t-Samhain\", \"An Dùbhlachd\", \"\"],\n                        namesAbbr: [\"Fao\", \"Gea\", \"Màr\", \"Gib\", \"Cèi\", \"Ògm\", \"Iuc\", \"Lùn\", \"Sul\", \"Dàm\", \"Sam\", \"Dùb\", \"\"]\n                    },\n                    AM: [\"m\", \"m\", \"M\"],\n                    PM: [\"f\", \"f\", \"F\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-IQ\": [\"ar-IQ\", \"default\", {\n            name: \"ar-IQ\",\n            englishName: \"Arabic (Iraq)\",\n            nativeName: \"العربية (العراق)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"د.ع.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"zh-CN\": [\"zh-CN\", \"default\", {\n            name: \"zh-CN\",\n            englishName: \"Chinese (Simplified, PRC)\",\n            nativeName: \"中文(中华人民共和国)\",\n            language: \"zh-CHS\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"de-CH\": [\"de-CH\", \"default\", {\n            name: \"de-CH\",\n            englishName: \"German (Switzerland)\",\n            nativeName: \"Deutsch (Schweiz)\",\n            language: \"de\",\n            numberFormat: {\n                \",\": \"'\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \"'\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \"'\",\n                    symbol: \"Fr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n                        namesAbbr: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n                        namesShort: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d. MMMM yyyy HH:mm\",\n                        F: \"dddd, d. MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"en-GB\": [\"en-GB\", \"default\", {\n            name: \"en-GB\",\n            englishName: \"English (United Kingdom)\",\n            nativeName: \"English (United Kingdom)\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"£\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-MX\": [\"es-MX\", \"default\", {\n            name: \"es-MX\",\n            englishName: \"Spanish (Mexico)\",\n            nativeName: \"Español (México)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fr-BE\": [\"fr-BE\", \"default\", {\n            name: \"fr-BE\",\n            englishName: \"French (Belgium)\",\n            nativeName: \"français (Belgique)\",\n            language: \"fr\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"it-CH\": [\"it-CH\", \"default\", {\n            name: \"it-CH\",\n            englishName: \"Italian (Switzerland)\",\n            nativeName: \"italiano (Svizzera)\",\n            language: \"it\",\n            numberFormat: {\n                \",\": \"'\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \"'\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \"'\",\n                    symbol: \"fr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"domenica\", \"lunedì\", \"martedì\", \"mercoledì\", \"giovedì\", \"venerdì\", \"sabato\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mer\", \"gio\", \"ven\", \"sab\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"me\", \"gi\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"gennaio\", \"febbraio\", \"marzo\", \"aprile\", \"maggio\", \"giugno\", \"luglio\", \"agosto\", \"settembre\", \"ottobre\", \"novembre\", \"dicembre\", \"\"],\n                        namesAbbr: [\"gen\", \"feb\", \"mar\", \"apr\", \"mag\", \"giu\", \"lug\", \"ago\", \"set\", \"ott\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d. MMMM yyyy HH:mm\",\n                        F: \"dddd, d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"nl-BE\": [\"nl-BE\", \"default\", {\n            name: \"nl-BE\",\n            englishName: \"Dutch (Belgium)\",\n            nativeName: \"Nederlands (België)\",\n            language: \"nl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"zondag\", \"maandag\", \"dinsdag\", \"woensdag\", \"donderdag\", \"vrijdag\", \"zaterdag\"],\n                        namesAbbr: [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"],\n                        namesShort: [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"maart\", \"april\", \"mei\", \"juni\", \"juli\", \"augustus\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mrt\", \"apr\", \"mei\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd d MMMM yyyy H:mm\",\n                        F: \"dddd d MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"nn-NO\": [\"nn-NO\", \"default\", {\n            name: \"nn-NO\",\n            englishName: \"Norwegian, Nynorsk (Norway)\",\n            nativeName: \"norsk, nynorsk (Noreg)\",\n            language: \"nn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"søndag\", \"måndag\", \"tysdag\", \"onsdag\", \"torsdag\", \"fredag\", \"laurdag\"],\n                        namesAbbr: [\"sø\", \"må\", \"ty\", \"on\", \"to\", \"fr\", \"la\"],\n                        namesShort: [\"sø\", \"må\", \"ty\", \"on\", \"to\", \"fr\", \"la\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mars\", \"april\", \"mai\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"desember\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"pt-PT\": [\"pt-PT\", \"default\", {\n            name: \"pt-PT\",\n            englishName: \"Portuguese (Portugal)\",\n            nativeName: \"português (Portugal)\",\n            language: \"pt\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"domingo\", \"segunda-feira\", \"terça-feira\", \"quarta-feira\", \"quinta-feira\", \"sexta-feira\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"seg\", \"ter\", \"qua\", \"qui\", \"sex\", \"sáb\"],\n                        namesShort: [\"D\", \"S\", \"T\", \"Q\", \"Q\", \"S\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\", \"\"],\n                        namesAbbr: [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dddd, d' de 'MMMM' de 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d' de 'MMMM' de 'yyyy HH:mm\",\n                        F: \"dddd, d' de 'MMMM' de 'yyyy HH:mm:ss\",\n                        M: \"d/M\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Latn-CS\": [\"sr-Latn-CS\", \"default\", {\n            name: \"sr-Latn-CS\",\n            englishName: \"Serbian (Latin, Serbia and Montenegro (Former))\",\n            nativeName: \"srpski (Srbija i Crna Gora (Prethodno))\",\n            language: \"sr-Latn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Din.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljak\", \"utorak\", \"sreda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"jun\", \"jul\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n.e.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sv-FI\": [\"sv-FI\", \"default\", {\n            name: \"sv-FI\",\n            englishName: \"Swedish (Finland)\",\n            nativeName: \"svenska (Finland)\",\n            language: \"sv\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"söndag\", \"måndag\", \"tisdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lördag\"],\n                        namesAbbr: [\"sö\", \"må\", \"ti\", \"on\", \"to\", \"fr\", \"lö\"],\n                        namesShort: [\"sö\", \"må\", \"ti\", \"on\", \"to\", \"fr\", \"lö\"]\n                    },\n                    months: {\n                        names: [\"januari\", \"februari\", \"mars\", \"april\", \"maj\", \"juni\", \"juli\", \"augusti\", \"september\", \"oktober\", \"november\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"'den 'd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"'den 'd MMMM yyyy HH:mm\",\n                        F: \"'den 'd MMMM yyyy HH:mm:ss\",\n                        M: \"'den 'd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"az-Cyrl-AZ\": [\"az-Cyrl-AZ\", \"default\", {\n            name: \"az-Cyrl-AZ\",\n            englishName: \"Azeri (Cyrillic, Azerbaijan)\",\n            nativeName: \"Азәрбајҹан (Азәрбајҹан)\",\n            language: \"az-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"ман.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Базар\", \"Базар ертәси\", \"Чәршәнбә ахшамы\", \"Чәршәнбә\", \"Ҹүмә ахшамы\", \"Ҹүмә\", \"Шәнбә\"],\n                        namesAbbr: [\"Б\", \"Бе\", \"Ча\", \"Ч\", \"Ҹа\", \"Ҹ\", \"Ш\"],\n                        namesShort: [\"Б\", \"Бе\", \"Ча\", \"Ч\", \"Ҹа\", \"Ҹ\", \"Ш\"]\n                    },\n                    months: {\n                        names: [\"Јанвар\", \"Феврал\", \"Март\", \"Апрел\", \"Мај\", \"Ијун\", \"Ијул\", \"Август\", \"Сентјабр\", \"Октјабр\", \"Нојабр\", \"Декабр\", \"\"],\n                        namesAbbr: [\"Јан\", \"Фев\", \"Мар\", \"Апр\", \"Мај\", \"Ијун\", \"Ијул\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"јанвар\", \"феврал\", \"март\", \"апрел\", \"мај\", \"ијун\", \"ијул\", \"август\", \"сентјабр\", \"октјабр\", \"нојабр\", \"декабр\", \"\"],\n                        namesAbbr: [\"Јан\", \"Фев\", \"Мар\", \"Апр\", \"мая\", \"ијун\", \"ијул\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"dsb-DE\": [\"dsb-DE\", \"default\", {\n            name: \"dsb-DE\",\n            englishName: \"Lower Sorbian (Germany)\",\n            nativeName: \"dolnoserbšćina (Nimska)\",\n            language: \"dsb\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \". \",\n                    firstDay: 1,\n                    days: {\n                        names: [\"njeźela\", \"ponjeźele\", \"wałtora\", \"srjoda\", \"stwortk\", \"pětk\", \"sobota\"],\n                        namesAbbr: [\"nje\", \"pon\", \"wał\", \"srj\", \"stw\", \"pět\", \"sob\"],\n                        namesShort: [\"n\", \"p\", \"w\", \"s\", \"s\", \"p\", \"s\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"měrc\", \"apryl\", \"maj\", \"junij\", \"julij\", \"awgust\", \"september\", \"oktober\", \"nowember\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"maj\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"januara\", \"februara\", \"měrca\", \"apryla\", \"maja\", \"junija\", \"julija\", \"awgusta\", \"septembra\", \"oktobra\", \"nowembra\", \"decembra\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"maj\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"po Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d. M. yyyy\",\n                        D: \"dddd, 'dnja' d. MMMM yyyy\",\n                        t: \"H.mm 'goź.'\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'\",\n                        F: \"dddd, 'dnja' d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"se-SE\": [\"se-SE\", \"default\", {\n            name: \"se-SE\",\n            englishName: \"Sami, Northern (Sweden)\",\n            nativeName: \"davvisámegiella (Ruoŧŧa)\",\n            language: \"se\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sotnabeaivi\", \"mánnodat\", \"disdat\", \"gaskavahkku\", \"duorastat\", \"bearjadat\", \"lávvardat\"],\n                        namesAbbr: [\"sotn\", \"mán\", \"dis\", \"gask\", \"duor\", \"bear\", \"láv\"],\n                        namesShort: [\"s\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"ođđajagemánnu\", \"guovvamánnu\", \"njukčamánnu\", \"cuoŋománnu\", \"miessemánnu\", \"geassemánnu\", \"suoidnemánnu\", \"borgemánnu\", \"čakčamánnu\", \"golggotmánnu\", \"skábmamánnu\", \"juovlamánnu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ođđajagimánu\", \"guovvamánu\", \"njukčamánu\", \"cuoŋománu\", \"miessemánu\", \"geassemánu\", \"suoidnemánu\", \"borgemánu\", \"čakčamánu\", \"golggotmánu\", \"skábmamánu\", \"juovlamánu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ga-IE\": [\"ga-IE\", \"default\", {\n            name: \"ga-IE\",\n            englishName: \"Irish (Ireland)\",\n            nativeName: \"Gaeilge (Éire)\",\n            language: \"ga\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Dé Domhnaigh\", \"Dé Luain\", \"Dé Máirt\", \"Dé Céadaoin\", \"Déardaoin\", \"Dé hAoine\", \"Dé Sathairn\"],\n                        namesAbbr: [\"Domh\", \"Luan\", \"Máir\", \"Céad\", \"Déar\", \"Aoi\", \"Sath\"],\n                        namesShort: [\"Do\", \"Lu\", \"Má\", \"Cé\", \"De\", \"Ao\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Eanáir\", \"Feabhra\", \"Márta\", \"Aibreán\", \"Bealtaine\", \"Meitheamh\", \"Iúil\", \"Lúnasa\", \"Meán Fómhair\", \"Deireadh Fómhair\", \"Samhain\", \"Nollaig\", \"\"],\n                        namesAbbr: [\"Ean\", \"Feabh\", \"Már\", \"Aib\", \"Bealt\", \"Meith\", \"Iúil\", \"Lún\", \"M.Fómh\", \"D.Fómh\", \"Samh\", \"Noll\", \"\"]\n                    },\n                    AM: [\"r.n.\", \"r.n.\", \"R.N.\"],\n                    PM: [\"i.n.\", \"i.n.\", \"I.N.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy HH:mm\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ms-BN\": [\"ms-BN\", \"default\", {\n            name: \"ms-BN\",\n            englishName: \"Malay (Brunei Darussalam)\",\n            nativeName: \"Bahasa Melayu (Brunei Darussalam)\",\n            language: \"ms\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    decimals: 0,\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"Ahad\", \"Isnin\", \"Selasa\", \"Rabu\", \"Khamis\", \"Jumaat\", \"Sabtu\"],\n                        namesAbbr: [\"Ahad\", \"Isnin\", \"Sel\", \"Rabu\", \"Khamis\", \"Jumaat\", \"Sabtu\"],\n                        namesShort: [\"A\", \"I\", \"S\", \"R\", \"K\", \"J\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Januari\", \"Februari\", \"Mac\", \"April\", \"Mei\", \"Jun\", \"Julai\", \"Ogos\", \"September\", \"Oktober\", \"November\", \"Disember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mac\", \"Apr\", \"Mei\", \"Jun\", \"Jul\", \"Ogos\", \"Sept\", \"Okt\", \"Nov\", \"Dis\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM yyyy H:mm\",\n                        F: \"dd MMMM yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"uz-Cyrl-UZ\": [\"uz-Cyrl-UZ\", \"default\", {\n            name: \"uz-Cyrl-UZ\",\n            englishName: \"Uzbek (Cyrillic, Uzbekistan)\",\n            nativeName: \"Ўзбек (Ўзбекистон)\",\n            language: \"uz-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"сўм\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"якшанба\", \"душанба\", \"сешанба\", \"чоршанба\", \"пайшанба\", \"жума\", \"шанба\"],\n                        namesAbbr: [\"якш\", \"дш\", \"сш\", \"чш\", \"пш\", \"ж\", \"ш\"],\n                        namesShort: [\"я\", \"д\", \"с\", \"ч\", \"п\", \"ж\", \"ш\"]\n                    },\n                    months: {\n                        names: [\"Январ\", \"Феврал\", \"Март\", \"Апрел\", \"Май\", \"Июн\", \"Июл\", \"Август\", \"Сентябр\", \"Октябр\", \"Ноябр\", \"Декабр\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"январ\", \"феврал\", \"март\", \"апрел\", \"май\", \"июн\", \"июл\", \"август\", \"сентябр\", \"октябр\", \"ноябр\", \"декабр\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"мая\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"yyyy 'йил' d-MMMM\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy 'йил' d-MMMM HH:mm\",\n                        F: \"yyyy 'йил' d-MMMM HH:mm:ss\",\n                        M: \"d-MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"bn-BD\": [\"bn-BD\", \"default\", {\n            name: \"bn-BD\",\n            englishName: \"Bengali (Bangladesh)\",\n            nativeName: \"বাংলা (বাংলাদেশ)\",\n            language: \"bn\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"৳\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    \":\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"রবিবার\", \"সোমবার\", \"মঙ্গলবার\", \"বুধবার\", \"বৃহস্পতিবার\", \"শুক্রবার\", \"শনিবার\"],\n                        namesAbbr: [\"রবি.\", \"সোম.\", \"মঙ্গল.\", \"বুধ.\", \"বৃহস্পতি.\", \"শুক্র.\", \"শনি.\"],\n                        namesShort: [\"র\", \"স\", \"ম\", \"ব\", \"ব\", \"শ\", \"শ\"]\n                    },\n                    months: {\n                        names: [\"জানুয়ারী\", \"ফেব্রুয়ারী\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগস্ট\", \"সেপ্টেম্বর\", \"অক্টোবর\", \"নভেম্বর\", \"ডিসেম্বর\", \"\"],\n                        namesAbbr: [\"জানু.\", \"ফেব্রু.\", \"মার্চ\", \"এপ্রিল\", \"মে\", \"জুন\", \"জুলাই\", \"আগ.\", \"সেপ্টে.\", \"অক্টো.\", \"নভে.\", \"ডিসে.\", \"\"]\n                    },\n                    AM: [\"পুর্বাহ্ন\", \"পুর্বাহ্ন\", \"পুর্বাহ্ন\"],\n                    PM: [\"অপরাহ্ন\", \"অপরাহ্ন\", \"অপরাহ্ন\"],\n                    patterns: {\n                        d: \"dd-MM-yy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH.mm\",\n                        T: \"HH.mm.ss\",\n                        f: \"dd MMMM yyyy HH.mm\",\n                        F: \"dd MMMM yyyy HH.mm.ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"mn-Mong-CN\": [\"mn-Mong-CN\", \"default\", {\n            name: \"mn-Mong-CN\",\n            englishName: \"Mongolian (Traditional Mongolian, PRC)\",\n            nativeName: \"ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ (ᠪᠦᠭᠦᠳᠡ ᠨᠠᠢᠷᠠᠮᠳᠠᠬᠤ ᠳᠤᠮᠳᠠᠳᠤ ᠠᠷᠠᠳ ᠣᠯᠣᠰ)\",\n            language: \"mn-Mong\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ\"],\n                        namesAbbr: [\"ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ\"],\n                        namesShort: [\"ᠡ‍\", \"ᠨᠢ‍\", \"ᠬᠣ‍\", \"ᠭᠤ‍\", \"ᠳᠥ‍\", \"ᠲᠠ‍\", \"ᠵᠢ‍\"]\n                    },\n                    months: {\n                        names: [\"ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"\"],\n                        namesAbbr: [\"ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm\",\n                        F: \"yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss\",\n                        M: \"M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'\",\n                        Y: \"yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'\"\n                    }\n                }\n            }\n        }],\n    \"iu-Latn-CA\": [\"iu-Latn-CA\", \"default\", {\n            name: \"iu-Latn-CA\",\n            englishName: \"Inuktitut (Latin, Canada)\",\n            nativeName: \"Inuktitut (Kanatami)\",\n            language: \"iu-Latn\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Naattiinguja\", \"Naggajjau\", \"Aippiq\", \"Pingatsiq\", \"Sitammiq\", \"Tallirmiq\", \"Sivataarvik\"],\n                        namesAbbr: [\"Nat\", \"Nag\", \"Aip\", \"Pi\", \"Sit\", \"Tal\", \"Siv\"],\n                        namesShort: [\"N\", \"N\", \"A\", \"P\", \"S\", \"T\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Jaannuari\", \"Viivvuari\", \"Maatsi\", \"Iipuri\", \"Mai\", \"Juuni\", \"Julai\", \"Aaggiisi\", \"Sitipiri\", \"Utupiri\", \"Nuvipiri\", \"Tisipiri\", \"\"],\n                        namesAbbr: [\"Jan\", \"Viv\", \"Mas\", \"Ipu\", \"Mai\", \"Jun\", \"Jul\", \"Agi\", \"Sii\", \"Uut\", \"Nuv\", \"Tis\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/MM/yyyy\",\n                        D: \"ddd, MMMM dd,yyyy\",\n                        f: \"ddd, MMMM dd,yyyy h:mm tt\",\n                        F: \"ddd, MMMM dd,yyyy h:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"tzm-Latn-DZ\": [\"tzm-Latn-DZ\", \"default\", {\n            name: \"tzm-Latn-DZ\",\n            englishName: \"Tamazight (Latin, Algeria)\",\n            nativeName: \"Tamazight (Djazaïr)\",\n            language: \"tzm-Latn\",\n            numberFormat: {\n                pattern: [\"n-\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    symbol: \"DZD\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"Acer\", \"Arime\", \"Aram\", \"Ahad\", \"Amhadh\", \"Sem\", \"Sedh\"],\n                        namesAbbr: [\"Ace\", \"Ari\", \"Ara\", \"Aha\", \"Amh\", \"Sem\", \"Sed\"],\n                        namesShort: [\"Ac\", \"Ar\", \"Ar\", \"Ah\", \"Am\", \"Se\", \"Se\"]\n                    },\n                    months: {\n                        names: [\"Yenayer\", \"Furar\", \"Maghres\", \"Yebrir\", \"Mayu\", \"Yunyu\", \"Yulyu\", \"Ghuct\", \"Cutenber\", \"Ktuber\", \"Wambir\", \"Dujanbir\", \"\"],\n                        namesAbbr: [\"Yen\", \"Fur\", \"Mag\", \"Yeb\", \"May\", \"Yun\", \"Yul\", \"Ghu\", \"Cut\", \"Ktu\", \"Wam\", \"Duj\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM, yyyy H:mm\",\n                        F: \"dd MMMM, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"quz-EC\": [\"quz-EC\", \"default\", {\n            name: \"quz-EC\",\n            englishName: \"Quechua (Ecuador)\",\n            nativeName: \"runasimi (Ecuador)\",\n            language: \"quz\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"intichaw\", \"killachaw\", \"atipachaw\", \"quyllurchaw\", \"Ch' askachaw\", \"Illapachaw\", \"k'uychichaw\"],\n                        namesAbbr: [\"int\", \"kil\", \"ati\", \"quy\", \"Ch'\", \"Ill\", \"k'u\"],\n                        namesShort: [\"d\", \"k\", \"a\", \"m\", \"h\", \"b\", \"k\"]\n                    },\n                    months: {\n                        names: [\"Qulla puquy\", \"Hatun puquy\", \"Pauqar waray\", \"ayriwa\", \"Aymuray\", \"Inti raymi\", \"Anta Sitwa\", \"Qhapaq Sitwa\", \"Uma raymi\", \"Kantaray\", \"Ayamarq'a\", \"Kapaq Raymi\", \"\"],\n                        namesAbbr: [\"Qul\", \"Hat\", \"Pau\", \"ayr\", \"Aym\", \"Int\", \"Ant\", \"Qha\", \"Uma\", \"Kan\", \"Aya\", \"Kap\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-EG\": [\"ar-EG\", \"default\", {\n            name: \"ar-EG\",\n            englishName: \"Arabic (Egypt)\",\n            nativeName: \"العربية (مصر)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                decimals: 3,\n                percent: {\n                    decimals: 3\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ج.م.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"zh-HK\": [\"zh-HK\", \"default\", {\n            name: \"zh-HK\",\n            englishName: \"Chinese (Traditional, Hong Kong S.A.R.)\",\n            nativeName: \"中文(香港特別行政區)\",\n            language: \"zh-CHT\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    symbol: \"HK$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"週日\", \"週一\", \"週二\", \"週三\", \"週四\", \"週五\", \"週六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"de-AT\": [\"de-AT\", \"default\", {\n            name: \"de-AT\",\n            englishName: \"German (Austria)\",\n            nativeName: \"Deutsch (Österreich)\",\n            language: \"de\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n                        namesAbbr: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n                        namesShort: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Jänner\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jän\", \"Feb\", \"Mär\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, dd. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, dd. MMMM yyyy HH:mm\",\n                        F: \"dddd, dd. MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"en-AU\": [\"en-AU\", \"default\", {\n            name: \"en-AU\",\n            englishName: \"English (Australia)\",\n            nativeName: \"English (Australia)\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    patterns: {\n                        d: \"d/MM/yyyy\",\n                        D: \"dddd, d MMMM yyyy\",\n                        f: \"dddd, d MMMM yyyy h:mm tt\",\n                        F: \"dddd, d MMMM yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-ES\": [\"es-ES\", \"default\", {\n            name: \"es-ES\",\n            englishName: \"Spanish (Spain, International Sort)\",\n            nativeName: \"Español (España, alfabetización internacional)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fr-CA\": [\"fr-CA\", \"default\", {\n            name: \"fr-CA\",\n            englishName: \"French (Canada)\",\n            nativeName: \"français (Canada)\",\n            language: \"fr\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"(n $)\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d MMMM yyyy HH:mm\",\n                        F: \"d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\"\n                    }\n                }\n            }\n        }],\n    \"sr-Cyrl-CS\": [\"sr-Cyrl-CS\", \"default\", {\n            name: \"sr-Cyrl-CS\",\n            englishName: \"Serbian (Cyrillic, Serbia and Montenegro (Former))\",\n            nativeName: \"српски (Србија и Црна Гора (Претходно))\",\n            language: \"sr-Cyrl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Дин.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недеља\", \"понедељак\", \"уторак\", \"среда\", \"четвртак\", \"петак\", \"субота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"уто\", \"сре\", \"чет\", \"пет\", \"суб\"],\n                        namesShort: [\"не\", \"по\", \"ут\", \"ср\", \"че\", \"пе\", \"су\"]\n                    },\n                    months: {\n                        names: [\"јануар\", \"фебруар\", \"март\", \"април\", \"мај\", \"јун\", \"јул\", \"август\", \"септембар\", \"октобар\", \"новембар\", \"децембар\", \"\"],\n                        namesAbbr: [\"јан\", \"феб\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"нов\", \"дец\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"н.е.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"se-FI\": [\"se-FI\", \"default\", {\n            name: \"se-FI\",\n            englishName: \"Sami, Northern (Finland)\",\n            nativeName: \"davvisámegiella (Suopma)\",\n            language: \"se\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sotnabeaivi\", \"vuossárga\", \"maŋŋebárga\", \"gaskavahkku\", \"duorastat\", \"bearjadat\", \"lávvardat\"],\n                        namesAbbr: [\"sotn\", \"vuos\", \"maŋ\", \"gask\", \"duor\", \"bear\", \"láv\"],\n                        namesShort: [\"s\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"ođđajagemánnu\", \"guovvamánnu\", \"njukčamánnu\", \"cuoŋománnu\", \"miessemánnu\", \"geassemánnu\", \"suoidnemánnu\", \"borgemánnu\", \"čakčamánnu\", \"golggotmánnu\", \"skábmamánnu\", \"juovlamánnu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ođđajagimánu\", \"guovvamánu\", \"njukčamánu\", \"cuoŋománu\", \"miessemánu\", \"geassemánu\", \"suoidnemánu\", \"borgemánu\", \"čakčamánu\", \"golggotmánu\", \"skábmamánu\", \"juovlamánu\", \"\"],\n                        namesAbbr: [\"ođđj\", \"guov\", \"njuk\", \"cuo\", \"mies\", \"geas\", \"suoi\", \"borg\", \"čakč\", \"golg\", \"skáb\", \"juov\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy H:mm\",\n                        F: \"MMMM d'. b. 'yyyy H:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"quz-PE\": [\"quz-PE\", \"default\", {\n            name: \"quz-PE\",\n            englishName: \"Quechua (Peru)\",\n            nativeName: \"runasimi (Piruw)\",\n            language: \"quz\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-%n\", \"%n\"]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    symbol: \"S/.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"intichaw\", \"killachaw\", \"atipachaw\", \"quyllurchaw\", \"Ch' askachaw\", \"Illapachaw\", \"k'uychichaw\"],\n                        namesAbbr: [\"int\", \"kil\", \"ati\", \"quy\", \"Ch'\", \"Ill\", \"k'u\"],\n                        namesShort: [\"d\", \"k\", \"a\", \"m\", \"h\", \"b\", \"k\"]\n                    },\n                    months: {\n                        names: [\"Qulla puquy\", \"Hatun puquy\", \"Pauqar waray\", \"ayriwa\", \"Aymuray\", \"Inti raymi\", \"Anta Sitwa\", \"Qhapaq Sitwa\", \"Uma raymi\", \"Kantaray\", \"Ayamarq'a\", \"Kapaq Raymi\", \"\"],\n                        namesAbbr: [\"Qul\", \"Hat\", \"Pau\", \"ayr\", \"Aym\", \"Int\", \"Ant\", \"Qha\", \"Uma\", \"Kan\", \"Aya\", \"Kap\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-LY\": [\"ar-LY\", \"default\", {\n            name: \"ar-LY\",\n            englishName: \"Arabic (Libya)\",\n            nativeName: \"العربية (ليبيا)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                decimals: 3,\n                percent: {\n                    decimals: 3\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$n\"],\n                    decimals: 3,\n                    symbol: \"د.ل.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"zh-SG\": [\"zh-SG\", \"default\", {\n            name: \"zh-SG\",\n            englishName: \"Chinese (Simplified, Singapore)\",\n            nativeName: \"中文(新加坡)\",\n            language: \"zh-CHS\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"tt h:mm\",\n                        T: \"tt h:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' tt h:mm\",\n                        F: \"yyyy'年'M'月'd'日' tt h:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"de-LU\": [\"de-LU\", \"default\", {\n            name: \"de-LU\",\n            englishName: \"German (Luxembourg)\",\n            nativeName: \"Deutsch (Luxemburg)\",\n            language: \"de\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n                        namesAbbr: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n                        namesShort: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d. MMMM yyyy HH:mm\",\n                        F: \"dddd, d. MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"en-CA\": [\"en-CA\", \"default\", {\n            name: \"en-CA\",\n            englishName: \"English (Canada)\",\n            nativeName: \"English (Canada)\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"MMMM-dd-yy\",\n                        f: \"MMMM-dd-yy h:mm tt\",\n                        F: \"MMMM-dd-yy h:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"es-GT\": [\"es-GT\", \"default\", {\n            name: \"es-GT\",\n            englishName: \"Spanish (Guatemala)\",\n            nativeName: \"Español (Guatemala)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    symbol: \"Q\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fr-CH\": [\"fr-CH\", \"default\", {\n            name: \"fr-CH\",\n            englishName: \"French (Switzerland)\",\n            nativeName: \"français (Suisse)\",\n            language: \"fr\",\n            numberFormat: {\n                \",\": \"'\",\n                percent: {\n                    \",\": \"'\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \"'\",\n                    symbol: \"fr.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"hr-BA\": [\"hr-BA\", \"default\", {\n            name: \"hr-BA\",\n            englishName: \"Croatian (Latin, Bosnia and Herzegovina)\",\n            nativeName: \"hrvatski (Bosna i Hercegovina)\",\n            language: \"hr\",\n            numberFormat: {\n                pattern: [\"- n\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"KM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedjelja\", \"ponedjeljak\", \"utorak\", \"srijeda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sri\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"siječanj\", \"veljača\", \"ožujak\", \"travanj\", \"svibanj\", \"lipanj\", \"srpanj\", \"kolovoz\", \"rujan\", \"listopad\", \"studeni\", \"prosinac\", \"\"],\n                        namesAbbr: [\"sij\", \"vlj\", \"ožu\", \"tra\", \"svi\", \"lip\", \"srp\", \"kol\", \"ruj\", \"lis\", \"stu\", \"pro\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"siječnja\", \"veljače\", \"ožujka\", \"travnja\", \"svibnja\", \"lipnja\", \"srpnja\", \"kolovoza\", \"rujna\", \"listopada\", \"studenog\", \"prosinca\", \"\"],\n                        namesAbbr: [\"sij\", \"vlj\", \"ožu\", \"tra\", \"svi\", \"lip\", \"srp\", \"kol\", \"ruj\", \"lis\", \"stu\", \"pro\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy.\",\n                        D: \"d. MMMM yyyy.\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy. H:mm\",\n                        F: \"d. MMMM yyyy. H:mm:ss\",\n                        M: \"d. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"smj-NO\": [\"smj-NO\", \"default\", {\n            name: \"smj-NO\",\n            englishName: \"Sami, Lule (Norway)\",\n            nativeName: \"julevusámegiella (Vuodna)\",\n            language: \"smj\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"sådnåbiejvve\", \"mánnodahka\", \"dijstahka\", \"gasskavahkko\", \"duorastahka\", \"bierjjedahka\", \"lávvodahka\"],\n                        namesAbbr: [\"såd\", \"mán\", \"dis\", \"gas\", \"duor\", \"bier\", \"láv\"],\n                        namesShort: [\"s\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"ådåjakmánno\", \"guovvamánno\", \"sjnjuktjamánno\", \"vuoratjismánno\", \"moarmesmánno\", \"biehtsemánno\", \"sjnjilltjamánno\", \"bårggemánno\", \"ragátmánno\", \"gålgådismánno\", \"basádismánno\", \"javllamánno\", \"\"],\n                        namesAbbr: [\"ådåj\", \"guov\", \"snju\", \"vuor\", \"moar\", \"bieh\", \"snji\", \"bårg\", \"ragá\", \"gålg\", \"basá\", \"javl\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ådåjakmáno\", \"guovvamáno\", \"sjnjuktjamáno\", \"vuoratjismáno\", \"moarmesmáno\", \"biehtsemáno\", \"sjnjilltjamáno\", \"bårggemáno\", \"ragátmáno\", \"gålgådismáno\", \"basádismáno\", \"javllamáno\", \"\"],\n                        namesAbbr: [\"ådåj\", \"guov\", \"snju\", \"vuor\", \"moar\", \"bieh\", \"snji\", \"bårg\", \"ragá\", \"gålg\", \"basá\", \"javl\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-DZ\": [\"ar-DZ\", \"default\", {\n            name: \"ar-DZ\",\n            englishName: \"Arabic (Algeria)\",\n            nativeName: \"العربية (الجزائر)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"د.ج.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM, yyyy H:mm\",\n                        F: \"dd MMMM, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd/MM/yyyy H:mm\",\n                        F: \"dd/MM/yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd/MMMM/yyyy H:mm\",\n                        F: \"dd/MMMM/yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\"\n                    }\n                }\n            }\n        }],\n    \"zh-MO\": [\"zh-MO\", \"default\", {\n            name: \"zh-MO\",\n            englishName: \"Chinese (Traditional, Macao S.A.R.)\",\n            nativeName: \"中文(澳門特別行政區)\",\n            language: \"zh-CHT\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    symbol: \"MOP\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"週日\", \"週一\", \"週二\", \"週三\", \"週四\", \"週五\", \"週六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"de-LI\": [\"de-LI\", \"default\", {\n            name: \"de-LI\",\n            englishName: \"German (Liechtenstein)\",\n            nativeName: \"Deutsch (Liechtenstein)\",\n            language: \"de\",\n            numberFormat: {\n                \",\": \"'\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \"'\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \"'\",\n                    symbol: \"CHF\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n                        namesAbbr: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n                        namesShort: [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"]\n                    },\n                    months: {\n                        names: [\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mrz\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n. Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"dddd, d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd, d. MMMM yyyy HH:mm\",\n                        F: \"dddd, d. MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"en-NZ\": [\"en-NZ\", \"default\", {\n            name: \"en-NZ\",\n            englishName: \"English (New Zealand)\",\n            nativeName: \"English (New Zealand)\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    patterns: {\n                        d: \"d/MM/yyyy\",\n                        D: \"dddd, d MMMM yyyy\",\n                        f: \"dddd, d MMMM yyyy h:mm tt\",\n                        F: \"dddd, d MMMM yyyy h:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-CR\": [\"es-CR\", \"default\", {\n            name: \"es-CR\",\n            englishName: \"Spanish (Costa Rica)\",\n            nativeName: \"Español (Costa Rica)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"₡\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fr-LU\": [\"fr-LU\", \"default\", {\n            name: \"fr-LU\",\n            englishName: \"French (Luxembourg)\",\n            nativeName: \"français (Luxembourg)\",\n            language: \"fr\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"bs-Latn-BA\": [\"bs-Latn-BA\", \"default\", {\n            name: \"bs-Latn-BA\",\n            englishName: \"Bosnian (Latin, Bosnia and Herzegovina)\",\n            nativeName: \"bosanski (Bosna i Hercegovina)\",\n            language: \"bs-Latn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"KM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedjelja\", \"ponedjeljak\", \"utorak\", \"srijeda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sri\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"juni\", \"juli\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"smj-SE\": [\"smj-SE\", \"default\", {\n            name: \"smj-SE\",\n            englishName: \"Sami, Lule (Sweden)\",\n            nativeName: \"julevusámegiella (Svierik)\",\n            language: \"smj\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ájllek\", \"mánnodahka\", \"dijstahka\", \"gasskavahkko\", \"duorastahka\", \"bierjjedahka\", \"lávvodahka\"],\n                        namesAbbr: [\"ájl\", \"mán\", \"dis\", \"gas\", \"duor\", \"bier\", \"láv\"],\n                        namesShort: [\"á\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"ådåjakmánno\", \"guovvamánno\", \"sjnjuktjamánno\", \"vuoratjismánno\", \"moarmesmánno\", \"biehtsemánno\", \"sjnjilltjamánno\", \"bårggemánno\", \"ragátmánno\", \"gålgådismánno\", \"basádismánno\", \"javllamánno\", \"\"],\n                        namesAbbr: [\"ådåj\", \"guov\", \"snju\", \"vuor\", \"moar\", \"bieh\", \"snji\", \"bårg\", \"ragá\", \"gålg\", \"basá\", \"javl\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ådåjakmáno\", \"guovvamáno\", \"sjnjuktjamáno\", \"vuoratjismáno\", \"moarmesmáno\", \"biehtsemáno\", \"sjnjilltjamáno\", \"bårggemáno\", \"ragátmáno\", \"gålgådismáno\", \"basádismáno\", \"javllamáno\", \"\"],\n                        namesAbbr: [\"ådåj\", \"guov\", \"snju\", \"vuor\", \"moar\", \"bieh\", \"snji\", \"bårg\", \"ragá\", \"gålg\", \"basá\", \"javl\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-MA\": [\"ar-MA\", \"default\", {\n            name: \"ar-MA\",\n            englishName: \"Arabic (Morocco)\",\n            nativeName: \"العربية (المملكة المغربية)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"د.م.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"ماي\", \"يونيو\", \"يوليوز\", \"غشت\", \"شتنبر\", \"أكتوبر\", \"نونبر\", \"دجنبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"ماي\", \"يونيو\", \"يوليوز\", \"غشت\", \"شتنبر\", \"أكتوبر\", \"نونبر\", \"دجنبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM, yyyy H:mm\",\n                        F: \"dd MMMM, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd/MM/yyyy H:mm\",\n                        F: \"dd/MM/yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd/MMMM/yyyy H:mm\",\n                        F: \"dd/MMMM/yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\"\n                    }\n                }\n            }\n        }],\n    \"en-IE\": [\"en-IE\", \"default\", {\n            name: \"en-IE\",\n            englishName: \"English (Ireland)\",\n            nativeName: \"English (Ireland)\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-PA\": [\"es-PA\", \"default\", {\n            name: \"es-PA\",\n            englishName: \"Spanish (Panama)\",\n            nativeName: \"Español (Panamá)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    symbol: \"B/.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"fr-MC\": [\"fr-MC\", \"default\", {\n            name: \"fr-MC\",\n            englishName: \"French (Monaco)\",\n            nativeName: \"français (Principauté de Monaco)\",\n            language: \"fr\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd d MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dddd d MMMM yyyy HH:mm\",\n                        F: \"dddd d MMMM yyyy HH:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Latn-BA\": [\"sr-Latn-BA\", \"default\", {\n            name: \"sr-Latn-BA\",\n            englishName: \"Serbian (Latin, Bosnia and Herzegovina)\",\n            nativeName: \"srpski (Bosna i Hercegovina)\",\n            language: \"sr-Latn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"KM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljak\", \"utorak\", \"sreda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"jun\", \"jul\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n.e.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sma-NO\": [\"sma-NO\", \"default\", {\n            name: \"sma-NO\",\n            englishName: \"Sami, Southern (Norway)\",\n            nativeName: \"åarjelsaemiengiele (Nöörje)\",\n            language: \"sma\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-%n\", \"%n\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"aejlege\", \"måanta\", \"dæjsta\", \"gaskevåhkoe\", \"duarsta\", \"bearjadahke\", \"laavvardahke\"],\n                        namesAbbr: [\"aej\", \"måa\", \"dæj\", \"gask\", \"duar\", \"bearj\", \"laav\"],\n                        namesShort: [\"a\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"tsïengele\", \"goevte\", \"njoktje\", \"voerhtje\", \"suehpede\", \"ruffie\", \"snjaltje\", \"mïetske\", \"skïerede\", \"golke\", \"rahka\", \"goeve\", \"\"],\n                        namesAbbr: [\"tsïen\", \"goevt\", \"njok\", \"voer\", \"sueh\", \"ruff\", \"snja\", \"mïet\", \"skïer\", \"golk\", \"rahk\", \"goev\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"tsïengelen\", \"goevten\", \"njoktjen\", \"voerhtjen\", \"suehpeden\", \"ruffien\", \"snjaltjen\", \"mïetsken\", \"skïereden\", \"golken\", \"rahkan\", \"goeven\", \"\"],\n                        namesAbbr: [\"tsïen\", \"goevt\", \"njok\", \"voer\", \"sueh\", \"ruff\", \"snja\", \"mïet\", \"skïer\", \"golk\", \"rahk\", \"goev\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-TN\": [\"ar-TN\", \"default\", {\n            name: \"ar-TN\",\n            englishName: \"Arabic (Tunisia)\",\n            nativeName: \"العربية (تونس)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                decimals: 3,\n                percent: {\n                    decimals: 3\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    decimals: 3,\n                    symbol: \"د.ت.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM, yyyy H:mm\",\n                        F: \"dd MMMM, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd/MM/yyyy H:mm\",\n                        F: \"dd/MM/yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd/MMMM/yyyy H:mm\",\n                        F: \"dd/MMMM/yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, MMMM dd, yyyy H:mm\",\n                        F: \"dddd, MMMM dd, yyyy H:mm:ss\"\n                    }\n                }\n            }\n        }],\n    \"en-ZA\": [\"en-ZA\", \"default\", {\n            name: \"en-ZA\",\n            englishName: \"English (South Africa)\",\n            nativeName: \"English (South Africa)\",\n            numberFormat: {\n                \",\": \" \",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"R\"\n                }\n            },\n            calendars: {\n                standard: {\n                    patterns: {\n                        d: \"yyyy/MM/dd\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM yyyy hh:mm tt\",\n                        F: \"dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-DO\": [\"es-DO\", \"default\", {\n            name: \"es-DO\",\n            englishName: \"Spanish (Dominican Republic)\",\n            nativeName: \"Español (República Dominicana)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    symbol: \"RD$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Cyrl-BA\": [\"sr-Cyrl-BA\", \"default\", {\n            name: \"sr-Cyrl-BA\",\n            englishName: \"Serbian (Cyrillic, Bosnia and Herzegovina)\",\n            nativeName: \"српски (Босна и Херцеговина)\",\n            language: \"sr-Cyrl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"КМ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недеља\", \"понедељак\", \"уторак\", \"среда\", \"четвртак\", \"петак\", \"субота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"уто\", \"сре\", \"чет\", \"пет\", \"суб\"],\n                        namesShort: [\"н\", \"п\", \"у\", \"с\", \"ч\", \"п\", \"с\"]\n                    },\n                    months: {\n                        names: [\"јануар\", \"фебруар\", \"март\", \"април\", \"мај\", \"јун\", \"јул\", \"август\", \"септембар\", \"октобар\", \"новембар\", \"децембар\", \"\"],\n                        namesAbbr: [\"јан\", \"феб\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"нов\", \"дец\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"н.е.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"sma-SE\": [\"sma-SE\", \"default\", {\n            name: \"sma-SE\",\n            englishName: \"Sami, Southern (Sweden)\",\n            nativeName: \"åarjelsaemiengiele (Sveerje)\",\n            language: \"sma\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"aejlege\", \"måanta\", \"dæjsta\", \"gaskevåhkoe\", \"duarsta\", \"bearjadahke\", \"laavvardahke\"],\n                        namesAbbr: [\"aej\", \"måa\", \"dæj\", \"gask\", \"duar\", \"bearj\", \"laav\"],\n                        namesShort: [\"a\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"tsïengele\", \"goevte\", \"njoktje\", \"voerhtje\", \"suehpede\", \"ruffie\", \"snjaltje\", \"mïetske\", \"skïerede\", \"golke\", \"rahka\", \"goeve\", \"\"],\n                        namesAbbr: [\"tsïen\", \"goevt\", \"njok\", \"voer\", \"sueh\", \"ruff\", \"snja\", \"mïet\", \"skïer\", \"golk\", \"rahk\", \"goev\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"tsïengelen\", \"goevten\", \"njoktjen\", \"voerhtjen\", \"suehpeden\", \"ruffien\", \"snjaltjen\", \"mïetsken\", \"skïereden\", \"golken\", \"rahkan\", \"goeven\", \"\"],\n                        namesAbbr: [\"tsïen\", \"goevt\", \"njok\", \"voer\", \"sueh\", \"ruff\", \"snja\", \"mïet\", \"skïer\", \"golk\", \"rahk\", \"goev\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-OM\": [\"ar-OM\", \"default\", {\n            name: \"ar-OM\",\n            englishName: \"Arabic (Oman)\",\n            nativeName: \"العربية (عمان)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    decimals: 3,\n                    symbol: \"ر.ع.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"en-JM\": [\"en-JM\", \"default\", {\n            name: \"en-JM\",\n            englishName: \"English (Jamaica)\",\n            nativeName: \"English (Jamaica)\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"],\n                    symbol: \"J$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"es-VE\": [\"es-VE\", \"default\", {\n            name: \"es-VE\",\n            englishName: \"Spanish (Bolivarian Republic of Venezuela)\",\n            nativeName: \"Español (Republica Bolivariana de Venezuela)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Bs. F.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"bs-Cyrl-BA\": [\"bs-Cyrl-BA\", \"default\", {\n            name: \"bs-Cyrl-BA\",\n            englishName: \"Bosnian (Cyrillic, Bosnia and Herzegovina)\",\n            nativeName: \"босански (Босна и Херцеговина)\",\n            language: \"bs-Cyrl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"КМ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недјеља\", \"понедјељак\", \"уторак\", \"сриједа\", \"четвртак\", \"петак\", \"субота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"уто\", \"сре\", \"чет\", \"пет\", \"суб\"],\n                        namesShort: [\"н\", \"п\", \"у\", \"с\", \"ч\", \"п\", \"с\"]\n                    },\n                    months: {\n                        names: [\"јануар\", \"фебруар\", \"март\", \"април\", \"мај\", \"јун\", \"јул\", \"август\", \"септембар\", \"октобар\", \"новембар\", \"децембар\", \"\"],\n                        namesAbbr: [\"јан\", \"феб\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"нов\", \"дец\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"н.е.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"sms-FI\": [\"sms-FI\", \"default\", {\n            name: \"sms-FI\",\n            englishName: \"Sami, Skolt (Finland)\",\n            nativeName: \"sääm´ǩiõll (Lää´ddjânnam)\",\n            language: \"sms\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"pâ´sspei´vv\", \"vuõssargg\", \"mââibargg\", \"seärad\", \"nelljdpei´vv\", \"piâtnâc\", \"sue´vet\"],\n                        namesAbbr: [\"pâ\", \"vu\", \"mâ\", \"se\", \"ne\", \"pi\", \"su\"],\n                        namesShort: [\"p\", \"v\", \"m\", \"s\", \"n\", \"p\", \"s\"]\n                    },\n                    months: {\n                        names: [\"ođđee´jjmään\", \"tä´lvvmään\", \"pâ´zzlâšttammään\", \"njuhččmään\", \"vue´ssmään\", \"ǩie´ssmään\", \"suei´nnmään\", \"på´rǧǧmään\", \"čõhččmään\", \"kålggmään\", \"skamm´mään\", \"rosttovmään\", \"\"],\n                        namesAbbr: [\"ođjm\", \"tä´lvv\", \"pâzl\", \"njuh\", \"vue\", \"ǩie\", \"suei\", \"på´r\", \"čõh\", \"kålg\", \"ska\", \"rost\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ođđee´jjmannu\", \"tä´lvvmannu\", \"pâ´zzlâšttammannu\", \"njuhččmannu\", \"vue´ssmannu\", \"ǩie´ssmannu\", \"suei´nnmannu\", \"på´rǧǧmannu\", \"čõhččmannu\", \"kålggmannu\", \"skamm´mannu\", \"rosttovmannu\", \"\"],\n                        namesAbbr: [\"ođjm\", \"tä´lvv\", \"pâzl\", \"njuh\", \"vue\", \"ǩie\", \"suei\", \"på´r\", \"čõh\", \"kålg\", \"ska\", \"rost\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"MMMM d'. p. 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"MMMM d'. p. 'yyyy H:mm\",\n                        F: \"MMMM d'. p. 'yyyy H:mm:ss\",\n                        M: \"MMMM d'. p. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-YE\": [\"ar-YE\", \"default\", {\n            name: \"ar-YE\",\n            englishName: \"Arabic (Yemen)\",\n            nativeName: \"العربية (اليمن)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ر.ي.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"en-029\": [\"en-029\", \"default\", {\n            name: \"en-029\",\n            englishName: \"English (Caribbean)\",\n            nativeName: \"English (Caribbean)\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"-$n\", \"$n\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    patterns: {\n                        d: \"MM/dd/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-CO\": [\"es-CO\", \"default\", {\n            name: \"es-CO\",\n            englishName: \"Spanish (Colombia)\",\n            nativeName: \"Español (Colombia)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Latn-RS\": [\"sr-Latn-RS\", \"default\", {\n            name: \"sr-Latn-RS\",\n            englishName: \"Serbian (Latin, Serbia)\",\n            nativeName: \"srpski (Srbija)\",\n            language: \"sr-Latn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Din.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljak\", \"utorak\", \"sreda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"jun\", \"jul\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n.e.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"smn-FI\": [\"smn-FI\", \"default\", {\n            name: \"smn-FI\",\n            englishName: \"Sami, Inari (Finland)\",\n            nativeName: \"sämikielâ (Suomâ)\",\n            language: \"smn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"pasepeivi\", \"vuossargâ\", \"majebargâ\", \"koskokko\", \"tuorâstâh\", \"vástuppeivi\", \"lávárdâh\"],\n                        namesAbbr: [\"pa\", \"vu\", \"ma\", \"ko\", \"tu\", \"vá\", \"lá\"],\n                        namesShort: [\"p\", \"v\", \"m\", \"k\", \"t\", \"v\", \"l\"]\n                    },\n                    months: {\n                        names: [\"uđđâivemáánu\", \"kuovâmáánu\", \"njuhčâmáánu\", \"cuáŋuimáánu\", \"vyesimáánu\", \"kesimáánu\", \"syeinimáánu\", \"porgemáánu\", \"čohčâmáánu\", \"roovvâdmáánu\", \"skammâmáánu\", \"juovlâmáánu\", \"\"],\n                        namesAbbr: [\"uđiv\", \"kuov\", \"njuh\", \"cuoŋ\", \"vyes\", \"kesi\", \"syei\", \"porg\", \"čoh\", \"roov\", \"ska\", \"juov\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"MMMM d'. p. 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"MMMM d'. p. 'yyyy H:mm\",\n                        F: \"MMMM d'. p. 'yyyy H:mm:ss\",\n                        M: \"MMMM d'. p. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-SY\": [\"ar-SY\", \"default\", {\n            name: \"ar-SY\",\n            englishName: \"Arabic (Syria)\",\n            nativeName: \"العربية (سوريا)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ل.س.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"en-BZ\": [\"en-BZ\", \"default\", {\n            name: \"en-BZ\",\n            englishName: \"English (Belize)\",\n            nativeName: \"English (Belize)\",\n            numberFormat: {\n                currency: {\n                    groupSizes: [3, 0],\n                    symbol: \"BZ$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd MMMM yyyy hh:mm tt\",\n                        F: \"dddd, dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-PE\": [\"es-PE\", \"default\", {\n            name: \"es-PE\",\n            englishName: \"Spanish (Peru)\",\n            nativeName: \"Español (Perú)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    symbol: \"S/.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Cyrl-RS\": [\"sr-Cyrl-RS\", \"default\", {\n            name: \"sr-Cyrl-RS\",\n            englishName: \"Serbian (Cyrillic, Serbia)\",\n            nativeName: \"српски (Србија)\",\n            language: \"sr-Cyrl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Дин.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недеља\", \"понедељак\", \"уторак\", \"среда\", \"четвртак\", \"петак\", \"субота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"уто\", \"сре\", \"чет\", \"пет\", \"суб\"],\n                        namesShort: [\"не\", \"по\", \"ут\", \"ср\", \"че\", \"пе\", \"су\"]\n                    },\n                    months: {\n                        names: [\"јануар\", \"фебруар\", \"март\", \"април\", \"мај\", \"јун\", \"јул\", \"август\", \"септембар\", \"октобар\", \"новембар\", \"децембар\", \"\"],\n                        namesAbbr: [\"јан\", \"феб\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"нов\", \"дец\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"н.е.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-JO\": [\"ar-JO\", \"default\", {\n            name: \"ar-JO\",\n            englishName: \"Arabic (Jordan)\",\n            nativeName: \"العربية (الأردن)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                decimals: 3,\n                percent: {\n                    decimals: 3\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    decimals: 3,\n                    symbol: \"د.ا.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"en-TT\": [\"en-TT\", \"default\", {\n            name: \"en-TT\",\n            englishName: \"English (Trinidad and Tobago)\",\n            nativeName: \"English (Trinidad y Tobago)\",\n            numberFormat: {\n                currency: {\n                    groupSizes: [3, 0],\n                    symbol: \"TT$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd MMMM yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd MMMM yyyy hh:mm tt\",\n                        F: \"dddd, dd MMMM yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-AR\": [\"es-AR\", \"default\", {\n            name: \"es-AR\",\n            englishName: \"Spanish (Argentina)\",\n            nativeName: \"Español (Argentina)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Latn-ME\": [\"sr-Latn-ME\", \"default\", {\n            name: \"sr-Latn-ME\",\n            englishName: \"Serbian (Latin, Montenegro)\",\n            nativeName: \"srpski (Crna Gora)\",\n            language: \"sr-Latn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljak\", \"utorak\", \"sreda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"jun\", \"jul\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n.e.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-LB\": [\"ar-LB\", \"default\", {\n            name: \"ar-LB\",\n            englishName: \"Arabic (Lebanon)\",\n            nativeName: \"العربية (لبنان)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ل.ل.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_TransliteratedEnglish: {\n                    name: \"Gregorian_TransliteratedEnglish\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"أ\", \"ا\", \"ث\", \"أ\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"en-ZW\": [\"en-ZW\", \"default\", {\n            name: \"en-ZW\",\n            englishName: \"English (Zimbabwe)\",\n            nativeName: \"English (Zimbabwe)\",\n            numberFormat: {\n                currency: {\n                    symbol: \"Z$\"\n                }\n            }\n        }],\n    \"es-EC\": [\"es-EC\", \"default\", {\n            name: \"es-EC\",\n            englishName: \"Spanish (Ecuador)\",\n            nativeName: \"Español (Ecuador)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Cyrl-ME\": [\"sr-Cyrl-ME\", \"default\", {\n            name: \"sr-Cyrl-ME\",\n            englishName: \"Serbian (Cyrillic, Montenegro)\",\n            nativeName: \"српски (Црна Гора)\",\n            language: \"sr-Cyrl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недеља\", \"понедељак\", \"уторак\", \"среда\", \"четвртак\", \"петак\", \"субота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"уто\", \"сре\", \"чет\", \"пет\", \"суб\"],\n                        namesShort: [\"не\", \"по\", \"ут\", \"ср\", \"че\", \"пе\", \"су\"]\n                    },\n                    months: {\n                        names: [\"јануар\", \"фебруар\", \"март\", \"април\", \"мај\", \"јун\", \"јул\", \"август\", \"септембар\", \"октобар\", \"новембар\", \"децембар\", \"\"],\n                        namesAbbr: [\"јан\", \"феб\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"нов\", \"дец\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"н.е.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-KW\": [\"ar-KW\", \"default\", {\n            name: \"ar-KW\",\n            englishName: \"Arabic (Kuwait)\",\n            nativeName: \"العربية (الكويت)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                decimals: 3,\n                percent: {\n                    decimals: 3\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    decimals: 3,\n                    symbol: \"د.ك.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"en-PH\": [\"en-PH\", \"default\", {\n            name: \"en-PH\",\n            englishName: \"English (Republic of the Philippines)\",\n            nativeName: \"English (Philippines)\",\n            numberFormat: {\n                currency: {\n                    symbol: \"Php\"\n                }\n            }\n        }],\n    \"es-CL\": [\"es-CL\", \"default\", {\n            name: \"es-CL\",\n            englishName: \"Spanish (Chile)\",\n            nativeName: \"Español (Chile)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-$ n\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy H:mm\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy H:mm:ss\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-AE\": [\"ar-AE\", \"default\", {\n            name: \"ar-AE\",\n            englishName: \"Arabic (U.A.E.)\",\n            nativeName: \"العربية (الإمارات العربية المتحدة)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"د.إ.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"es-UY\": [\"es-UY\", \"default\", {\n            name: \"es-UY\",\n            englishName: \"Spanish (Uruguay)\",\n            nativeName: \"Español (Uruguay)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"$U\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-BH\": [\"ar-BH\", \"default\", {\n            name: \"ar-BH\",\n            englishName: \"Arabic (Bahrain)\",\n            nativeName: \"العربية (البحرين)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                decimals: 3,\n                percent: {\n                    decimals: 3\n                },\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    decimals: 3,\n                    symbol: \"د.ب.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"ابريل\", \"مايو\", \"يونيو\", \"يوليو\", \"اغسطس\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"es-PY\": [\"es-PY\", \"default\", {\n            name: \"es-PY\",\n            englishName: \"Spanish (Paraguay)\",\n            nativeName: \"Español (Paraguay)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Gs\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"ar-QA\": [\"ar-QA\", \"default\", {\n            name: \"ar-QA\",\n            englishName: \"Arabic (Qatar)\",\n            nativeName: \"العربية (قطر)\",\n            language: \"ar\",\n            isRTL: true,\n            numberFormat: {\n                pattern: [\"n-\"],\n                currency: {\n                    pattern: [\"$n-\", \"$ n\"],\n                    symbol: \"ر.ق.‏\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"يناير\", \"فبراير\", \"مارس\", \"أبريل\", \"مايو\", \"يونيو\", \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd MMMM, yyyy hh:mm tt\",\n                        F: \"dd MMMM, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                UmAlQura: {\n                    name: \"UmAlQura\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MMMM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MMMM/yyyy hh:mm tt\",\n                        F: \"dd/MMMM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        _yearInfo: [\n                            /* MonthLengthFlags, Gregorian Date */\n                            [746, -2198707200000],\n                            [1769, -2168121600000],\n                            [3794, -2137449600000],\n                            [3748, -2106777600000],\n                            [3402, -2076192000000],\n                            [2710, -2045606400000],\n                            [1334, -2015020800000],\n                            [2741, -1984435200000],\n                            [3498, -1953763200000],\n                            [2980, -1923091200000],\n                            [2889, -1892505600000],\n                            [2707, -1861920000000],\n                            [1323, -1831334400000],\n                            [2647, -1800748800000],\n                            [1206, -1770076800000],\n                            [2741, -1739491200000],\n                            [1450, -1708819200000],\n                            [3413, -1678233600000],\n                            [3370, -1647561600000],\n                            [2646, -1616976000000],\n                            [1198, -1586390400000],\n                            [2397, -1555804800000],\n                            [748, -1525132800000],\n                            [1749, -1494547200000],\n                            [1706, -1463875200000],\n                            [1365, -1433289600000],\n                            [1195, -1402704000000],\n                            [2395, -1372118400000],\n                            [698, -1341446400000],\n                            [1397, -1310860800000],\n                            [2994, -1280188800000],\n                            [1892, -1249516800000],\n                            [1865, -1218931200000],\n                            [1621, -1188345600000],\n                            [683, -1157760000000],\n                            [1371, -1127174400000],\n                            [2778, -1096502400000],\n                            [1748, -1065830400000],\n                            [3785, -1035244800000],\n                            [3474, -1004572800000],\n                            [3365, -973987200000],\n                            [2637, -943401600000],\n                            [685, -912816000000],\n                            [1389, -882230400000],\n                            [2922, -851558400000],\n                            [2898, -820886400000],\n                            [2725, -790300800000],\n                            [2635, -759715200000],\n                            [1175, -729129600000],\n                            [2359, -698544000000],\n                            [694, -667872000000],\n                            [1397, -637286400000],\n                            [3434, -606614400000],\n                            [3410, -575942400000],\n                            [2710, -545356800000],\n                            [2349, -514771200000],\n                            [605, -484185600000],\n                            [1245, -453600000000],\n                            [2778, -422928000000],\n                            [1492, -392256000000],\n                            [3497, -361670400000],\n                            [3410, -330998400000],\n                            [2730, -300412800000],\n                            [1238, -269827200000],\n                            [2486, -239241600000],\n                            [884, -208569600000],\n                            [1897, -177984000000],\n                            [1874, -147312000000],\n                            [1701, -116726400000],\n                            [1355, -86140800000],\n                            [2731, -55555200000],\n                            [1370, -24883200000],\n                            [2773, 5702400000],\n                            [3538, 36374400000],\n                            [3492, 67046400000],\n                            [3401, 97632000000],\n                            [2709, 128217600000],\n                            [1325, 158803200000],\n                            [2653, 189388800000],\n                            [1370, 220060800000],\n                            [2773, 250646400000],\n                            [1706, 281318400000],\n                            [1685, 311904000000],\n                            [1323, 342489600000],\n                            [2647, 373075200000],\n                            [1198, 403747200000],\n                            [2422, 434332800000],\n                            [1388, 465004800000],\n                            [2901, 495590400000],\n                            [2730, 526262400000],\n                            [2645, 556848000000],\n                            [1197, 587433600000],\n                            [2397, 618019200000],\n                            [730, 648691200000],\n                            [1497, 679276800000],\n                            [3506, 709948800000],\n                            [2980, 740620800000],\n                            [2890, 771206400000],\n                            [2645, 801792000000],\n                            [693, 832377600000],\n                            [1397, 862963200000],\n                            [2922, 893635200000],\n                            [3026, 924307200000],\n                            [3012, 954979200000],\n                            [2953, 985564800000],\n                            [2709, 1016150400000],\n                            [1325, 1046736000000],\n                            [1453, 1077321600000],\n                            [2922, 1107993600000],\n                            [1748, 1138665600000],\n                            [3529, 1169251200000],\n                            [3474, 1199923200000],\n                            [2726, 1230508800000],\n                            [2390, 1261094400000],\n                            [686, 1291680000000],\n                            [1389, 1322265600000],\n                            [874, 1352937600000],\n                            [2901, 1383523200000],\n                            [2730, 1414195200000],\n                            [2381, 1444780800000],\n                            [1181, 1475366400000],\n                            [2397, 1505952000000],\n                            [698, 1536624000000],\n                            [1461, 1567209600000],\n                            [1450, 1597881600000],\n                            [3413, 1628467200000],\n                            [2714, 1659139200000],\n                            [2350, 1689724800000],\n                            [622, 1720310400000],\n                            [1373, 1750896000000],\n                            [2778, 1781568000000],\n                            [1748, 1812240000000],\n                            [1701, 1842825600000],\n                            [0, 1873411200000]\n                        ],\n                        minDate: -2198707200000,\n                        maxDate: 1873411199999,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var days = hday - 1, gyear = hyear - 1318;\n                            if (gyear < 0 || gyear >= this._yearInfo.length)\n                                return null;\n                            var info = this._yearInfo[gyear], gdate = new Date(info[1]), monthLength = info[0];\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the gregorian date in the same timezone,\n                            not what the gregorian date was at GMT time, so we adjust for the offset. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            for (var i = 0; i < hmonth; i++) {\n                                days += 29 + (monthLength & 1);\n                                monthLength = monthLength >> 1;\n                            }\n                            gdate.setDate(gdate.getDate() + days);\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            /* Date's ticks in javascript are always from the GMT time,\n                            but we are interested in the hijri date in the same timezone,\n                            not what the hijri date was at GMT time, so we adjust for the offset. */\n                            var ticks = gdate - gdate.getTimezoneOffset() * 60000;\n                            if (ticks < this.minDate || ticks > this.maxDate)\n                                return null;\n                            var hyear = 0, hmonth = 1;\n                            /* find the earliest gregorian date in the array that is greater than or equal to the given date */\n                            while (ticks > this._yearInfo[++hyear][1]) { }\n                            if (ticks !== this._yearInfo[hyear][1]) {\n                                hyear--;\n                            }\n                            var info = this._yearInfo[hyear], \n                            /* how many days has it been since the date we found in the array?\n                            86400000 = ticks per day */\n                            days = Math.floor((ticks - info[1]) / 86400000), monthLength = info[0];\n                            hyear += 1318; /* the Nth array entry corresponds to hijri year 1318+N\n                            now increment day/month based on the total days, considering\n                            how many days are in each month. We cannot run past the year\n                            mark since we would have found a different array entry in that case. */\n                            var daysInMonth = 29 + (monthLength & 1);\n                            while (days >= daysInMonth) {\n                                days -= daysInMonth;\n                                monthLength = monthLength >> 1;\n                                daysInMonth = 29 + (monthLength & 1);\n                                hmonth++;\n                            }\n                            /* remaining days is less than is in one month, thus is the day of the month we landed on\n                            hmonth-1 because in javascript months are zero based, stay consistent with that. */\n                            return [hyear, hmonth - 1, days + 1];\n                        }\n                    }\n                },\n                Hijri: {\n                    name: \"Hijri\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"],\n                        namesAbbr: [\"محرم\", \"صفر\", \"ربيع الأول\", \"ربيع الثاني\", \"جمادى الأولى\", \"جمادى الثانية\", \"رجب\", \"شعبان\", \"رمضان\", \"شوال\", \"ذو القعدة\", \"ذو الحجة\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"بعد الهجرة\", \"start\": null, \"offset\": 0 }],\n                    twoDigitYearMax: 1451,\n                    patterns: {\n                        d: \"dd/MM/yy\",\n                        D: \"dd/MM/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dd/MM/yyyy hh:mm tt\",\n                        F: \"dd/MM/yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    },\n                    convert: {\n                        /* Adapted to Script from System.Globalization.HijriCalendar */\n                        ticks1970: 62135596800000,\n                        /* number of days leading up to each month */\n                        monthDays: [0, 30, 59, 89, 118, 148, 177, 207, 236, 266, 295, 325, 355],\n                        minDate: -42521673600000,\n                        maxDate: 253402300799999,\n                        /* The number of days to add or subtract from the calendar to accommodate the variances\n                        in the start and the end of Ramadan and to accommodate the date difference between\n                        countries/regions. May be dynamically adjusted based on user preference, but should\n                        remain in the range of -2 to 2, inclusive. */\n                        hijriAdjustment: 0,\n                        toGregorian: function (hyear, hmonth, hday) {\n                            var daysSinceJan0101 = this.daysToYear(hyear) + this.monthDays[hmonth] + hday - 1 - this.hijriAdjustment;\n                            /* 86400000 = ticks per day */\n                            var gdate = new Date(daysSinceJan0101 * 86400000 - this.ticks1970);\n                            /* adjust for timezone, because we are interested in the gregorian date for the same timezone\n                            but ticks in javascript is always from GMT, unlike the server were ticks counts from the base\n                            date in the current timezone. */\n                            gdate.setMinutes(gdate.getMinutes() + gdate.getTimezoneOffset());\n                            return gdate;\n                        },\n                        fromGregorian: function (gdate) {\n                            if ((gdate < this.minDate) || (gdate > this.maxDate))\n                                return null;\n                            var ticks = this.ticks1970 + (gdate - 0) - gdate.getTimezoneOffset() * 60000, daysSinceJan0101 = Math.floor(ticks / 86400000) + 1 + this.hijriAdjustment;\n                            /* very particular formula determined by someone smart, adapted from the server-side implementation.\n                            it approximates the hijri year. */\n                            var hday, hmonth, hyear = Math.floor(((daysSinceJan0101 - 227013) * 30) / 10631) + 1, absDays = this.daysToYear(hyear), daysInYear = this.isLeapYear(hyear) ? 355 : 354;\n                            /* hyear is just approximate, it may need adjustment up or down by 1. */\n                            if (daysSinceJan0101 < absDays) {\n                                hyear--;\n                                absDays -= daysInYear;\n                            }\n                            else if (daysSinceJan0101 === absDays) {\n                                hyear--;\n                                absDays = this.daysToYear(hyear);\n                            }\n                            else {\n                                if (daysSinceJan0101 > (absDays + daysInYear)) {\n                                    absDays += daysInYear;\n                                    hyear++;\n                                }\n                            }\n                            /* determine month by looking at how many days into the hyear we are\n                            monthDays contains the number of days up to each month. */\n                            hmonth = 0;\n                            var daysIntoYear = daysSinceJan0101 - absDays;\n                            while (hmonth <= 11 && daysIntoYear > this.monthDays[hmonth]) {\n                                hmonth++;\n                            }\n                            hmonth--;\n                            hday = daysIntoYear - this.monthDays[hmonth];\n                            return [hyear, hmonth, hday];\n                        },\n                        daysToYear: function (year) {\n                            /* calculates how many days since Jan 1, 0001 */\n                            var yearsToYear30 = Math.floor((year - 1) / 30) * 30, yearsInto30 = year - yearsToYear30 - 1, days = Math.floor((yearsToYear30 * 10631) / 30) + 227013;\n                            while (yearsInto30 > 0) {\n                                days += (this.isLeapYear(yearsInto30) ? 355 : 354);\n                                yearsInto30--;\n                            }\n                            return days;\n                        },\n                        isLeapYear: function (year) {\n                            return ((((year * 11) + 14) % 30) < 11);\n                        }\n                    }\n                },\n                Gregorian_MiddleEastFrench: {\n                    name: \"Gregorian_MiddleEastFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"],\n                        namesAbbr: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n                        namesShort: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\", \"\"],\n                        namesAbbr: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"ap. J.-C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\"\n                    }\n                },\n                Gregorian_Arabic: {\n                    name: \"Gregorian_Arabic\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"],\n                        namesAbbr: [\"كانون الثاني\", \"شباط\", \"آذار\", \"نيسان\", \"أيار\", \"حزيران\", \"تموز\", \"آب\", \"أيلول\", \"تشرين الأول\", \"تشرين الثاني\", \"كانون الأول\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                },\n                Gregorian_TransliteratedFrench: {\n                    name: \"Gregorian_TransliteratedFrench\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesAbbr: [\"الأحد\", \"الإثنين\", \"الثلاثاء\", \"الأربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"],\n                        namesShort: [\"ح\", \"ن\", \"ث\", \"ر\", \"خ\", \"ج\", \"س\"]\n                    },\n                    months: {\n                        names: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"],\n                        namesAbbr: [\"جانفييه\", \"فيفرييه\", \"مارس\", \"أفريل\", \"مي\", \"جوان\", \"جوييه\", \"أوت\", \"سبتمبر\", \"اكتوبر\", \"نوفمبر\", \"ديسمبر\", \"\"]\n                    },\n                    AM: [\"ص\", \"ص\", \"ص\"],\n                    PM: [\"م\", \"م\", \"م\"],\n                    eras: [{ \"name\": \"م\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"MM/dd/yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, MMMM dd, yyyy hh:mm tt\",\n                        F: \"dddd, MMMM dd, yyyy hh:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"en-IN\": [\"en-IN\", \"default\", {\n            name: \"en-IN\",\n            englishName: \"English (India)\",\n            nativeName: \"English (India)\",\n            numberFormat: {\n                groupSizes: [3, 2],\n                percent: {\n                    groupSizes: [3, 2]\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 2],\n                    symbol: \"Rs.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"dd MMMM yyyy HH:mm\",\n                        F: \"dd MMMM yyyy HH:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"es-BO\": [\"es-BO\", \"default\", {\n            name: \"es-BO\",\n            englishName: \"Spanish (Bolivia)\",\n            nativeName: \"Español (Bolivia)\",\n            language: \"es\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"$b\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"en-MY\": [\"en-MY\", \"default\", {\n            name: \"en-MY\",\n            englishName: \"English (Malaysia)\",\n            nativeName: \"English (Malaysia)\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    symbol: \"RM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        namesShort: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n                    },\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd, d MMMM, yyyy\",\n                        f: \"dddd, d MMMM, yyyy h:mm tt\",\n                        F: \"dddd, d MMMM, yyyy h:mm:ss tt\",\n                        M: \"d MMMM\"\n                    }\n                }\n            }\n        }],\n    \"es-SV\": [\"es-SV\", \"default\", {\n            name: \"es-SV\",\n            englishName: \"Spanish (El Salvador)\",\n            nativeName: \"Español (El Salvador)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"en-SG\": [\"en-SG\", \"default\", {\n            name: \"en-SG\",\n            englishName: \"English (Singapore)\",\n            nativeName: \"English (Singapore)\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        namesShort: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]\n                    },\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd, d MMMM, yyyy\",\n                        f: \"dddd, d MMMM, yyyy h:mm tt\",\n                        F: \"dddd, d MMMM, yyyy h:mm:ss tt\",\n                        M: \"d MMMM\"\n                    }\n                }\n            }\n        }],\n    \"es-HN\": [\"es-HN\", \"default\", {\n            name: \"es-HN\",\n            englishName: \"Spanish (Honduras)\",\n            nativeName: \"Español (Honduras)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"L.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-NI\": [\"es-NI\", \"default\", {\n            name: \"es-NI\",\n            englishName: \"Spanish (Nicaragua)\",\n            nativeName: \"Español (Nicaragua)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"C$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-PR\": [\"es-PR\", \"default\", {\n            name: \"es-PR\",\n            englishName: \"Spanish (Puerto Rico)\",\n            nativeName: \"Español (Puerto Rico)\",\n            language: \"es\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"($ n)\", \"$ n\"],\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sá\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    AM: [\"a.m.\", \"a.m.\", \"A.M.\"],\n                    PM: [\"p.m.\", \"p.m.\", \"P.M.\"],\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"dd/MM/yyyy\",\n                        D: \"dddd, dd' de 'MMMM' de 'yyyy\",\n                        t: \"hh:mm tt\",\n                        T: \"hh:mm:ss tt\",\n                        f: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm tt\",\n                        F: \"dddd, dd' de 'MMMM' de 'yyyy hh:mm:ss tt\",\n                        M: \"dd MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"es-US\": [\"es-US\", \"default\", {\n            name: \"es-US\",\n            englishName: \"Spanish (United States)\",\n            nativeName: \"Español (Estados Unidos)\",\n            language: \"es\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"domingo\", \"lunes\", \"martes\", \"miércoles\", \"jueves\", \"viernes\", \"sábado\"],\n                        namesAbbr: [\"dom\", \"lun\", \"mar\", \"mié\", \"jue\", \"vie\", \"sáb\"],\n                        namesShort: [\"do\", \"lu\", \"ma\", \"mi\", \"ju\", \"vi\", \"sa\"]\n                    },\n                    months: {\n                        names: [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\", \"\"],\n                        namesAbbr: [\"ene\", \"feb\", \"mar\", \"abr\", \"may\", \"jun\", \"jul\", \"ago\", \"sep\", \"oct\", \"nov\", \"dic\", \"\"]\n                    },\n                    eras: [{ \"name\": \"d.C.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        M: \"dd' de 'MMMM\",\n                        Y: \"MMMM' de 'yyyy\"\n                    }\n                }\n            }\n        }],\n    \"bs-Cyrl\": [\"bs-Cyrl\", \"default\", {\n            name: \"bs-Cyrl\",\n            englishName: \"Bosnian (Cyrillic)\",\n            nativeName: \"босански\",\n            language: \"bs-Cyrl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"КМ\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недјеља\", \"понедјељак\", \"уторак\", \"сриједа\", \"четвртак\", \"петак\", \"субота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"уто\", \"сре\", \"чет\", \"пет\", \"суб\"],\n                        namesShort: [\"н\", \"п\", \"у\", \"с\", \"ч\", \"п\", \"с\"]\n                    },\n                    months: {\n                        names: [\"јануар\", \"фебруар\", \"март\", \"април\", \"мај\", \"јун\", \"јул\", \"август\", \"септембар\", \"октобар\", \"новембар\", \"децембар\", \"\"],\n                        namesAbbr: [\"јан\", \"феб\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"нов\", \"дец\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"н.е.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\"\n                    }\n                }\n            }\n        }],\n    \"bs-Latn\": [\"bs-Latn\", \"default\", {\n            name: \"bs-Latn\",\n            englishName: \"Bosnian (Latin)\",\n            nativeName: \"bosanski\",\n            language: \"bs-Latn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"KM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedjelja\", \"ponedjeljak\", \"utorak\", \"srijeda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sri\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"juni\", \"juli\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Cyrl\": [\"sr-Cyrl\", \"default\", {\n            name: \"sr-Cyrl\",\n            englishName: \"Serbian (Cyrillic)\",\n            nativeName: \"српски\",\n            language: \"sr-Cyrl\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Дин.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"недеља\", \"понедељак\", \"уторак\", \"среда\", \"четвртак\", \"петак\", \"субота\"],\n                        namesAbbr: [\"нед\", \"пон\", \"уто\", \"сре\", \"чет\", \"пет\", \"суб\"],\n                        namesShort: [\"не\", \"по\", \"ут\", \"ср\", \"че\", \"пе\", \"су\"]\n                    },\n                    months: {\n                        names: [\"јануар\", \"фебруар\", \"март\", \"април\", \"мај\", \"јун\", \"јул\", \"август\", \"септембар\", \"октобар\", \"новембар\", \"децембар\", \"\"],\n                        namesAbbr: [\"јан\", \"феб\", \"мар\", \"апр\", \"мај\", \"јун\", \"јул\", \"авг\", \"сеп\", \"окт\", \"нов\", \"дец\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"н.е.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr-Latn\": [\"sr-Latn\", \"default\", {\n            name: \"sr-Latn\",\n            englishName: \"Serbian (Latin)\",\n            nativeName: \"srpski\",\n            language: \"sr-Latn\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Din.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljak\", \"utorak\", \"sreda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"jun\", \"jul\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n.e.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"smn\": [\"smn\", \"default\", {\n            name: \"smn\",\n            englishName: \"Sami (Inari)\",\n            nativeName: \"sämikielâ\",\n            language: \"smn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"pasepeivi\", \"vuossargâ\", \"majebargâ\", \"koskokko\", \"tuorâstâh\", \"vástuppeivi\", \"lávárdâh\"],\n                        namesAbbr: [\"pa\", \"vu\", \"ma\", \"ko\", \"tu\", \"vá\", \"lá\"],\n                        namesShort: [\"p\", \"v\", \"m\", \"k\", \"t\", \"v\", \"l\"]\n                    },\n                    months: {\n                        names: [\"uđđâivemáánu\", \"kuovâmáánu\", \"njuhčâmáánu\", \"cuáŋuimáánu\", \"vyesimáánu\", \"kesimáánu\", \"syeinimáánu\", \"porgemáánu\", \"čohčâmáánu\", \"roovvâdmáánu\", \"skammâmáánu\", \"juovlâmáánu\", \"\"],\n                        namesAbbr: [\"uđiv\", \"kuov\", \"njuh\", \"cuoŋ\", \"vyes\", \"kesi\", \"syei\", \"porg\", \"čoh\", \"roov\", \"ska\", \"juov\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"MMMM d'. p. 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"MMMM d'. p. 'yyyy H:mm\",\n                        F: \"MMMM d'. p. 'yyyy H:mm:ss\",\n                        M: \"MMMM d'. p. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"az-Cyrl\": [\"az-Cyrl\", \"default\", {\n            name: \"az-Cyrl\",\n            englishName: \"Azeri (Cyrillic)\",\n            nativeName: \"Азәрбајҹан дили\",\n            language: \"az-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"ман.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Базар\", \"Базар ертәси\", \"Чәршәнбә ахшамы\", \"Чәршәнбә\", \"Ҹүмә ахшамы\", \"Ҹүмә\", \"Шәнбә\"],\n                        namesAbbr: [\"Б\", \"Бе\", \"Ча\", \"Ч\", \"Ҹа\", \"Ҹ\", \"Ш\"],\n                        namesShort: [\"Б\", \"Бе\", \"Ча\", \"Ч\", \"Ҹа\", \"Ҹ\", \"Ш\"]\n                    },\n                    months: {\n                        names: [\"Јанвар\", \"Феврал\", \"Март\", \"Апрел\", \"Мај\", \"Ијун\", \"Ијул\", \"Август\", \"Сентјабр\", \"Октјабр\", \"Нојабр\", \"Декабр\", \"\"],\n                        namesAbbr: [\"Јан\", \"Фев\", \"Мар\", \"Апр\", \"Мај\", \"Ијун\", \"Ијул\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"јанвар\", \"феврал\", \"март\", \"апрел\", \"мај\", \"ијун\", \"ијул\", \"август\", \"сентјабр\", \"октјабр\", \"нојабр\", \"декабр\", \"\"],\n                        namesAbbr: [\"Јан\", \"Фев\", \"Мар\", \"Апр\", \"мая\", \"ијун\", \"ијул\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sms\": [\"sms\", \"default\", {\n            name: \"sms\",\n            englishName: \"Sami (Skolt)\",\n            nativeName: \"sääm´ǩiõll\",\n            language: \"sms\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"pâ´sspei´vv\", \"vuõssargg\", \"mââibargg\", \"seärad\", \"nelljdpei´vv\", \"piâtnâc\", \"sue´vet\"],\n                        namesAbbr: [\"pâ\", \"vu\", \"mâ\", \"se\", \"ne\", \"pi\", \"su\"],\n                        namesShort: [\"p\", \"v\", \"m\", \"s\", \"n\", \"p\", \"s\"]\n                    },\n                    months: {\n                        names: [\"ođđee´jjmään\", \"tä´lvvmään\", \"pâ´zzlâšttammään\", \"njuhččmään\", \"vue´ssmään\", \"ǩie´ssmään\", \"suei´nnmään\", \"på´rǧǧmään\", \"čõhččmään\", \"kålggmään\", \"skamm´mään\", \"rosttovmään\", \"\"],\n                        namesAbbr: [\"ođjm\", \"tä´lvv\", \"pâzl\", \"njuh\", \"vue\", \"ǩie\", \"suei\", \"på´r\", \"čõh\", \"kålg\", \"ska\", \"rost\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ođđee´jjmannu\", \"tä´lvvmannu\", \"pâ´zzlâšttammannu\", \"njuhččmannu\", \"vue´ssmannu\", \"ǩie´ssmannu\", \"suei´nnmannu\", \"på´rǧǧmannu\", \"čõhččmannu\", \"kålggmannu\", \"skamm´mannu\", \"rosttovmannu\", \"\"],\n                        namesAbbr: [\"ođjm\", \"tä´lvv\", \"pâzl\", \"njuh\", \"vue\", \"ǩie\", \"suei\", \"på´r\", \"čõh\", \"kålg\", \"ska\", \"rost\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"MMMM d'. p. 'yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"MMMM d'. p. 'yyyy H:mm\",\n                        F: \"MMMM d'. p. 'yyyy H:mm:ss\",\n                        M: \"MMMM d'. p. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"zh\": [\"zh\", \"default\", {\n            name: \"zh\",\n            englishName: \"Chinese\",\n            nativeName: \"中文\",\n            language: \"zh\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"nn\": [\"nn\", \"default\", {\n            name: \"nn\",\n            englishName: \"Norwegian (Nynorsk)\",\n            nativeName: \"norsk (nynorsk)\",\n            language: \"nn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"søndag\", \"måndag\", \"tysdag\", \"onsdag\", \"torsdag\", \"fredag\", \"laurdag\"],\n                        namesAbbr: [\"sø\", \"må\", \"ty\", \"on\", \"to\", \"fr\", \"la\"],\n                        namesShort: [\"sø\", \"må\", \"ty\", \"on\", \"to\", \"fr\", \"la\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mars\", \"april\", \"mai\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"desember\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"bs\": [\"bs\", \"default\", {\n            name: \"bs\",\n            englishName: \"Bosnian\",\n            nativeName: \"bosanski\",\n            language: \"bs\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"KM\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedjelja\", \"ponedjeljak\", \"utorak\", \"srijeda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sri\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"juni\", \"juli\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"az-Latn\": [\"az-Latn\", \"default\", {\n            name: \"az-Latn\",\n            englishName: \"Azeri (Latin)\",\n            nativeName: \"Azərbaycan­ılı\",\n            language: \"az-Latn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"man.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Bazar\", \"Bazar ertəsi\", \"Çərşənbə axşamı\", \"Çərşənbə\", \"Cümə axşamı\", \"Cümə\", \"Şənbə\"],\n                        namesAbbr: [\"B\", \"Be\", \"Ça\", \"Ç\", \"Ca\", \"C\", \"Ş\"],\n                        namesShort: [\"B\", \"Be\", \"Ça\", \"Ç\", \"Ca\", \"C\", \"Ş\"]\n                    },\n                    months: {\n                        names: [\"Yanvar\", \"Fevral\", \"Mart\", \"Aprel\", \"May\", \"İyun\", \"İyul\", \"Avgust\", \"Sentyabr\", \"Oktyabr\", \"Noyabr\", \"Dekabr\", \"\"],\n                        namesAbbr: [\"Yan\", \"Fev\", \"Mar\", \"Apr\", \"May\", \"İyun\", \"İyul\", \"Avg\", \"Sen\", \"Okt\", \"Noy\", \"Dek\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"],\n                        namesAbbr: [\"Yan\", \"Fev\", \"Mar\", \"Apr\", \"May\", \"İyun\", \"İyul\", \"Avg\", \"Sen\", \"Okt\", \"Noy\", \"Dek\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sma\": [\"sma\", \"default\", {\n            name: \"sma\",\n            englishName: \"Sami (Southern)\",\n            nativeName: \"åarjelsaemiengiele\",\n            language: \"sma\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"aejlege\", \"måanta\", \"dæjsta\", \"gaskevåhkoe\", \"duarsta\", \"bearjadahke\", \"laavvardahke\"],\n                        namesAbbr: [\"aej\", \"måa\", \"dæj\", \"gask\", \"duar\", \"bearj\", \"laav\"],\n                        namesShort: [\"a\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"tsïengele\", \"goevte\", \"njoktje\", \"voerhtje\", \"suehpede\", \"ruffie\", \"snjaltje\", \"mïetske\", \"skïerede\", \"golke\", \"rahka\", \"goeve\", \"\"],\n                        namesAbbr: [\"tsïen\", \"goevt\", \"njok\", \"voer\", \"sueh\", \"ruff\", \"snja\", \"mïet\", \"skïer\", \"golk\", \"rahk\", \"goev\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"tsïengelen\", \"goevten\", \"njoktjen\", \"voerhtjen\", \"suehpeden\", \"ruffien\", \"snjaltjen\", \"mïetsken\", \"skïereden\", \"golken\", \"rahkan\", \"goeven\", \"\"],\n                        namesAbbr: [\"tsïen\", \"goevt\", \"njok\", \"voer\", \"sueh\", \"ruff\", \"snja\", \"mïet\", \"skïer\", \"golk\", \"rahk\", \"goev\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"uz-Cyrl\": [\"uz-Cyrl\", \"default\", {\n            name: \"uz-Cyrl\",\n            englishName: \"Uzbek (Cyrillic)\",\n            nativeName: \"Ўзбек\",\n            language: \"uz-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"сўм\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"якшанба\", \"душанба\", \"сешанба\", \"чоршанба\", \"пайшанба\", \"жума\", \"шанба\"],\n                        namesAbbr: [\"якш\", \"дш\", \"сш\", \"чш\", \"пш\", \"ж\", \"ш\"],\n                        namesShort: [\"я\", \"д\", \"с\", \"ч\", \"п\", \"ж\", \"ш\"]\n                    },\n                    months: {\n                        names: [\"Январ\", \"Феврал\", \"Март\", \"Апрел\", \"Май\", \"Июн\", \"Июл\", \"Август\", \"Сентябр\", \"Октябр\", \"Ноябр\", \"Декабр\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"январ\", \"феврал\", \"март\", \"апрел\", \"май\", \"июн\", \"июл\", \"август\", \"сентябр\", \"октябр\", \"ноябр\", \"декабр\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"мая\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"yyyy 'йил' d-MMMM\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy 'йил' d-MMMM HH:mm\",\n                        F: \"yyyy 'йил' d-MMMM HH:mm:ss\",\n                        M: \"d-MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"mn-Cyrl\": [\"mn-Cyrl\", \"default\", {\n            name: \"mn-Cyrl\",\n            englishName: \"Mongolian (Cyrillic)\",\n            nativeName: \"Монгол хэл\",\n            language: \"mn-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n$\", \"n$\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"₮\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"Ням\", \"Даваа\", \"Мягмар\", \"Лхагва\", \"Пүрэв\", \"Баасан\", \"Бямба\"],\n                        namesAbbr: [\"Ня\", \"Да\", \"Мя\", \"Лх\", \"Пү\", \"Ба\", \"Бя\"],\n                        namesShort: [\"Ня\", \"Да\", \"Мя\", \"Лх\", \"Пү\", \"Ба\", \"Бя\"]\n                    },\n                    months: {\n                        names: [\"1 дүгээр сар\", \"2 дугаар сар\", \"3 дугаар сар\", \"4 дүгээр сар\", \"5 дугаар сар\", \"6 дугаар сар\", \"7 дугаар сар\", \"8 дугаар сар\", \"9 дүгээр сар\", \"10 дугаар сар\", \"11 дүгээр сар\", \"12 дугаар сар\", \"\"],\n                        namesAbbr: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"1 дүгээр сарын\", \"2 дугаар сарын\", \"3 дугаар сарын\", \"4 дүгээр сарын\", \"5 дугаар сарын\", \"6 дугаар сарын\", \"7 дугаар сарын\", \"8 дугаар сарын\", \"9 дүгээр сарын\", \"10 дугаар сарын\", \"11 дүгээр сарын\", \"12 дугаар сарын\", \"\"],\n                        namesAbbr: [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yy.MM.dd\",\n                        D: \"yyyy 'оны' MMMM d\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy 'оны' MMMM d H:mm\",\n                        F: \"yyyy 'оны' MMMM d H:mm:ss\",\n                        M: \"d MMMM\",\n                        Y: \"yyyy 'он' MMMM\"\n                    }\n                }\n            }\n        }],\n    \"iu-Cans\": [\"iu-Cans\", \"default\", {\n            name: \"iu-Cans\",\n            englishName: \"Inuktitut (Syllabics)\",\n            nativeName: \"ᐃᓄᒃᑎᑐᑦ\",\n            language: \"iu-Cans\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"ᓈᑦᑏᖑᔭ\", \"ᓇᒡᒐᔾᔭᐅ\", \"ᐊᐃᑉᐱᖅ\", \"ᐱᖓᑦᓯᖅ\", \"ᓯᑕᒻᒥᖅ\", \"ᑕᓪᓕᕐᒥᖅ\", \"ᓯᕙᑖᕐᕕᒃ\"],\n                        namesAbbr: [\"ᓈᑦᑏ\", \"ᓇᒡᒐ\", \"ᐊᐃᑉᐱ\", \"ᐱᖓᑦᓯ\", \"ᓯᑕ\", \"ᑕᓪᓕ\", \"ᓯᕙᑖᕐᕕᒃ\"],\n                        namesShort: [\"ᓈ\", \"ᓇ\", \"ᐊ\", \"ᐱ\", \"ᓯ\", \"ᑕ\", \"ᓯ\"]\n                    },\n                    months: {\n                        names: [\"ᔮᓐᓄᐊᕆ\", \"ᕖᕝᕗᐊᕆ\", \"ᒫᑦᓯ\", \"ᐄᐳᕆ\", \"ᒪᐃ\", \"ᔫᓂ\", \"ᔪᓚᐃ\", \"ᐋᒡᒌᓯ\", \"ᓯᑎᐱᕆ\", \"ᐅᑐᐱᕆ\", \"ᓄᕕᐱᕆ\", \"ᑎᓯᐱᕆ\", \"\"],\n                        namesAbbr: [\"ᔮᓐᓄ\", \"ᕖᕝᕗ\", \"ᒫᑦᓯ\", \"ᐄᐳᕆ\", \"ᒪᐃ\", \"ᔫᓂ\", \"ᔪᓚᐃ\", \"ᐋᒡᒌ\", \"ᓯᑎᐱ\", \"ᐅᑐᐱ\", \"ᓄᕕᐱ\", \"ᑎᓯᐱ\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"dddd,MMMM dd,yyyy\",\n                        f: \"dddd,MMMM dd,yyyy h:mm tt\",\n                        F: \"dddd,MMMM dd,yyyy h:mm:ss tt\",\n                        Y: \"MMMM,yyyy\"\n                    }\n                }\n            }\n        }],\n    \"zh-Hant\": [\"zh-Hant\", \"default\", {\n            name: \"zh-Hant\",\n            englishName: \"Chinese (Traditional)\",\n            nativeName: \"中文(繁體)\",\n            language: \"zh-Hant\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    symbol: \"HK$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"週日\", \"週一\", \"週二\", \"週三\", \"週四\", \"週五\", \"週六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"nb\": [\"nb\", \"default\", {\n            name: \"nb\",\n            englishName: \"Norwegian (Bokmål)\",\n            nativeName: \"norsk (bokmål)\",\n            language: \"nb\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"$ -n\", \"$ n\"],\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"søndag\", \"mandag\", \"tirsdag\", \"onsdag\", \"torsdag\", \"fredag\", \"lørdag\"],\n                        namesAbbr: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"],\n                        namesShort: [\"sø\", \"ma\", \"ti\", \"on\", \"to\", \"fr\", \"lø\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mars\", \"april\", \"mai\", \"juni\", \"juli\", \"august\", \"september\", \"oktober\", \"november\", \"desember\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"mai\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"des\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"d. MMMM yyyy HH:mm\",\n                        F: \"d. MMMM yyyy HH:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"sr\": [\"sr\", \"default\", {\n            name: \"sr\",\n            englishName: \"Serbian\",\n            nativeName: \"srpski\",\n            language: \"sr\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"Din.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"nedelja\", \"ponedeljak\", \"utorak\", \"sreda\", \"četvrtak\", \"petak\", \"subota\"],\n                        namesAbbr: [\"ned\", \"pon\", \"uto\", \"sre\", \"čet\", \"pet\", \"sub\"],\n                        namesShort: [\"ne\", \"po\", \"ut\", \"sr\", \"če\", \"pe\", \"su\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"mart\", \"april\", \"maj\", \"jun\", \"jul\", \"avgust\", \"septembar\", \"oktobar\", \"novembar\", \"decembar\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"avg\", \"sep\", \"okt\", \"nov\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"n.e.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d.M.yyyy\",\n                        D: \"d. MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d. MMMM yyyy H:mm\",\n                        F: \"d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"tg-Cyrl\": [\"tg-Cyrl\", \"default\", {\n            name: \"tg-Cyrl\",\n            englishName: \"Tajik (Cyrillic)\",\n            nativeName: \"Тоҷикӣ\",\n            language: \"tg-Cyrl\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    groupSizes: [3, 0],\n                    \",\": \" \",\n                    \".\": \";\",\n                    symbol: \"т.р.\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \".\",\n                    days: {\n                        names: [\"Яш\", \"Душанбе\", \"Сешанбе\", \"Чоршанбе\", \"Панҷшанбе\", \"Ҷумъа\", \"Шанбе\"],\n                        namesAbbr: [\"Яш\", \"Дш\", \"Сш\", \"Чш\", \"Пш\", \"Ҷм\", \"Шн\"],\n                        namesShort: [\"Яш\", \"Дш\", \"Сш\", \"Чш\", \"Пш\", \"Ҷм\", \"Шн\"]\n                    },\n                    months: {\n                        names: [\"Январ\", \"Феврал\", \"Март\", \"Апрел\", \"Май\", \"Июн\", \"Июл\", \"Август\", \"Сентябр\", \"Октябр\", \"Ноябр\", \"Декабр\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"январи\", \"феврали\", \"марти\", \"апрели\", \"маи\", \"июни\", \"июли\", \"августи\", \"сентябри\", \"октябри\", \"ноябри\", \"декабри\", \"\"],\n                        namesAbbr: [\"Янв\", \"Фев\", \"Мар\", \"Апр\", \"Май\", \"Июн\", \"Июл\", \"Авг\", \"Сен\", \"Окт\", \"Ноя\", \"Дек\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd.MM.yy\",\n                        D: \"d MMMM yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"d MMMM yyyy H:mm\",\n                        F: \"d MMMM yyyy H:mm:ss\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"dsb\": [\"dsb\", \"default\", {\n            name: \"dsb\",\n            englishName: \"Lower Sorbian\",\n            nativeName: \"dolnoserbšćina\",\n            language: \"dsb\",\n            numberFormat: {\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"€\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \". \",\n                    firstDay: 1,\n                    days: {\n                        names: [\"njeźela\", \"ponjeźele\", \"wałtora\", \"srjoda\", \"stwortk\", \"pětk\", \"sobota\"],\n                        namesAbbr: [\"nje\", \"pon\", \"wał\", \"srj\", \"stw\", \"pět\", \"sob\"],\n                        namesShort: [\"n\", \"p\", \"w\", \"s\", \"s\", \"p\", \"s\"]\n                    },\n                    months: {\n                        names: [\"januar\", \"februar\", \"měrc\", \"apryl\", \"maj\", \"junij\", \"julij\", \"awgust\", \"september\", \"oktober\", \"nowember\", \"december\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"maj\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"januara\", \"februara\", \"měrca\", \"apryla\", \"maja\", \"junija\", \"julija\", \"awgusta\", \"septembra\", \"oktobra\", \"nowembra\", \"decembra\", \"\"],\n                        namesAbbr: [\"jan\", \"feb\", \"měr\", \"apr\", \"maj\", \"jun\", \"jul\", \"awg\", \"sep\", \"okt\", \"now\", \"dec\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"po Chr.\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d. M. yyyy\",\n                        D: \"dddd, 'dnja' d. MMMM yyyy\",\n                        t: \"H.mm 'goź.'\",\n                        T: \"H:mm:ss\",\n                        f: \"dddd, 'dnja' d. MMMM yyyy H.mm 'goź.'\",\n                        F: \"dddd, 'dnja' d. MMMM yyyy H:mm:ss\",\n                        M: \"d. MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"smj\": [\"smj\", \"default\", {\n            name: \"smj\",\n            englishName: \"Sami (Lule)\",\n            nativeName: \"julevusámegiella\",\n            language: \"smj\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    \",\": \".\",\n                    \".\": \",\",\n                    symbol: \"kr\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 1,\n                    days: {\n                        names: [\"ájllek\", \"mánnodahka\", \"dijstahka\", \"gasskavahkko\", \"duorastahka\", \"bierjjedahka\", \"lávvodahka\"],\n                        namesAbbr: [\"ájl\", \"mán\", \"dis\", \"gas\", \"duor\", \"bier\", \"láv\"],\n                        namesShort: [\"á\", \"m\", \"d\", \"g\", \"d\", \"b\", \"l\"]\n                    },\n                    months: {\n                        names: [\"ådåjakmánno\", \"guovvamánno\", \"sjnjuktjamánno\", \"vuoratjismánno\", \"moarmesmánno\", \"biehtsemánno\", \"sjnjilltjamánno\", \"bårggemánno\", \"ragátmánno\", \"gålgådismánno\", \"basádismánno\", \"javllamánno\", \"\"],\n                        namesAbbr: [\"ådåj\", \"guov\", \"snju\", \"vuor\", \"moar\", \"bieh\", \"snji\", \"bårg\", \"ragá\", \"gålg\", \"basá\", \"javl\", \"\"]\n                    },\n                    monthsGenitive: {\n                        names: [\"ådåjakmáno\", \"guovvamáno\", \"sjnjuktjamáno\", \"vuoratjismáno\", \"moarmesmáno\", \"biehtsemáno\", \"sjnjilltjamáno\", \"bårggemáno\", \"ragátmáno\", \"gålgådismáno\", \"basádismáno\", \"javllamáno\", \"\"],\n                        namesAbbr: [\"ådåj\", \"guov\", \"snju\", \"vuor\", \"moar\", \"bieh\", \"snji\", \"bårg\", \"ragá\", \"gålg\", \"basá\", \"javl\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"yyyy-MM-dd\",\n                        D: \"MMMM d'. b. 'yyyy\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"MMMM d'. b. 'yyyy HH:mm\",\n                        F: \"MMMM d'. b. 'yyyy HH:mm:ss\",\n                        M: \"MMMM d'. b. '\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"uz-Latn\": [\"uz-Latn\", \"default\", {\n            name: \"uz-Latn\",\n            englishName: \"Uzbek (Latin)\",\n            nativeName: \"U'zbek\",\n            language: \"uz-Latn\",\n            numberFormat: {\n                \",\": \" \",\n                \".\": \",\",\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    \",\": \" \",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    decimals: 0,\n                    \",\": \" \",\n                    \".\": \",\",\n                    symbol: \"so'm\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"yakshanba\", \"dushanba\", \"seshanba\", \"chorshanba\", \"payshanba\", \"juma\", \"shanba\"],\n                        namesAbbr: [\"yak.\", \"dsh.\", \"sesh.\", \"chr.\", \"psh.\", \"jm.\", \"sh.\"],\n                        namesShort: [\"ya\", \"d\", \"s\", \"ch\", \"p\", \"j\", \"sh\"]\n                    },\n                    months: {\n                        names: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"],\n                        namesAbbr: [\"yanvar\", \"fevral\", \"mart\", \"aprel\", \"may\", \"iyun\", \"iyul\", \"avgust\", \"sentyabr\", \"oktyabr\", \"noyabr\", \"dekabr\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd/MM yyyy\",\n                        D: \"yyyy 'yil' d-MMMM\",\n                        t: \"HH:mm\",\n                        T: \"HH:mm:ss\",\n                        f: \"yyyy 'yil' d-MMMM HH:mm\",\n                        F: \"yyyy 'yil' d-MMMM HH:mm:ss\",\n                        M: \"d-MMMM\",\n                        Y: \"MMMM yyyy\"\n                    }\n                }\n            }\n        }],\n    \"mn-Mong\": [\"mn-Mong\", \"default\", {\n            name: \"mn-Mong\",\n            englishName: \"Mongolian (Traditional Mongolian)\",\n            nativeName: \"ᠮᠤᠨᠭᠭᠤᠯ ᠬᠡᠯᠡ\",\n            language: \"mn-Mong\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    pattern: [\"-n%\", \"n%\"],\n                    groupSizes: [3, 0]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    groupSizes: [3, 0],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    firstDay: 1,\n                    days: {\n                        names: [\"ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ\"],\n                        namesAbbr: [\"ᠭᠠᠷᠠᠭ ᠤᠨ ᠡᠳᠦᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠨᠢᠭᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠬᠣᠶᠠᠷ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠭᠤᠷᠪᠠᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠳᠥᠷᠪᠡᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠲᠠᠪᠤᠨ\", \"ᠭᠠᠷᠠᠭ ᠤᠨ ᠵᠢᠷᠭᠤᠭᠠᠨ\"],\n                        namesShort: [\"ᠡ‍\", \"ᠨᠢ‍\", \"ᠬᠣ‍\", \"ᠭᠤ‍\", \"ᠳᠥ‍\", \"ᠲᠠ‍\", \"ᠵᠢ‍\"]\n                    },\n                    months: {\n                        names: [\"ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"\"],\n                        namesAbbr: [\"ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠭᠤᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠦᠷᠪᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠠᠪᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠵᠢᠷᠭᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠲᠤᠯᠤᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠨᠠᠢᠮᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠶᠢᠰᠦᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ\", \"ᠠᠷᠪᠠᠨ ᠬᠤᠶ᠋ᠠᠳᠤᠭᠠᠷ ᠰᠠᠷ᠎ᠠ\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    eras: [{ \"name\": \"ᠣᠨ ᠲᠣᠭᠠᠯᠠᠯ ᠤᠨ\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm\",\n                        F: \"yyyy'ᠣᠨ ᠤ᠋' M'ᠰᠠᠷ᠎ᠠ  ᠢᠢᠨ 'd' ᠤ᠋ ᠡᠳᠦᠷ' H:mm:ss\",\n                        M: \"M'ᠰᠠᠷ᠎ᠠ' d'ᠡᠳᠦᠷ'\",\n                        Y: \"yyyy'ᠣᠨ' M'ᠰᠠᠷ᠎ᠠ'\"\n                    }\n                }\n            }\n        }],\n    \"iu-Latn\": [\"iu-Latn\", \"default\", {\n            name: \"iu-Latn\",\n            englishName: \"Inuktitut (Latin)\",\n            nativeName: \"Inuktitut\",\n            language: \"iu-Latn\",\n            numberFormat: {\n                groupSizes: [3, 0],\n                percent: {\n                    groupSizes: [3, 0]\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Naattiinguja\", \"Naggajjau\", \"Aippiq\", \"Pingatsiq\", \"Sitammiq\", \"Tallirmiq\", \"Sivataarvik\"],\n                        namesAbbr: [\"Nat\", \"Nag\", \"Aip\", \"Pi\", \"Sit\", \"Tal\", \"Siv\"],\n                        namesShort: [\"N\", \"N\", \"A\", \"P\", \"S\", \"T\", \"S\"]\n                    },\n                    months: {\n                        names: [\"Jaannuari\", \"Viivvuari\", \"Maatsi\", \"Iipuri\", \"Mai\", \"Juuni\", \"Julai\", \"Aaggiisi\", \"Sitipiri\", \"Utupiri\", \"Nuvipiri\", \"Tisipiri\", \"\"],\n                        namesAbbr: [\"Jan\", \"Viv\", \"Mas\", \"Ipu\", \"Mai\", \"Jun\", \"Jul\", \"Agi\", \"Sii\", \"Uut\", \"Nuv\", \"Tis\", \"\"]\n                    },\n                    patterns: {\n                        d: \"d/MM/yyyy\",\n                        D: \"ddd, MMMM dd,yyyy\",\n                        f: \"ddd, MMMM dd,yyyy h:mm tt\",\n                        F: \"ddd, MMMM dd,yyyy h:mm:ss tt\"\n                    }\n                }\n            }\n        }],\n    \"tzm-Latn\": [\"tzm-Latn\", \"default\", {\n            name: \"tzm-Latn\",\n            englishName: \"Tamazight (Latin)\",\n            nativeName: \"Tamazight\",\n            language: \"tzm-Latn\",\n            numberFormat: {\n                pattern: [\"n-\"],\n                \",\": \".\",\n                \".\": \",\",\n                percent: {\n                    \",\": \".\",\n                    \".\": \",\"\n                },\n                currency: {\n                    pattern: [\"-n $\", \"n $\"],\n                    symbol: \"DZD\"\n                }\n            },\n            calendars: {\n                standard: {\n                    \"/\": \"-\",\n                    firstDay: 6,\n                    days: {\n                        names: [\"Acer\", \"Arime\", \"Aram\", \"Ahad\", \"Amhadh\", \"Sem\", \"Sedh\"],\n                        namesAbbr: [\"Ace\", \"Ari\", \"Ara\", \"Aha\", \"Amh\", \"Sem\", \"Sed\"],\n                        namesShort: [\"Ac\", \"Ar\", \"Ar\", \"Ah\", \"Am\", \"Se\", \"Se\"]\n                    },\n                    months: {\n                        names: [\"Yenayer\", \"Furar\", \"Maghres\", \"Yebrir\", \"Mayu\", \"Yunyu\", \"Yulyu\", \"Ghuct\", \"Cutenber\", \"Ktuber\", \"Wambir\", \"Dujanbir\", \"\"],\n                        namesAbbr: [\"Yen\", \"Fur\", \"Mag\", \"Yeb\", \"May\", \"Yun\", \"Yul\", \"Ghu\", \"Cut\", \"Ktu\", \"Wam\", \"Duj\", \"\"]\n                    },\n                    AM: null,\n                    PM: null,\n                    patterns: {\n                        d: \"dd-MM-yyyy\",\n                        D: \"dd MMMM, yyyy\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"dd MMMM, yyyy H:mm\",\n                        F: \"dd MMMM, yyyy H:mm:ss\",\n                        M: \"dd MMMM\"\n                    }\n                }\n            }\n        }],\n    \"ha-Latn\": [\"ha-Latn\", \"default\", {\n            name: \"ha-Latn\",\n            englishName: \"Hausa (Latin)\",\n            nativeName: \"Hausa\",\n            language: \"ha-Latn\",\n            numberFormat: {\n                currency: {\n                    pattern: [\"$-n\", \"$ n\"],\n                    symbol: \"N\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"Lahadi\", \"Litinin\", \"Talata\", \"Laraba\", \"Alhamis\", \"Juma'a\", \"Asabar\"],\n                        namesAbbr: [\"Lah\", \"Lit\", \"Tal\", \"Lar\", \"Alh\", \"Jum\", \"Asa\"],\n                        namesShort: [\"L\", \"L\", \"T\", \"L\", \"A\", \"J\", \"A\"]\n                    },\n                    months: {\n                        names: [\"Januwaru\", \"Febreru\", \"Maris\", \"Afrilu\", \"Mayu\", \"Yuni\", \"Yuli\", \"Agusta\", \"Satumba\", \"Oktocba\", \"Nuwamba\", \"Disamba\", \"\"],\n                        namesAbbr: [\"Jan\", \"Feb\", \"Mar\", \"Afr\", \"May\", \"Yun\", \"Yul\", \"Agu\", \"Sat\", \"Okt\", \"Nuw\", \"Dis\", \"\"]\n                    },\n                    AM: [\"Safe\", \"safe\", \"SAFE\"],\n                    PM: [\"Yamma\", \"yamma\", \"YAMMA\"],\n                    eras: [{ \"name\": \"AD\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\"\n                    }\n                }\n            }\n        }],\n    \"zh-CHS\": [\"zh-CHS\", \"default\", {\n            name: \"zh-CHS\",\n            englishName: \"Chinese (Simplified) Legacy\",\n            nativeName: \"中文(简体) 旧版\",\n            language: \"zh-CHS\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    pattern: [\"$-n\", \"$n\"],\n                    symbol: \"¥\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"yyyy/M/d\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }],\n    \"zh-CHT\": [\"zh-CHT\", \"default\", {\n            name: \"zh-CHT\",\n            englishName: \"Chinese (Traditional) Legacy\",\n            nativeName: \"中文(繁體) 舊版\",\n            language: \"zh-CHT\",\n            numberFormat: {\n                percent: {\n                    pattern: [\"-n%\", \"n%\"]\n                },\n                currency: {\n                    symbol: \"HK$\"\n                }\n            },\n            calendars: {\n                standard: {\n                    days: {\n                        names: [\"星期日\", \"星期一\", \"星期二\", \"星期三\", \"星期四\", \"星期五\", \"星期六\"],\n                        namesAbbr: [\"週日\", \"週一\", \"週二\", \"週三\", \"週四\", \"週五\", \"週六\"],\n                        namesShort: [\"日\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\"]\n                    },\n                    months: {\n                        names: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"],\n                        namesAbbr: [\"一月\", \"二月\", \"三月\", \"四月\", \"五月\", \"六月\", \"七月\", \"八月\", \"九月\", \"十月\", \"十一月\", \"十二月\", \"\"]\n                    },\n                    AM: [\"上午\", \"上午\", \"上午\"],\n                    PM: [\"下午\", \"下午\", \"下午\"],\n                    eras: [{ \"name\": \"公元\", \"start\": null, \"offset\": 0 }],\n                    patterns: {\n                        d: \"d/M/yyyy\",\n                        D: \"yyyy'年'M'月'd'日'\",\n                        t: \"H:mm\",\n                        T: \"H:mm:ss\",\n                        f: \"yyyy'年'M'月'd'日' H:mm\",\n                        F: \"yyyy'年'M'月'd'日' H:mm:ss\",\n                        M: \"M'月'd'日'\",\n                        Y: \"yyyy'年'M'月'\"\n                    }\n                }\n            }\n        }]\n};\n//# sourceMappingURL=powerbiGlobalizeLocales.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DateTimeSequence = void 0;\nvar dateUtils = require(\"./dateUtils\");\n// powerbi.extensibility.utils.type\nvar powerbi_visuals_utils_typeutils_1 = require(\"powerbi-visuals-utils-typeutils\");\nvar NumericSequence = powerbi_visuals_utils_typeutils_1.numericSequence.NumericSequence;\nvar NumericSequenceRange = powerbi_visuals_utils_typeutils_1.numericSequenceRange.NumericSequenceRange;\n// powerbi.extensibility.utils.formatting\nvar iFormattingService_1 = require(\"./../formattingService/iFormattingService\");\n// Repreasents the sequence of the dates/times\nvar DateTimeSequence = /** @class */ (function () {\n    // Constructors\n    // Creates new instance of the DateTimeSequence\n    function DateTimeSequence(unit) {\n        this.unit = unit;\n        this.sequence = [];\n        this.min = new Date(\"9999-12-31T23:59:59.999\");\n        this.max = new Date(\"0001-01-01T00:00:00.000\");\n    }\n    // Methods\n    /**\n     * Add a new Date to a sequence.\n     * @param date - date to add\n     */\n    DateTimeSequence.prototype.add = function (date) {\n        if (date < this.min) {\n            this.min = date;\n        }\n        if (date > this.max) {\n            this.max = date;\n        }\n        this.sequence.push(date);\n    };\n    // Methods\n    /**\n     * Extends the sequence to cover new date range\n     * @param min - new min to be covered by sequence\n     * @param max - new max to be covered by sequence\n     */\n    DateTimeSequence.prototype.extendToCover = function (min, max) {\n        var x = this.min;\n        while (min < x) {\n            x = DateTimeSequence.ADD_INTERVAL(x, -this.interval, this.unit);\n            this.sequence.splice(0, 0, x);\n        }\n        this.min = x;\n        x = this.max;\n        while (x < max) {\n            x = DateTimeSequence.ADD_INTERVAL(x, this.interval, this.unit);\n            this.sequence.push(x);\n        }\n        this.max = x;\n    };\n    /**\n     * Move the sequence to cover new date range\n     * @param min - new min to be covered by sequence\n     * @param max - new max to be covered by sequence\n     */\n    DateTimeSequence.prototype.moveToCover = function (min, max) {\n        var delta = DateTimeSequence.getDelta(min, max, this.unit);\n        var count = Math.floor(delta / this.interval);\n        this.min = DateTimeSequence.ADD_INTERVAL(this.min, count * this.interval, this.unit);\n        this.sequence = [];\n        this.sequence.push(this.min);\n        this.max = this.min;\n        while (this.max < max) {\n            this.max = DateTimeSequence.ADD_INTERVAL(this.max, this.interval, this.unit);\n            this.sequence.push(this.max);\n        }\n    };\n    // Static\n    /**\n     * Calculate a new DateTimeSequence\n     * @param dataMin - Date representing min of the data range\n     * @param dataMax - Date representing max of the data range\n     * @param expectedCount - expected number of intervals in the sequence\n     * @param unit - of the intervals in the sequence\n     */\n    DateTimeSequence.CALCULATE = function (dataMin, dataMax, expectedCount, unit) {\n        if (!unit) {\n            unit = DateTimeSequence.GET_INTERVAL_UNIT(dataMin, dataMax, expectedCount);\n        }\n        switch (unit) {\n            case iFormattingService_1.DateTimeUnit.Year:\n                return DateTimeSequence.CALCULATE_YEARS(dataMin, dataMax, expectedCount);\n            case iFormattingService_1.DateTimeUnit.Month:\n                return DateTimeSequence.CALCULATE_MONTHS(dataMin, dataMax, expectedCount);\n            case iFormattingService_1.DateTimeUnit.Week:\n                return DateTimeSequence.CALCULATE_WEEKS(dataMin, dataMax, expectedCount);\n            case iFormattingService_1.DateTimeUnit.Day:\n                return DateTimeSequence.CALCULATE_DAYS(dataMin, dataMax, expectedCount);\n            case iFormattingService_1.DateTimeUnit.Hour:\n                return DateTimeSequence.CALCULATE_HOURS(dataMin, dataMax, expectedCount);\n            case iFormattingService_1.DateTimeUnit.Minute:\n                return DateTimeSequence.CALCULATE_MINUTES(dataMin, dataMax, expectedCount);\n            case iFormattingService_1.DateTimeUnit.Second:\n                return DateTimeSequence.CALCULATE_SECONDS(dataMin, dataMax, expectedCount);\n            case iFormattingService_1.DateTimeUnit.Millisecond:\n                return DateTimeSequence.CALCULATE_MILLISECONDS(dataMin, dataMax, expectedCount);\n        }\n    };\n    DateTimeSequence.CALCULATE_YEARS = function (dataMin, dataMax, expectedCount) {\n        // Calculate range and sequence\n        var yearsRange = NumericSequenceRange.calculateDataRange(dataMin.getFullYear(), dataMax.getFullYear(), false);\n        // Calculate year sequence\n        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(0, yearsRange.max - yearsRange.min), expectedCount, 0, null, null, [1, 2, 5]);\n        var newMinYear = Math.floor(yearsRange.min / sequence.interval) * sequence.interval;\n        var date = new Date(newMinYear, 0, 1);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Year);\n    };\n    DateTimeSequence.CALCULATE_MONTHS = function (dataMin, dataMax, expectedCount) {\n        // Calculate range\n        var minYear = dataMin.getFullYear();\n        var maxYear = dataMax.getFullYear();\n        var minMonth = dataMin.getMonth();\n        var maxMonth = (maxYear - minYear) * 12 + dataMax.getMonth();\n        var date = new Date(minYear, 0, 1);\n        // Calculate month sequence\n        var sequence = NumericSequence.calculateUnits(minMonth, maxMonth, expectedCount, [1, 2, 3, 6, 12]);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Month);\n    };\n    DateTimeSequence.CALCULATE_WEEKS = function (dataMin, dataMax, expectedCount) {\n        var firstDayOfWeek = 0;\n        var minDayOfWeek = dataMin.getDay();\n        var dayOffset = (minDayOfWeek - firstDayOfWeek + 7) % 7;\n        var minDay = dataMin.getDate() - dayOffset;\n        // Calculate range\n        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), minDay);\n        var min = 0;\n        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Week));\n        // Calculate week sequence\n        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 4, 8]);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Week);\n    };\n    DateTimeSequence.CALCULATE_DAYS = function (dataMin, dataMax, expectedCount) {\n        // Calculate range\n        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());\n        var min = 0;\n        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(dataMin, dataMax, iFormattingService_1.DateTimeUnit.Day));\n        // Calculate day sequence\n        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 7, 14]);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Day);\n    };\n    DateTimeSequence.CALCULATE_HOURS = function (dataMin, dataMax, expectedCount) {\n        // Calculate range\n        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());\n        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Hour));\n        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Hour));\n        // Calculate hour sequence\n        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 3, 6, 12, 24]);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Hour);\n    };\n    DateTimeSequence.CALCULATE_MINUTES = function (dataMin, dataMax, expectedCount) {\n        // Calculate range\n        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours());\n        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Minute));\n        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Minute));\n        // Calculate minutes numeric sequence\n        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 3, 60 * 6, 60 * 12, 60 * 24]);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Minute);\n    };\n    DateTimeSequence.CALCULATE_SECONDS = function (dataMin, dataMax, expectedCount) {\n        // Calculate range\n        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes());\n        var min = powerbi_visuals_utils_typeutils_1.double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Second));\n        var max = powerbi_visuals_utils_typeutils_1.double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Second));\n        // Calculate minutes numeric sequence\n        var sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 5, 60 * 10, 60 * 15, 60 * 30, 60 * 60]);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Second);\n    };\n    DateTimeSequence.CALCULATE_MILLISECONDS = function (dataMin, dataMax, expectedCount) {\n        // Calculate range\n        var date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes(), dataMin.getSeconds());\n        var min = DateTimeSequence.getDelta(date, dataMin, iFormattingService_1.DateTimeUnit.Millisecond);\n        var max = DateTimeSequence.getDelta(date, dataMax, iFormattingService_1.DateTimeUnit.Millisecond);\n        // Calculate milliseconds numeric sequence\n        var sequence = NumericSequence.calculate(NumericSequenceRange.calculate(min, max), expectedCount, 0);\n        // Convert to date sequence\n        return DateTimeSequence.fromNumericSequence(date, sequence, iFormattingService_1.DateTimeUnit.Millisecond);\n    };\n    DateTimeSequence.ADD_INTERVAL = function (value, interval, unit) {\n        interval = Math.round(interval);\n        switch (unit) {\n            case iFormattingService_1.DateTimeUnit.Year:\n                return dateUtils.addYears(value, interval);\n            case iFormattingService_1.DateTimeUnit.Month:\n                return dateUtils.addMonths(value, interval);\n            case iFormattingService_1.DateTimeUnit.Week:\n                return dateUtils.addWeeks(value, interval);\n            case iFormattingService_1.DateTimeUnit.Day:\n                return dateUtils.addDays(value, interval);\n            case iFormattingService_1.DateTimeUnit.Hour:\n                return dateUtils.addHours(value, interval);\n            case iFormattingService_1.DateTimeUnit.Minute:\n                return dateUtils.addMinutes(value, interval);\n            case iFormattingService_1.DateTimeUnit.Second:\n                return dateUtils.addSeconds(value, interval);\n            case iFormattingService_1.DateTimeUnit.Millisecond:\n                return dateUtils.addMilliseconds(value, interval);\n        }\n    };\n    DateTimeSequence.fromNumericSequence = function (date, sequence, unit) {\n        var result = new DateTimeSequence(unit);\n        for (var i = 0; i < sequence.sequence.length; i++) {\n            var x = sequence.sequence[i];\n            var d = DateTimeSequence.ADD_INTERVAL(date, x, unit);\n            result.add(d);\n        }\n        result.interval = sequence.interval;\n        result.intervalOffset = sequence.intervalOffset;\n        return result;\n    };\n    DateTimeSequence.getDelta = function (min, max, unit) {\n        var delta = 0;\n        switch (unit) {\n            case iFormattingService_1.DateTimeUnit.Year:\n                delta = max.getFullYear() - min.getFullYear();\n                break;\n            case iFormattingService_1.DateTimeUnit.Month:\n                delta = (max.getFullYear() - min.getFullYear()) * 12 + max.getMonth() - min.getMonth();\n                break;\n            case iFormattingService_1.DateTimeUnit.Week:\n                delta = (max.getTime() - min.getTime()) / (7 * 24 * 3600000);\n                break;\n            case iFormattingService_1.DateTimeUnit.Day:\n                delta = (max.getTime() - min.getTime()) / (24 * 3600000);\n                break;\n            case iFormattingService_1.DateTimeUnit.Hour:\n                delta = (max.getTime() - min.getTime()) / 3600000;\n                break;\n            case iFormattingService_1.DateTimeUnit.Minute:\n                delta = (max.getTime() - min.getTime()) / 60000;\n                break;\n            case iFormattingService_1.DateTimeUnit.Second:\n                delta = (max.getTime() - min.getTime()) / 1000;\n                break;\n            case iFormattingService_1.DateTimeUnit.Millisecond:\n                delta = max.getTime() - min.getTime();\n                break;\n        }\n        return delta;\n    };\n    DateTimeSequence.GET_INTERVAL_UNIT = function (min, max, maxCount) {\n        maxCount = Math.max(maxCount, 2);\n        var totalDays = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Day);\n        if (totalDays > 356 && totalDays >= 30 * 6 * maxCount)\n            return iFormattingService_1.DateTimeUnit.Year;\n        if (totalDays > 60 && totalDays > 7 * maxCount)\n            return iFormattingService_1.DateTimeUnit.Month;\n        if (totalDays > 14 && totalDays > 2 * maxCount)\n            return iFormattingService_1.DateTimeUnit.Week;\n        var totalHours = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Hour);\n        if (totalDays > 2 && totalHours > 12 * maxCount)\n            return iFormattingService_1.DateTimeUnit.Day;\n        if (totalHours >= 24 && totalHours >= maxCount)\n            return iFormattingService_1.DateTimeUnit.Hour;\n        var totalMinutes = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Minute);\n        if (totalMinutes > 2 && totalMinutes >= maxCount)\n            return iFormattingService_1.DateTimeUnit.Minute;\n        var totalSeconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Second);\n        if (totalSeconds > 2 && totalSeconds >= 0.8 * maxCount)\n            return iFormattingService_1.DateTimeUnit.Second;\n        var totalMilliseconds = DateTimeSequence.getDelta(min, max, iFormattingService_1.DateTimeUnit.Millisecond);\n        if (totalMilliseconds > 0)\n            return iFormattingService_1.DateTimeUnit.Millisecond;\n        // If the size of the range is 0 we need to guess the unit based on the date's non-zero values starting with milliseconds\n        var date = min;\n        if (date.getMilliseconds() !== 0)\n            return iFormattingService_1.DateTimeUnit.Millisecond;\n        if (date.getSeconds() !== 0)\n            return iFormattingService_1.DateTimeUnit.Second;\n        if (date.getMinutes() !== 0)\n            return iFormattingService_1.DateTimeUnit.Minute;\n        if (date.getHours() !== 0)\n            return iFormattingService_1.DateTimeUnit.Hour;\n        if (date.getDate() !== 1)\n            return iFormattingService_1.DateTimeUnit.Day;\n        if (date.getMonth() !== 0)\n            return iFormattingService_1.DateTimeUnit.Month;\n        return iFormattingService_1.DateTimeUnit.Year;\n    };\n    // Constants\n    DateTimeSequence.MIN_COUNT = 1;\n    DateTimeSequence.MAX_COUNT = 1000;\n    return DateTimeSequence;\n}());\nexports.DateTimeSequence = DateTimeSequence;\n//# sourceMappingURL=dateTimeSequence.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addMilliseconds = exports.addSeconds = exports.addMinutes = exports.addHours = exports.addDays = exports.addWeeks = exports.addMonths = exports.addYears = void 0;\n// dateUtils module provides DateTimeSequence with set of additional date manipulation routines\nvar MonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar MonthDaysLeap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/**\n * Returns bool indicating weither the provided year is a leap year.\n * @param year - year value\n */\nfunction isLeap(year) {\n    return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n}\n/**\n * Returns number of days in the provided year/month.\n * @param year - year value\n * @param month - month value\n */\nfunction getMonthDays(year, month) {\n    return isLeap(year) ? MonthDaysLeap[month] : MonthDays[month];\n}\n/**\n * Adds a specified number of years to the provided date.\n * @param date - date value\n * @param yearDelta - number of years to add\n */\nfunction addYears(date, yearDelta) {\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var day = date.getDate();\n    var isLeapDay = month === 2 && day === 29;\n    var result = new Date(date.getTime());\n    year = year + yearDelta;\n    if (isLeapDay && !isLeap(year)) {\n        day = 28;\n    }\n    result.setFullYear(year, month, day);\n    return result;\n}\nexports.addYears = addYears;\n/**\n * Adds a specified number of months to the provided date.\n * @param date - date value\n * @param monthDelta - number of months to add\n */\nfunction addMonths(date, monthDelta) {\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var day = date.getDate();\n    var result = new Date(date.getTime());\n    year += (monthDelta - (monthDelta % 12)) / 12;\n    month += monthDelta % 12;\n    // VSTS 1325771: Certain column charts don't display any data\n    // Wrap arround the month if is after december (value 11)\n    if (month > 11) {\n        month = month % 12;\n        year++;\n    }\n    day = Math.min(day, getMonthDays(year, month));\n    result.setFullYear(year, month, day);\n    return result;\n}\nexports.addMonths = addMonths;\n/**\n * Adds a specified number of weeks to the provided date.\n * @param date - date value\n * @param weeks - number of weeks to add\n */\nfunction addWeeks(date, weeks) {\n    return addDays(date, weeks * 7);\n}\nexports.addWeeks = addWeeks;\n/**\n * Adds a specified number of days to the provided date.\n * @param date - date value\n * @param days - number of days to add\n */\nfunction addDays(date, days) {\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var day = date.getDate();\n    var result = new Date(date.getTime());\n    result.setFullYear(year, month, day + days);\n    return result;\n}\nexports.addDays = addDays;\n/**\n * Adds a specified number of hours to the provided date.\n * @param date - date value\n * @param hours - number of hours to add\n */\nfunction addHours(date, hours) {\n    return new Date(date.getTime() + hours * 3600000);\n}\nexports.addHours = addHours;\n/**\n * Adds a specified number of minutes to the provided date.\n * @param date - date value\n * @param minutes - number of minutes to add\n */\nfunction addMinutes(date, minutes) {\n    return new Date(date.getTime() + minutes * 60000);\n}\nexports.addMinutes = addMinutes;\n/**\n * Adds a specified number of seconds to the provided date.\n * @param date - date value\n * @param seconds - number of seconds to add\n */\nfunction addSeconds(date, seconds) {\n    return new Date(date.getTime() + seconds * 1000);\n}\nexports.addSeconds = addSeconds;\n/**\n * Adds a specified number of milliseconds to the provided date.\n * @param date - date value\n * @param milliseconds - number of milliseconds to add\n */\nfunction addMilliseconds(date, milliseconds) {\n    return new Date(date.getTime() + milliseconds);\n}\nexports.addMilliseconds = addMilliseconds;\n//# sourceMappingURL=dateUtils.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataLabelsDisplayUnitSystem = exports.WholeUnitsDisplayUnitSystem = exports.DefaultDisplayUnitSystem = exports.NoDisplayUnitSystem = exports.DisplayUnitSystem = exports.DisplayUnit = void 0;\n/* eslint-disable no-useless-escape */\nvar formattingService_1 = require(\"./../formattingService/formattingService\");\nvar powerbi_visuals_utils_typeutils_1 = require(\"powerbi-visuals-utils-typeutils\");\n// Constants\nvar maxExponent = 24;\nvar defaultScientificBigNumbersBoundary = 1E15;\nvar scientificSmallNumbersBoundary = 1E-4;\nvar PERCENTAGE_FORMAT = \"%\";\nvar SCIENTIFIC_FORMAT = \"E+0\";\nvar DEFAULT_SCIENTIFIC_FORMAT = \"0.##\" + SCIENTIFIC_FORMAT;\n// Regular expressions\n/**\n * This regex looks for strings that match one of the following conditions:\n *   - Optionally contain \"0\", \"#\", followed by a period, followed by at least one \"0\" or \"#\" (Ex. ###,000.###)\n *   - Contains at least one of \"0\", \"#\", or \",\" (Ex. ###,000)\n *   - Contain a \"g\" (indicates to use the general .NET numeric format string)\n * The entire string (start to end) must match, and the match is not case-sensitive.\n */\nvar SUPPORTED_SCIENTIFIC_FORMATS = /^([0\\#,]*\\.[0\\#]+|[0\\#,]+|g)$/i;\nvar DisplayUnit = /** @class */ (function () {\n    function DisplayUnit() {\n    }\n    // Methods\n    DisplayUnit.prototype.project = function (value) {\n        if (this.value) {\n            return powerbi_visuals_utils_typeutils_1.double.removeDecimalNoise(value / this.value);\n        }\n        else {\n            return value;\n        }\n    };\n    DisplayUnit.prototype.reverseProject = function (value) {\n        if (this.value) {\n            return value * this.value;\n        }\n        else {\n            return value;\n        }\n    };\n    DisplayUnit.prototype.isApplicableTo = function (value) {\n        value = Math.abs(value);\n        var precision = powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 3);\n        return powerbi_visuals_utils_typeutils_1.double.greaterOrEqualWithPrecision(value, this.applicableRangeMin, precision) && powerbi_visuals_utils_typeutils_1.double.lessWithPrecision(value, this.applicableRangeMax, precision);\n    };\n    DisplayUnit.prototype.isScaling = function () {\n        return this.value > 1;\n    };\n    return DisplayUnit;\n}());\nexports.DisplayUnit = DisplayUnit;\nvar DisplayUnitSystem = /** @class */ (function () {\n    // Constructor\n    function DisplayUnitSystem(units) {\n        this.units = units ? units : [];\n    }\n    Object.defineProperty(DisplayUnitSystem.prototype, \"title\", {\n        // Properties\n        get: function () {\n            return this.displayUnit ? this.displayUnit.title : undefined;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // Methods\n    DisplayUnitSystem.prototype.update = function (value) {\n        if (value === undefined)\n            return;\n        this.unitBaseValue = value;\n        this.displayUnit = this.findApplicableDisplayUnit(value);\n    };\n    DisplayUnitSystem.prototype.findApplicableDisplayUnit = function (value) {\n        for (var _i = 0, _a = this.units; _i < _a.length; _i++) {\n            var unit = _a[_i];\n            if (unit.isApplicableTo(value))\n                return unit;\n        }\n        return undefined;\n    };\n    DisplayUnitSystem.prototype.format = function (value, format, decimals, trailingZeros, cultureSelector) {\n        decimals = this.getNumberOfDecimalsForFormatting(format, decimals);\n        var nonScientificFormat = \"\";\n        if (this.isFormatSupported(format)\n            && !this.hasScientitifcFormat(format)\n            && this.isScalingUnit()\n            && this.shouldRespectScalingUnit(format)) {\n            value = this.displayUnit.project(value);\n            nonScientificFormat = this.displayUnit.labelFormat;\n        }\n        return this.formatHelper({\n            value: value,\n            nonScientificFormat: nonScientificFormat,\n            format: format,\n            decimals: decimals,\n            trailingZeros: trailingZeros,\n            cultureSelector: cultureSelector\n        });\n    };\n    DisplayUnitSystem.prototype.isFormatSupported = function (format) {\n        return !DisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);\n    };\n    DisplayUnitSystem.prototype.isPercentageFormat = function (format) {\n        return format && format.indexOf(PERCENTAGE_FORMAT) >= 0;\n    };\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n    DisplayUnitSystem.prototype.shouldRespectScalingUnit = function (format) {\n        return true;\n    };\n    DisplayUnitSystem.prototype.getNumberOfDecimalsForFormatting = function (format, decimals) {\n        return decimals;\n    };\n    DisplayUnitSystem.prototype.isScalingUnit = function () {\n        return this.displayUnit && this.displayUnit.isScaling();\n    };\n    DisplayUnitSystem.prototype.formatHelper = function (options) {\n        var value = options.value, cultureSelector = options.cultureSelector, decimals = options.decimals, trailingZeros = options.trailingZeros;\n        var nonScientificFormat = options.nonScientificFormat, format = options.format;\n        // If the format is \"general\" and we want to override the number of decimal places then use the default numeric format string.\n        if ((format === \"g\" || format === \"G\") && decimals != null) {\n            format = \"#,0.00\";\n        }\n        format = formattingService_1.numberFormat.addDecimalsToFormat(format, decimals, trailingZeros);\n        if (format && !formattingService_1.formattingService.isStandardNumberFormat(format)) {\n            return formattingService_1.formattingService.formatNumberWithCustomOverride(value, format, nonScientificFormat, cultureSelector);\n        }\n        if (!format) {\n            format = \"G\";\n        }\n        if (!nonScientificFormat) {\n            nonScientificFormat = \"{0}\";\n        }\n        var text = formattingService_1.formattingService.formatValue(value, format, cultureSelector);\n        return formattingService_1.formattingService.format(nonScientificFormat, [text]);\n    };\n    //  Formats a single value by choosing an appropriate base for the DisplayUnitSystem before formatting.\n    DisplayUnitSystem.prototype.formatSingleValue = function (value, format, decimals, trailingZeros, cultureSelector) {\n        // Change unit base to a value appropriate for this value\n        this.update(this.shouldUseValuePrecision(value) ? powerbi_visuals_utils_typeutils_1.double.getPrecision(value, 8) : value);\n        return this.format(value, format, decimals, trailingZeros, cultureSelector);\n    };\n    DisplayUnitSystem.prototype.shouldUseValuePrecision = function (value) {\n        if (this.units.length === 0)\n            return true;\n        // Check if the value is big enough to have a valid unit by checking against the smallest unit (that it's value bigger than 1).\n        var applicableRangeMin = 0;\n        for (var i = 0; i < this.units.length; i++) {\n            if (this.units[i].isScaling()) {\n                applicableRangeMin = this.units[i].applicableRangeMin;\n                break;\n            }\n        }\n        return Math.abs(value) < applicableRangeMin;\n    };\n    DisplayUnitSystem.prototype.isScientific = function (value) {\n        return value < -defaultScientificBigNumbersBoundary || value > defaultScientificBigNumbersBoundary ||\n            (-scientificSmallNumbersBoundary < value && value < scientificSmallNumbersBoundary && value !== 0);\n    };\n    DisplayUnitSystem.prototype.hasScientitifcFormat = function (format) {\n        return format && format.toUpperCase().indexOf(\"E\") !== -1;\n    };\n    DisplayUnitSystem.prototype.supportsScientificFormat = function (format) {\n        if (format)\n            return SUPPORTED_SCIENTIFIC_FORMATS.test(format);\n        return true;\n    };\n    DisplayUnitSystem.prototype.shouldFallbackToScientific = function (value, format) {\n        return !this.hasScientitifcFormat(format)\n            && this.supportsScientificFormat(format)\n            && this.isScientific(value);\n    };\n    DisplayUnitSystem.prototype.getScientificFormat = function (data, format, decimals, trailingZeros) {\n        // Use scientific format outside of the range\n        if (this.isFormatSupported(format) && this.shouldFallbackToScientific(data, format)) {\n            var numericFormat = formattingService_1.numberFormat.getNumericFormat(data, format);\n            if (decimals)\n                numericFormat = formattingService_1.numberFormat.addDecimalsToFormat(numericFormat ? numericFormat : \"0\", Math.abs(decimals), trailingZeros);\n            if (numericFormat)\n                return numericFormat + SCIENTIFIC_FORMAT;\n            else\n                return DEFAULT_SCIENTIFIC_FORMAT;\n        }\n        return format;\n    };\n    DisplayUnitSystem.UNSUPPORTED_FORMATS = /^(p\\d*)|(e\\d*)$/i;\n    return DisplayUnitSystem;\n}());\nexports.DisplayUnitSystem = DisplayUnitSystem;\n// Provides a unit system that is defined by formatting in the model, and is suitable for visualizations shown in single number visuals in explore mode.\nvar NoDisplayUnitSystem = /** @class */ (function (_super) {\n    __extends(NoDisplayUnitSystem, _super);\n    // Constructor\n    function NoDisplayUnitSystem() {\n        return _super.call(this, []) || this;\n    }\n    return NoDisplayUnitSystem;\n}(DisplayUnitSystem));\nexports.NoDisplayUnitSystem = NoDisplayUnitSystem;\n/** Provides a unit system that creates a more concise format for displaying values. This is suitable for most of the cases where\n    we are showing values (chart axes) and as such it is the default unit system. */\nvar DefaultDisplayUnitSystem = /** @class */ (function (_super) {\n    __extends(DefaultDisplayUnitSystem, _super);\n    // Constructor\n    function DefaultDisplayUnitSystem(unitLookup) {\n        return _super.call(this, DefaultDisplayUnitSystem.getUnits(unitLookup)) || this;\n    }\n    // Methods\n    DefaultDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {\n        format = this.getScientificFormat(data, format, decimals, trailingZeros);\n        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);\n    };\n    DefaultDisplayUnitSystem.RESET = function () {\n        DefaultDisplayUnitSystem.units = null;\n    };\n    DefaultDisplayUnitSystem.getUnits = function (unitLookup) {\n        if (!DefaultDisplayUnitSystem.units) {\n            DefaultDisplayUnitSystem.units = createDisplayUnits(unitLookup, function (value, previousUnitValue, min) {\n                // When dealing with millions/billions/trillions we need to switch to millions earlier: for example instead of showing 100K 200K 300K we should show 0.1M 0.2M 0.3M etc\n                if (value - previousUnitValue >= 1000) {\n                    return value / 10;\n                }\n                return min;\n            });\n            // Ensure last unit has max of infinity\n            DefaultDisplayUnitSystem.units[DefaultDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;\n        }\n        return DefaultDisplayUnitSystem.units;\n    };\n    return DefaultDisplayUnitSystem;\n}(DisplayUnitSystem));\nexports.DefaultDisplayUnitSystem = DefaultDisplayUnitSystem;\n/** Provides a unit system that creates a more concise format for displaying values, but only allows showing a unit if we have at least\n    one of those units (e.g. 0.9M is not allowed since it's less than 1 million). This is suitable for cases such as dashboard tiles\n    where we have restricted space but do not want to show partial units. */\nvar WholeUnitsDisplayUnitSystem = /** @class */ (function (_super) {\n    __extends(WholeUnitsDisplayUnitSystem, _super);\n    // Constructor\n    function WholeUnitsDisplayUnitSystem(unitLookup) {\n        return _super.call(this, WholeUnitsDisplayUnitSystem.getUnits(unitLookup)) || this;\n    }\n    WholeUnitsDisplayUnitSystem.RESET = function () {\n        WholeUnitsDisplayUnitSystem.units = null;\n    };\n    WholeUnitsDisplayUnitSystem.getUnits = function (unitLookup) {\n        if (!WholeUnitsDisplayUnitSystem.units) {\n            WholeUnitsDisplayUnitSystem.units = createDisplayUnits(unitLookup);\n            // Ensure last unit has max of infinity\n            WholeUnitsDisplayUnitSystem.units[WholeUnitsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;\n        }\n        return WholeUnitsDisplayUnitSystem.units;\n    };\n    WholeUnitsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {\n        format = this.getScientificFormat(data, format, decimals, trailingZeros);\n        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);\n    };\n    return WholeUnitsDisplayUnitSystem;\n}(DisplayUnitSystem));\nexports.WholeUnitsDisplayUnitSystem = WholeUnitsDisplayUnitSystem;\nvar DataLabelsDisplayUnitSystem = /** @class */ (function (_super) {\n    __extends(DataLabelsDisplayUnitSystem, _super);\n    function DataLabelsDisplayUnitSystem(unitLookup) {\n        return _super.call(this, DataLabelsDisplayUnitSystem.getUnits(unitLookup)) || this;\n    }\n    DataLabelsDisplayUnitSystem.prototype.isFormatSupported = function (format) {\n        return !DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);\n    };\n    DataLabelsDisplayUnitSystem.getUnits = function (unitLookup) {\n        if (!DataLabelsDisplayUnitSystem.units) {\n            var units = [];\n            var adjustMinBasedOnPreviousUnit = function (value, previousUnitValue, min) {\n                // Never returns true, we are always ignoring\n                // We do not early switch (e.g. 100K instead of 0.1M)\n                // Intended? If so, remove this function, otherwise, remove if statement\n                if (value === -1)\n                    if (value - previousUnitValue >= 1000) {\n                        return value / 10;\n                    }\n                return min;\n            };\n            // Add Auto & None\n            var names = unitLookup(-1);\n            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);\n            names = unitLookup(0);\n            addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);\n            // Add normal units\n            DataLabelsDisplayUnitSystem.units = units.concat(createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit));\n            // Ensure last unit has max of infinity\n            DataLabelsDisplayUnitSystem.units[DataLabelsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;\n        }\n        return DataLabelsDisplayUnitSystem.units;\n    };\n    DataLabelsDisplayUnitSystem.prototype.format = function (data, format, decimals, trailingZeros, cultureSelector) {\n        format = this.getScientificFormat(data, format, decimals, trailingZeros);\n        return _super.prototype.format.call(this, data, format, decimals, trailingZeros, cultureSelector);\n    };\n    // Constants\n    DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE = 0;\n    DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE = 1;\n    DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS = /^(e\\d*)$/i;\n    return DataLabelsDisplayUnitSystem;\n}(DisplayUnitSystem));\nexports.DataLabelsDisplayUnitSystem = DataLabelsDisplayUnitSystem;\nfunction createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit) {\n    var units = [];\n    for (var i = 3; i < maxExponent; i++) {\n        var names = unitLookup(i);\n        if (names)\n            addUnitIfNonEmpty(units, powerbi_visuals_utils_typeutils_1.double.pow10(i), names.title, names.format, adjustMinBasedOnPreviousUnit);\n    }\n    return units;\n}\nfunction addUnitIfNonEmpty(units, value, title, labelFormat, adjustMinBasedOnPreviousUnit) {\n    if (title || labelFormat) {\n        var min = value;\n        if (units.length > 0) {\n            var previousUnit = units[units.length - 1];\n            if (adjustMinBasedOnPreviousUnit)\n                min = adjustMinBasedOnPreviousUnit(value, previousUnit.value, min);\n            previousUnit.applicableRangeMax = min;\n        }\n        var unit = new DisplayUnit();\n        unit.value = value;\n        unit.applicableRangeMin = min;\n        unit.applicableRangeMax = min * 1000;\n        unit.title = title;\n        unit.labelFormat = labelFormat;\n        units.push(unit);\n    }\n}\n//# sourceMappingURL=displayUnitSystem.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DisplayUnitSystemType = void 0;\n// The system used to determine display units used during formatting\nvar DisplayUnitSystemType;\n(function (DisplayUnitSystemType) {\n    // Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes.\n    DisplayUnitSystemType[DisplayUnitSystemType[\"Default\"] = 0] = \"Default\";\n    // A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards.\n    DisplayUnitSystemType[DisplayUnitSystemType[\"Verbose\"] = 1] = \"Verbose\";\n    /**\n     * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).\n     * Suitable for dashboard tile cards\n     */\n    DisplayUnitSystemType[DisplayUnitSystemType[\"WholeUnits\"] = 2] = \"WholeUnits\";\n    // A display unit system that also contains Auto and None units for data labels\n    DisplayUnitSystemType[DisplayUnitSystemType[\"DataLabels\"] = 3] = \"DataLabels\";\n})(DisplayUnitSystemType = exports.DisplayUnitSystemType || (exports.DisplayUnitSystemType = {}));\n//# sourceMappingURL=displayUnitSystemType.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Family = exports.fallbackFonts = void 0;\nvar familyInfo_1 = require(\"./familyInfo\");\nexports.fallbackFonts = [\"helvetica\", \"arial\", \"sans-serif\"];\nexports.Family = {\n    light: new familyInfo_1.FamilyInfo(exports.fallbackFonts),\n    semilight: new familyInfo_1.FamilyInfo(exports.fallbackFonts),\n    regular: new familyInfo_1.FamilyInfo(exports.fallbackFonts),\n    semibold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),\n    bold: new familyInfo_1.FamilyInfo(exports.fallbackFonts),\n    lightSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),\n    regularSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts),\n    boldSecondary: new familyInfo_1.FamilyInfo(exports.fallbackFonts)\n};\n//# sourceMappingURL=family.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FamilyInfo = void 0;\nvar FamilyInfo = /** @class */ (function () {\n    function FamilyInfo(families) {\n        this.families = families;\n    }\n    Object.defineProperty(FamilyInfo.prototype, \"family\", {\n        /**\n         * Gets the first font \"wf_\" font family since it will always be loaded.\n         */\n        get: function () {\n            return this.getFamily();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n    * Gets the first font family that matches regex (if provided).\n    * Default regex looks for \"wf_\" fonts which are always loaded.\n    */\n    FamilyInfo.prototype.getFamily = function (regex) {\n        if (regex === void 0) { regex = /^wf_/; }\n        if (!this.families) {\n            return null;\n        }\n        if (regex) {\n            for (var _i = 0, _a = this.families; _i < _a.length; _i++) {\n                var fontFamily = _a[_i];\n                if (regex.test(fontFamily)) {\n                    return fontFamily;\n                }\n            }\n        }\n        return this.families[0];\n    };\n    Object.defineProperty(FamilyInfo.prototype, \"css\", {\n        /**\n         * Gets the CSS string for the \"font-family\" CSS attribute.\n         */\n        get: function () {\n            return this.getCSS();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Gets the CSS string for the \"font-family\" CSS attribute.\n     */\n    FamilyInfo.prototype.getCSS = function () {\n        return this.families ? this.families.map((function (font) { return font.indexOf(\" \") > 0 ? \"'\" + font + \"'\" : font; })).join(\", \") : null;\n    };\n    return FamilyInfo;\n}());\nexports.FamilyInfo = FamilyInfo;\n//# sourceMappingURL=familyInfo.js.map","\"use strict\";\n/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n/* eslint-disable no-useless-escape */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fixDateTimeFormat = exports.findDateFormat = void 0;\nvar regexCache;\n/**\n * Translate .NET format into something supported by Globalize.\n */\nfunction findDateFormat(value, format, cultureName) {\n    switch (format) {\n        case \"m\":\n            // Month + day\n            format = \"M\";\n            break;\n        case \"O\":\n        case \"o\":\n            // Roundtrip\n            format = \"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fff'0000'\";\n            break;\n        case \"R\":\n        case \"r\":\n            // RFC1123 pattern - - time must be converted to UTC before formatting\n            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());\n            format = \"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'\";\n            break;\n        case \"s\":\n            // Sortable - should use invariant culture\n            format = \"S\";\n            break;\n        case \"u\":\n            // Universal sortable - should convert to UTC before applying the \"yyyy'-'MM'-'dd HH':'mm':'ss'Z' format.\n            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());\n            format = \"yyyy'-'MM'-'dd HH':'mm':'ss'Z'\";\n            break;\n        case \"U\":\n            // Universal full - the pattern is same as F but the time must be converted to UTC before formatting\n            value = new Date(value.getUTCFullYear(), value.getUTCMonth(), value.getUTCDate(), value.getUTCHours(), value.getUTCMinutes(), value.getUTCSeconds(), value.getUTCMilliseconds());\n            format = \"F\";\n            break;\n        case \"y\":\n        case \"Y\":\n            // Year and month\n            switch (cultureName) {\n                case \"default\":\n                case \"en\":\n                case \"en-US\":\n                    format = \"MMMM, yyyy\"; // Fix the default year-month pattern for english\n                    break;\n                default:\n                    format = \"Y\"; // For other cultures - use the localized pattern\n            }\n            break;\n    }\n    return { value: value, format: format };\n}\nexports.findDateFormat = findDateFormat;\n/**\n * Translates unsupported .NET custom format expressions to the custom expressions supported by Globalize.\n */\nfunction fixDateTimeFormat(format) {\n    // Fix for the \"K\" format (timezone):\n    // T he js dates don't have a kind property so we'll support only local kind which is equavalent to zzz format.\n    format = format.replace(/%K/g, \"zzz\");\n    format = format.replace(/K/g, \"zzz\");\n    format = format.replace(/fffffff/g, \"fff0000\");\n    format = format.replace(/ffffff/g, \"fff000\");\n    format = format.replace(/fffff/g, \"fff00\");\n    format = format.replace(/ffff/g, \"fff0\");\n    // Fix for the 5 digit year: \"yyyyy\" format.\n    // The Globalize doesn't support dates greater than 9999 so we replace the \"yyyyy\" with \"0yyyy\".\n    format = format.replace(/yyyyy/g, \"0yyyy\");\n    // Fix for the 3 digit year: \"yyy\" format.\n    // The Globalize doesn't support this formatting so we need to replace it with the 4 digit year \"yyyy\" format.\n    format = format.replace(/(^y|^)yyy(^y|$)/g, \"yyyy\");\n    if (!regexCache) {\n        // Creating Regexes for cases \"Using single format specifier\"\n        // - http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx#UsingSingleSpecifiers\n        // This is not supported from The Globalize.\n        // The case covers all single \"%\" lead specifier (like \"%d\" but not %dd)\n        // The cases as single \"%d\" are filtered in if the bellow.\n        // (?!S) where S is the specifier make sure that we only one symbol for specifier.\n        regexCache = [\"d\", \"f\", \"F\", \"g\", \"h\", \"H\", \"K\", \"m\", \"M\", \"s\", \"t\", \"y\", \"z\", \":\", \"/\"].map(function (s) {\n            return { r: new RegExp(\"\\%\" + s + \"(?!\" + s + \")\", \"g\"), s: s };\n        });\n    }\n    if (format.indexOf(\"%\") !== -1 && format.length > 2) {\n        for (var i = 0; i < regexCache.length; i++) {\n            format = format.replace(regexCache[i].r, regexCache[i].s);\n        }\n    }\n    return format;\n}\nexports.fixDateTimeFormat = fixDateTimeFormat;\n//# sourceMappingURL=formatting.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.format = exports.canFormat = void 0;\nvar formatting_1 = require(\"./../formatting\");\nvar formattingEncoder = require(\"./formattingEncoder\");\nvar stringExtensions = require(\"./../stringExtensions\");\nvar globalize_1 = require(\"./../../globalize/globalize\");\nvar _currentCachedFormat;\nvar _currentCachedProcessedFormat;\n// Evaluates if the value can be formatted using the NumberFormat\nfunction canFormat(value) {\n    return value instanceof Date;\n}\nexports.canFormat = canFormat;\n// Formats the date using provided format and culture\nfunction format(value, format, culture) {\n    format = format || \"G\";\n    var isStandard = format.length === 1;\n    try {\n        if (isStandard) {\n            return formatDateStandard(value, format, culture);\n        }\n        else {\n            return formatDateCustom(value, format, culture);\n        }\n    }\n    catch (e) {\n        return formatDateStandard(value, \"G\", culture);\n    }\n}\nexports.format = format;\n// Formats the date using standard format expression\nfunction formatDateStandard(value, format, culture) {\n    // In order to provide parity with .NET we have to support additional set of DateTime patterns.\n    var patterns = culture.calendar.patterns;\n    // Extend supported set of patterns\n    ensurePatterns(culture.calendar);\n    // Handle extended set of formats\n    var output = (0, formatting_1.findDateFormat)(value, format, culture.name);\n    if (output.format.length === 1)\n        format = patterns[output.format];\n    else\n        format = output.format;\n    // need to revisit when globalization is enabled\n    if (!culture) {\n        culture = this.getCurrentCulture();\n    }\n    return globalize_1.Globalize.format(output.value, format, culture);\n}\n// Formats the date using custom format expression\nfunction formatDateCustom(value, format, culture) {\n    var result;\n    var literals = [];\n    format = formattingEncoder.preserveLiterals(format, literals);\n    if (format.indexOf(\"F\") > -1) {\n        // F is not supported so we need to replace the F with f based on the milliseconds\n        // Replace all sequences of F longer than 3 with \"FFF\"\n        format = stringExtensions.replaceAll(format, \"FFFF\", \"FFF\");\n        // Based on milliseconds update the format to use fff\n        var milliseconds = value.getMilliseconds();\n        if (milliseconds % 10 >= 1) {\n            format = stringExtensions.replaceAll(format, \"FFF\", \"fff\");\n        }\n        format = stringExtensions.replaceAll(format, \"FFF\", \"FF\");\n        if ((milliseconds % 100) / 10 >= 1) {\n            format = stringExtensions.replaceAll(format, \"FF\", \"ff\");\n        }\n        format = stringExtensions.replaceAll(format, \"FF\", \"F\");\n        if ((milliseconds % 1000) / 100 >= 1) {\n            format = stringExtensions.replaceAll(format, \"F\", \"f\");\n        }\n        format = stringExtensions.replaceAll(format, \"F\", \"\");\n        if (format === \"\" || format === \"%\")\n            return \"\";\n    }\n    format = processCustomDateTimeFormat(format);\n    result = globalize_1.Globalize.format(value, format, culture);\n    result = localize(result, culture.calendar);\n    result = formattingEncoder.restoreLiterals(result, literals, false);\n    return result;\n}\n// Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize\nfunction processCustomDateTimeFormat(format) {\n    if (format === _currentCachedFormat) {\n        return _currentCachedProcessedFormat;\n    }\n    _currentCachedFormat = format;\n    format = (0, formatting_1.fixDateTimeFormat)(format);\n    _currentCachedProcessedFormat = format;\n    return format;\n}\n// Localizes the time separator symbol\nfunction localize(value, dictionary) {\n    var timeSeparator = dictionary[\":\"];\n    if (timeSeparator === \":\") {\n        return value;\n    }\n    var result = \"\";\n    var count = value.length;\n    for (var i = 0; i < count; i++) {\n        var char = value.charAt(i);\n        switch (char) {\n            case \":\":\n                result += timeSeparator;\n                break;\n            default:\n                result += char;\n                break;\n        }\n    }\n    return result;\n}\nfunction ensurePatterns(calendar) {\n    var patterns = calendar.patterns;\n    if (patterns[\"g\"] === undefined) {\n        patterns[\"g\"] = patterns[\"f\"].replace(patterns[\"D\"], patterns[\"d\"]); // Generic: Short date, short time\n        patterns[\"G\"] = patterns[\"F\"].replace(patterns[\"D\"], patterns[\"d\"]); // Generic: Short date, long time\n    }\n}\n//# sourceMappingURL=dateTimeFormat.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.restoreLiterals = exports.preserveLiterals = exports.removeLiterals = void 0;\n// quoted and escaped literal patterns\n// NOTE: the final three cases match .NET behavior\nvar literalPatterns = [\n    \"'[^']*'\",\n    \"\\\"[^\\\"]*\\\"\",\n    \"\\\\\\\\.\",\n    \"'[^']*$\",\n    \"\\\"[^\\\"]*$\",\n    \"\\\\\\\\$\", // backslash at end of string\n];\nvar literalMatcher = new RegExp(literalPatterns.join(\"|\"), \"g\");\n// Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\nfunction removeLiterals(format) {\n    literalMatcher.lastIndex = 0;\n    // just in case consecutive non-literals have some meaning\n    return format.replace(literalMatcher, \"\\uE100\");\n}\nexports.removeLiterals = removeLiterals;\nfunction preserveLiterals(format, literals) {\n    literalMatcher.lastIndex = 0;\n    for (;;) {\n        var match = literalMatcher.exec(format);\n        if (!match)\n            break;\n        var literal = match[0];\n        var literalOffset = literalMatcher.lastIndex - literal.length;\n        var token = String.fromCharCode(0xE100 + literals.length);\n        literals.push(literal);\n        format = format.substring(0, literalOffset) + token + format.substring(literalMatcher.lastIndex);\n        // back to avoid skipping due to removed literal substring\n        literalMatcher.lastIndex = literalOffset + 1;\n    }\n    return format;\n}\nexports.preserveLiterals = preserveLiterals;\nfunction restoreLiterals(format, literals, quoted) {\n    if (quoted === void 0) { quoted = true; }\n    var count = literals.length;\n    for (var i = 0; i < count; i++) {\n        var token = String.fromCharCode(0xE100 + i);\n        var literal = literals[i];\n        if (!quoted) {\n            // caller wants literals to be re-inserted without escaping\n            var firstChar = literal[0];\n            if (firstChar === \"\\\\\" || literal.length === 1 || literal[literal.length - 1] !== firstChar) {\n                // either escaped literal OR quoted literal that's missing the trailing quote\n                // in either case we only remove the leading character\n                literal = literal.substring(1);\n            }\n            else {\n                // so must be a quoted literal with both starting and ending quote\n                literal = literal.substring(1, literal.length - 1);\n            }\n        }\n        format = format.replace(token, literal);\n    }\n    return format;\n}\nexports.restoreLiterals = restoreLiterals;\n//# sourceMappingURL=formattingEncoder.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/* eslint-disable no-useless-escape */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formattingEncoder = exports.dateTimeFormat = exports.numberFormat = exports.formattingService = exports.FormattingService = void 0;\nvar globalize_1 = require(\"./../../globalize/globalize\");\nvar globalize_cultures_1 = require(\"./../../globalize/globalize.cultures\");\n(0, globalize_cultures_1.default)(globalize_1.Globalize);\nvar dateTimeFormat = require(\"./dateTimeFormat\");\nexports.dateTimeFormat = dateTimeFormat;\nvar numberFormat = require(\"./numberFormat\");\nexports.numberFormat = numberFormat;\nvar formattingEncoder = require(\"./formattingEncoder\");\nexports.formattingEncoder = formattingEncoder;\nvar iFormattingService_1 = require(\"./iFormattingService\");\nvar IndexedTokensRegex = /({{)|(}})|{(\\d+[^}]*)}/g;\n// Formatting Service\nvar FormattingService = /** @class */ (function () {\n    function FormattingService() {\n    }\n    FormattingService.prototype.formatValue = function (value, formatValue, cultureSelector) {\n        // Handle special cases\n        if (value === undefined || value === null) {\n            return \"\";\n        }\n        var gculture = this.getCulture(cultureSelector);\n        if (dateTimeFormat.canFormat(value)) {\n            // Dates\n            return dateTimeFormat.format(value, formatValue, gculture);\n        }\n        else if (numberFormat.canFormat(value)) {\n            // Numbers\n            return numberFormat.format(value, formatValue, gculture);\n        }\n        // Other data types - return as string\n        return value.toString();\n    };\n    FormattingService.prototype.format = function (formatWithIndexedTokens, args, culture) {\n        var _this = this;\n        if (!formatWithIndexedTokens) {\n            return \"\";\n        }\n        return formatWithIndexedTokens.replace(IndexedTokensRegex, function (match, left, right, argToken) {\n            if (left) {\n                return \"{\";\n            }\n            else if (right) {\n                return \"}\";\n            }\n            else {\n                var parts = argToken.split(\":\");\n                var argIndex = parseInt(parts[0], 10);\n                var argFormat = parts[1];\n                return _this.formatValue(args[argIndex], argFormat, culture);\n            }\n        });\n    };\n    FormattingService.prototype.isStandardNumberFormat = function (format) {\n        return numberFormat.isStandardFormat(format);\n    };\n    FormattingService.prototype.formatNumberWithCustomOverride = function (value, format, nonScientificOverrideFormat, culture) {\n        var gculture = this.getCulture(culture);\n        return numberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);\n    };\n    FormattingService.prototype.dateFormatString = function (unit) {\n        if (!this._dateTimeScaleFormatInfo)\n            this.initialize();\n        return this._dateTimeScaleFormatInfo.getFormatString(unit);\n    };\n    /**\n     * Sets the current localization culture\n     * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\n     */\n    FormattingService.prototype.setCurrentCulture = function (cultureSelector) {\n        if (this._currentCultureSelector !== cultureSelector) {\n            this._currentCulture = this.getCulture(cultureSelector);\n            this._currentCultureSelector = cultureSelector;\n            this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);\n        }\n    };\n    /**\n     * Gets the culture assotiated with the specified cultureSelector (\"en\", \"en-US\", \"fr-FR\" etc).\n     * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\n     * Exposing this function for testability of unsupported cultures\n     */\n    FormattingService.prototype.getCulture = function (cultureSelector) {\n        if (cultureSelector == null) {\n            if (this._currentCulture == null) {\n                this.initialize();\n            }\n            return this._currentCulture;\n        }\n        else {\n            var culture = globalize_1.Globalize.findClosestCulture(cultureSelector);\n            if (!culture)\n                culture = globalize_1.Globalize.culture(\"en-US\");\n            return culture;\n        }\n    };\n    // By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params\n    FormattingService.prototype.initialize = function () {\n        var cultureName = this.getCurrentCulture();\n        this.setCurrentCulture(cultureName);\n        var calendarName = this.getUrlParam(\"calendar\");\n        if (calendarName) {\n            var culture = this._currentCulture;\n            var c = culture.calendars[calendarName];\n            if (c) {\n                culture.calendar = c;\n            }\n        }\n    };\n    /**\n     *  Exposing this function for testability\n     */\n    FormattingService.prototype.getCurrentCulture = function () {\n        if (window === null || window === void 0 ? void 0 : window.navigator) {\n            return window.navigator.userLanguage || window.navigator[\"language\"];\n        }\n        return \"en-US\";\n    };\n    /**\n     *  Exposing this function for testability\n     *  @param name: queryString name\n     */\n    FormattingService.prototype.getUrlParam = function (name) {\n        var param = window.location.search.match(RegExp(\"[?&]\" + name + \"=([^&]*)\"));\n        return param ? param[1] : undefined;\n    };\n    return FormattingService;\n}());\nexports.FormattingService = FormattingService;\n// DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel\nvar DateTimeScaleFormatInfo = /** @class */ (function () {\n    // Constructor\n    /**\n     * Creates new instance of the DateTimeScaleFormatInfo class.\n     * @param culture - culture which calendar info is going to be used to derive the formats.\n     */\n    function DateTimeScaleFormatInfo(culture) {\n        var calendar = culture.calendar;\n        var patterns = calendar.patterns;\n        var monthAbbreviations = calendar[\"months\"][\"namesAbbr\"];\n        var cultureHasMonthAbbr = monthAbbreviations && monthAbbreviations[0];\n        var yearMonthPattern = patterns[\"Y\"];\n        var monthDayPattern = patterns[\"M\"];\n        var fullPattern = patterns[\"f\"];\n        var longTimePattern = patterns[\"T\"];\n        var shortTimePattern = patterns[\"t\"];\n        var separator = fullPattern.indexOf(\",\") > -1 ? \", \" : \" \";\n        var hasYearSymbol = yearMonthPattern.indexOf(\"yyyy'\") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === \"\\'\";\n        this.YearPattern = hasYearSymbol ? yearMonthPattern.substring(0, 7) : \"yyyy\";\n        var yearPos = fullPattern.indexOf(\"yy\");\n        var monthPos = fullPattern.indexOf(\"MMMM\");\n        this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? \"MMM yyyy\" : \"yyyy MMM\") : yearMonthPattern;\n        this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace(\"MMMM\", \"MMM\") : monthDayPattern;\n        var minutePos = fullPattern.indexOf(\"mm\");\n        var pmPos = fullPattern.indexOf(\"tt\");\n        var shortHourPattern = pmPos > -1 ? shortTimePattern.replace(\":mm \", \"\") : shortTimePattern;\n        this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;\n        this.MinutePattern = shortTimePattern;\n        this.SecondPattern = longTimePattern;\n        this.MillisecondPattern = longTimePattern.replace(\"ss\", \"ss.fff\");\n        // Special cases\n        switch (culture.name) {\n            case \"fi-FI\":\n                this.DayPattern = this.DayPattern.replace(\"'ta'\", \"\"); // Fix for finish 'ta' suffix for month names.\n                this.HourPattern = this.HourPattern.replace(\"'ta'\", \"\");\n                break;\n        }\n    }\n    // Methods\n    /**\n     * Returns the format string of the provided DateTimeUnit.\n     * @param unit - date or time unit\n     */\n    DateTimeScaleFormatInfo.prototype.getFormatString = function (unit) {\n        switch (unit) {\n            case iFormattingService_1.DateTimeUnit.Year:\n                return this.YearPattern;\n            case iFormattingService_1.DateTimeUnit.Month:\n                return this.MonthPattern;\n            case iFormattingService_1.DateTimeUnit.Week:\n            case iFormattingService_1.DateTimeUnit.Day:\n                return this.DayPattern;\n            case iFormattingService_1.DateTimeUnit.Hour:\n                return this.HourPattern;\n            case iFormattingService_1.DateTimeUnit.Minute:\n                return this.MinutePattern;\n            case iFormattingService_1.DateTimeUnit.Second:\n                return this.SecondPattern;\n            case iFormattingService_1.DateTimeUnit.Millisecond:\n                return this.MillisecondPattern;\n        }\n    };\n    return DateTimeScaleFormatInfo;\n}());\nvar formattingService = new FormattingService();\nexports.formattingService = formattingService;\n//# sourceMappingURL=formattingService.js.map","\"use strict\";\n/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DateTimeUnit = void 0;\n// Enumeration of DateTimeUnits\nvar DateTimeUnit;\n(function (DateTimeUnit) {\n    DateTimeUnit[DateTimeUnit[\"Year\"] = 0] = \"Year\";\n    DateTimeUnit[DateTimeUnit[\"Month\"] = 1] = \"Month\";\n    DateTimeUnit[DateTimeUnit[\"Week\"] = 2] = \"Week\";\n    DateTimeUnit[DateTimeUnit[\"Day\"] = 3] = \"Day\";\n    DateTimeUnit[DateTimeUnit[\"Hour\"] = 4] = \"Hour\";\n    DateTimeUnit[DateTimeUnit[\"Minute\"] = 5] = \"Minute\";\n    DateTimeUnit[DateTimeUnit[\"Second\"] = 6] = \"Second\";\n    DateTimeUnit[DateTimeUnit[\"Millisecond\"] = 7] = \"Millisecond\";\n})(DateTimeUnit = exports.DateTimeUnit || (exports.DateTimeUnit = {}));\n//# sourceMappingURL=iFormattingService.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCustomFormatMetadata = exports.formatWithCustomOverride = exports.format = exports.isStandardFormat = exports.canFormat = exports.getComponents = exports.hasFormatComponents = exports.addDecimalsToFormat = exports.getNumericFormat = exports.NumberFormatComponentsDelimeter = void 0;\n/**\n * NumberFormat module contains the static methods for formatting the numbers.\n * It extends the Globalize functionality to support complete set of .NET\n * formatting expressions for numeric types including custom formats.\n */\n/* eslint-disable no-useless-escape */\nvar globalize_1 = require(\"./../../globalize/globalize\");\n// powerbi.extensibility.utils.type\nvar powerbi_visuals_utils_typeutils_1 = require(\"powerbi-visuals-utils-typeutils\");\n// powerbi.extensibility.utils.formatting\nvar stringExtensions = require(\"./../stringExtensions\");\nvar formattingEncoder = require(\"./formattingEncoder\");\nvar formattingService_1 = require(\"./formattingService\");\nvar NumericalPlaceHolderRegex = /\\{.+\\}/;\nvar ScientificFormatRegex = /e[+-]*[0#]+/i;\nvar StandardFormatRegex = /^[a-z]\\d{0,2}$/i; // a letter + up to 2 digits for precision specifier\nvar TrailingZerosRegex = /0+$/;\nvar DecimalFormatRegex = /\\.([0#]*)/g;\nvar NumericFormatRegex = /[0#,\\.]+[0,#]*/g;\n// (?=...) is a positive lookahead assertion. The RE is asking for the last digit placeholder, [0#],\n// which is followed by non-digit placeholders and the end of string, [^0#]*$. But it only matches\n// the last digit placeholder, not anything that follows because the positive lookahead isn\"t included\n// in the match - it is only a condition.\nvar LastNumericPlaceholderRegex = /([0#])(?=[^0#]*$)/;\nvar DecimalFormatCharacter = \".\";\nvar ZeroPlaceholder = \"0\";\nvar DigitPlaceholder = \"#\";\nvar ExponentialFormatChar = \"E\";\nvar NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];\nvar NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join(\"|\"), \"g\");\nexports.NumberFormatComponentsDelimeter = \";\";\nfunction getNonScientificFormatWithPrecision(baseFormat, numericFormat) {\n    if (!numericFormat || baseFormat === undefined)\n        return baseFormat;\n    var newFormat = \"{0:\" + numericFormat + \"}\";\n    return baseFormat.replace(\"{0}\", newFormat);\n}\nfunction getNumericFormat(value, baseFormat) {\n    if (baseFormat == null)\n        return baseFormat;\n    if (hasFormatComponents(baseFormat)) {\n        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;\n        if (value > 0)\n            return getNumericFormatFromComponent(value, positive);\n        else if (value === 0)\n            return getNumericFormatFromComponent(value, zero);\n        return getNumericFormatFromComponent(value, negative);\n    }\n    return getNumericFormatFromComponent(value, baseFormat);\n}\nexports.getNumericFormat = getNumericFormat;\nfunction getNumericFormatFromComponent(value, format) {\n    var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(NumericFormatRegex, format);\n    if (match)\n        return match[0];\n    return format;\n}\nfunction addDecimalsToFormat(baseFormat, decimals, trailingZeros) {\n    if (decimals == null)\n        return baseFormat;\n    // Default format string\n    if (baseFormat == null)\n        baseFormat = ZeroPlaceholder;\n    if (hasFormatComponents(baseFormat)) {\n        var _a = getComponents(baseFormat), positive = _a.positive, negative = _a.negative, zero = _a.zero;\n        var formats = [positive, negative, zero];\n        for (var i = 0; i < formats.length; i++) {\n            // Update format in formats array\n            formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);\n        }\n        return formats.join(exports.NumberFormatComponentsDelimeter);\n    }\n    return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);\n}\nexports.addDecimalsToFormat = addDecimalsToFormat;\nfunction addDecimalsToFormatComponent(format, decimals, trailingZeros) {\n    decimals = Math.abs(decimals);\n    if (decimals >= 0) {\n        var literals = [];\n        format = formattingEncoder.preserveLiterals(format, literals);\n        var placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;\n        var decimalPlaceholders = stringExtensions.repeat(placeholder, Math.abs(decimals));\n        var match = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(DecimalFormatRegex, format);\n        if (match) {\n            var beforeDecimal = format.substring(0, match.index);\n            var formatDecimal = format.substring(match.index + 1, match[1].length + match.index + 1);\n            var afterDecimal = format.substring(match.index + match[0].length);\n            if (trailingZeros)\n                // Use explicit decimals argument as placeholders\n                formatDecimal = decimalPlaceholders;\n            else {\n                var decimalChange = decimalPlaceholders.length - formatDecimal.length;\n                if (decimalChange > 0)\n                    // Append decimalPlaceholders to existing decimal portion of format string\n                    formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);\n                else if (decimalChange < 0)\n                    // Remove decimals from formatDecimal\n                    formatDecimal = formatDecimal.slice(0, decimalChange);\n            }\n            if (formatDecimal.length > 0)\n                formatDecimal = DecimalFormatCharacter + formatDecimal;\n            format = beforeDecimal + formatDecimal + afterDecimal;\n        }\n        else if (decimalPlaceholders.length > 0) {\n            // Replace last numeric placeholder with decimal portion\n            format = format.replace(LastNumericPlaceholderRegex, \"$1\" + DecimalFormatCharacter + decimalPlaceholders);\n        }\n        if (literals.length !== 0)\n            format = formattingEncoder.restoreLiterals(format, literals);\n    }\n    return format;\n}\nfunction hasFormatComponents(format) {\n    return formattingEncoder.removeLiterals(format).indexOf(exports.NumberFormatComponentsDelimeter) !== -1;\n}\nexports.hasFormatComponents = hasFormatComponents;\nfunction getComponents(format) {\n    var signFormat = {\n        hasNegative: false,\n        positive: format,\n        negative: format,\n        zero: format,\n    };\n    // escape literals so semi-colon in a literal isn't interpreted as a delimiter\n    // NOTE: OK to use the literals extracted here for all three components before since the literals are indexed.\n    // For example, \"'pos-lit';'neg-lit'\" will get preserved as \"\\uE000;\\uE001\" and the literal array will be\n    // ['pos-lit', 'neg-lit']. When the negative components is restored, its \\uE001 will select the second\n    // literal.\n    var literals = [];\n    format = formattingEncoder.preserveLiterals(format, literals);\n    var signSpecificFormats = format.split(exports.NumberFormatComponentsDelimeter);\n    var formatCount = signSpecificFormats.length;\n    if (formatCount > 1) {\n        if (literals.length !== 0)\n            signSpecificFormats = signSpecificFormats.map(function (signSpecificFormat) { return formattingEncoder.restoreLiterals(signSpecificFormat, literals); });\n        signFormat.hasNegative = true;\n        signFormat.positive = signFormat.zero = signSpecificFormats[0];\n        signFormat.negative = signSpecificFormats[1];\n        if (formatCount > 2)\n            signFormat.zero = signSpecificFormats[2];\n    }\n    return signFormat;\n}\nexports.getComponents = getComponents;\nvar _lastCustomFormatMeta;\n// Evaluates if the value can be formatted using the NumberFormat\nfunction canFormat(value) {\n    return typeof (value) === \"number\";\n}\nexports.canFormat = canFormat;\nfunction isStandardFormat(format) {\n    return StandardFormatRegex.test(format);\n}\nexports.isStandardFormat = isStandardFormat;\n// Formats the number using specified format expression and culture\nfunction format(value, format, culture) {\n    format = format || \"G\";\n    try {\n        if (isStandardFormat(format))\n            return formatNumberStandard(value, format, culture);\n        return formatNumberCustom(value, format, culture);\n    }\n    catch (e) {\n        return globalize_1.Globalize.format(value, undefined, culture);\n    }\n}\nexports.format = format;\n// Performs a custom format with a value override.  Typically used for custom formats showing scaled values.\nfunction formatWithCustomOverride(value, format, nonScientificOverrideFormat, culture) {\n    return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);\n}\nexports.formatWithCustomOverride = formatWithCustomOverride;\n// Formats the number using standard format expression\nfunction formatNumberStandard(value, format, culture) {\n    var result;\n    var precision = (format.length > 1 ? parseInt(format.substring(1, format.length), 10) : undefined);\n    var numberFormatInfo = culture.numberFormat;\n    var formatChar = format.charAt(0);\n    var abs = Math.abs(value);\n    switch (formatChar) {\n        case \"e\":\n        case \"E\":\n            if (precision === undefined) {\n                precision = 6;\n            }\n            format = \"0.\" + stringExtensions.repeat(\"0\", precision) + formatChar + \"+000\";\n            result = formatNumberCustom(value, format, culture);\n            break;\n        case \"f\":\n        case \"F\":\n            result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);\n            result = localize(result, numberFormatInfo);\n            break;\n        case \"g\":\n        case \"G\":\n            if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {\n                // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form\n                result = precision !== undefined ? value.toPrecision(precision) : value.toString();\n            }\n            else {\n                // Otherwise use exponential\n                // Assert that value is a number and fall back on returning value if it is not\n                if (typeof (value) !== \"number\")\n                    return String(value);\n                result = precision !== undefined ? value.toExponential(precision) : value.toExponential();\n                result = result.replace(\"e\", \"E\");\n            }\n            result = localize(result, numberFormatInfo);\n            break;\n        case \"r\":\n        case \"R\":\n            result = value.toString();\n            result = localize(result, numberFormatInfo);\n            break;\n        case \"x\":\n        case \"X\":\n            result = value.toString(16);\n            if (formatChar === \"X\") {\n                result = result.toUpperCase();\n            }\n            if (precision !== undefined) {\n                var actualPrecision = result.length;\n                var isNegative = value < 0;\n                if (isNegative) {\n                    actualPrecision--;\n                }\n                var paddingZerosCount = precision - actualPrecision;\n                var paddingZeros = undefined;\n                if (paddingZerosCount > 0) {\n                    paddingZeros = stringExtensions.repeat(\"0\", paddingZerosCount);\n                }\n                if (isNegative) {\n                    result = \"-\" + paddingZeros + result.substring(1);\n                }\n                else {\n                    result = paddingZeros + result;\n                }\n            }\n            result = localize(result, numberFormatInfo);\n            break;\n        default:\n            result = globalize_1.Globalize.format(value, format, culture);\n    }\n    return result;\n}\n// Formats the number using custom format expression\nfunction formatNumberCustom(value, format, culture, nonScientificOverrideFormat) {\n    var result;\n    var numberFormatInfo = culture.numberFormat;\n    if (isFinite(value)) {\n        // Split format by positive[;negative;zero] pattern\n        var formatComponents = getComponents(format);\n        // Pick a format based on the sign of value\n        if (value > 0) {\n            format = formatComponents.positive;\n        }\n        else if (value === 0) {\n            format = formatComponents.zero;\n        }\n        else {\n            format = formatComponents.negative;\n        }\n        // Normalize value if we have an explicit negative format\n        if (formatComponents.hasNegative)\n            value = Math.abs(value);\n        // Get format metadata\n        var formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);\n        // Preserve literals and escaped chars\n        var literals = [];\n        if (formatMeta.hasLiterals) {\n            format = formattingEncoder.preserveLiterals(format, literals);\n        }\n        // Scientific format\n        if (formatMeta.hasE && !nonScientificOverrideFormat) {\n            var scientificMatch = powerbi_visuals_utils_typeutils_1.regExpExtensions.run(ScientificFormatRegex, format);\n            if (scientificMatch) {\n                // Case 2.1. Scientific custom format\n                var formatM = format.substring(0, scientificMatch.index);\n                var formatE = format.substring(scientificMatch.index + 2); // E(+|-)\n                var precision = getCustomFormatPrecision(formatM, formatMeta);\n                var scale = getCustomFormatScale(formatM, formatMeta);\n                if (scale !== 1) {\n                    value = value * scale;\n                }\n                // Assert that value is a number and fall back on returning value if it is not\n                if (typeof (value) !== \"number\")\n                    return String(value);\n                var s = value.toExponential(precision);\n                var indexOfE = s.indexOf(\"e\");\n                var mantissa = s.substring(0, indexOfE);\n                var exp = s.substring(indexOfE + 1);\n                var resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);\n                var resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);\n                if (resultE.charAt(0) === \"+\" && scientificMatch[0].charAt(1) !== \"+\") {\n                    resultE = resultE.substring(1);\n                }\n                var e = scientificMatch[0].charAt(0);\n                result = resultM + e + resultE;\n            }\n        }\n        // Non scientific format\n        if (result === undefined) {\n            var valueFormatted = void 0;\n            var isValueGlobalized = false;\n            var precision = getCustomFormatPrecision(format, formatMeta);\n            var scale = getCustomFormatScale(format, formatMeta);\n            if (scale !== 1)\n                value = value * scale;\n            // Rounding\n            value = parseFloat(toNonScientific(value, precision));\n            if (!isFinite(value)) {\n                // very large and small finite values can become infinite by parseFloat(toNonScientific())\n                return globalize_1.Globalize.format(value, undefined);\n            }\n            if (nonScientificOverrideFormat) {\n                // Get numeric format from format string\n                var numericFormat = getNumericFormat(value, format);\n                // Add separators and decimalFormat to nonScientificFormat\n                nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);\n                // Format the value\n                valueFormatted = formattingService_1.formattingService.format(nonScientificOverrideFormat, [value], culture.name);\n                isValueGlobalized = true;\n            }\n            else\n                valueFormatted = toNonScientific(value, precision);\n            result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);\n        }\n        if (formatMeta.hasLiterals) {\n            result = formattingEncoder.restoreLiterals(result, literals, false);\n        }\n        _lastCustomFormatMeta = formatMeta;\n    }\n    else {\n        return globalize_1.Globalize.format(value, undefined);\n    }\n    return result;\n}\n// Returns string with the fixed point respresentation of the number\nfunction toNonScientific(value, precision) {\n    var result = \"\";\n    var precisionZeros = 0;\n    // Double precision numbers support actual 15-16 decimal digits of precision.\n    if (precision > 16) {\n        precisionZeros = precision - 16;\n        precision = 16;\n    }\n    var digitsBeforeDecimalPoint = powerbi_visuals_utils_typeutils_1.double.log10(Math.abs(value));\n    if (digitsBeforeDecimalPoint < 16) {\n        if (digitsBeforeDecimalPoint > 0) {\n            var maxPrecision = 16 - digitsBeforeDecimalPoint;\n            if (precision > maxPrecision) {\n                precisionZeros += precision - maxPrecision;\n                precision = maxPrecision;\n            }\n        }\n        result = value.toFixed(precision);\n    }\n    else if (digitsBeforeDecimalPoint === 16) {\n        result = value.toFixed(0);\n        precisionZeros += precision;\n        if (precisionZeros > 0) {\n            result += \".\";\n        }\n    }\n    else { // digitsBeforeDecimalPoint > 16\n        // Different browsers have different implementations of the toFixed().\n        // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.\n        // So we need to check for range and convert the to exponential with the max precision.\n        // Then we convert exponential string to fixed by removing the dot and padding with \"power\" zeros.\n        // Assert that value is a number and fall back on returning value if it is not\n        if (typeof (value) !== \"number\")\n            return String(value);\n        result = value.toExponential(15);\n        var indexOfE = result.indexOf(\"e\");\n        if (indexOfE > 0) {\n            var indexOfDot = result.indexOf(\".\");\n            var mantissa = result.substring(0, indexOfE);\n            var exp = result.substring(indexOfE + 1);\n            var powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);\n            result = mantissa.replace(\".\", \"\") + stringExtensions.repeat(\"0\", powerZeros);\n            if (precision > 0) {\n                result = result + \".\" + stringExtensions.repeat(\"0\", precision);\n            }\n        }\n    }\n    if (precisionZeros > 0) {\n        result = result + stringExtensions.repeat(\"0\", precisionZeros);\n    }\n    return result;\n}\n/**\n * Returns the formatMetadata of the format\n * When calculating precision and scale, if format string of\n * positive[;negative;zero] => positive format will be used\n * @param (required) format - format string\n * @param (optional) calculatePrecision - calculate precision of positive format\n * @param (optional) calculateScale - calculate scale of positive format\n */\nfunction getCustomFormatMetadata(format, calculatePrecision, calculateScale, calculatePartsPerScale) {\n    if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {\n        return _lastCustomFormatMeta;\n    }\n    var literals = [];\n    var escaped = formattingEncoder.preserveLiterals(format, literals);\n    var result = {\n        format: format,\n        hasLiterals: literals.length !== 0,\n        hasE: false,\n        hasCommas: false,\n        hasDots: false,\n        hasPercent: false,\n        hasPermile: false,\n        precision: undefined,\n        scale: undefined,\n        partsPerScale: undefined,\n    };\n    for (var i = 0, length_1 = escaped.length; i < length_1; i++) {\n        var c = escaped.charAt(i);\n        switch (c) {\n            case \"e\":\n            case \"E\":\n                result.hasE = true;\n                break;\n            case \",\":\n                result.hasCommas = true;\n                break;\n            case \".\":\n                result.hasDots = true;\n                break;\n            case \"%\":\n                result.hasPercent = true;\n                break;\n            case \"\\u2030\": // ‰\n                result.hasPermile = true;\n                break;\n        }\n    }\n    // Use positive format for calculating these values\n    var formatComponents = getComponents(format);\n    if (calculatePrecision)\n        result.precision = getCustomFormatPrecision(formatComponents.positive, result);\n    if (calculatePartsPerScale)\n        result.partsPerScale = getCustomFormatPartsPerScale(formatComponents.positive, result);\n    if (calculateScale)\n        result.scale = getCustomFormatScale(formatComponents.positive, result);\n    return result;\n}\nexports.getCustomFormatMetadata = getCustomFormatMetadata;\n/** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point\n     * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */\nfunction getCustomFormatPrecision(format, formatMeta) {\n    if (formatMeta.precision > -1) {\n        return formatMeta.precision;\n    }\n    var result = 0;\n    if (formatMeta.hasDots) {\n        if (formatMeta.hasLiterals) {\n            format = formattingEncoder.removeLiterals(format);\n        }\n        var dotIndex = format.indexOf(\".\");\n        if (dotIndex > -1) {\n            var count = format.length;\n            for (var i = dotIndex; i < count; i++) {\n                var char = format.charAt(i);\n                if (char.match(NumericPlaceholderRegex))\n                    result++;\n                // 0.00E+0 :: Break before counting 0 in\n                // exponential portion of format string\n                if (char === ExponentialFormatChar)\n                    break;\n            }\n            result = Math.min(19, result);\n        }\n    }\n    formatMeta.precision = result;\n    return result;\n}\nfunction getCustomFormatPartsPerScale(format, formatMeta) {\n    if (formatMeta.partsPerScale != null)\n        return formatMeta.partsPerScale;\n    var result = 1;\n    if (formatMeta.hasPercent && format.indexOf(\"%\") > -1) {\n        result = result * 100;\n    }\n    if (formatMeta.hasPermile && format.indexOf(/* ‰ */ \"\\u2030\") > -1) {\n        result = result * 1000;\n    }\n    formatMeta.partsPerScale = result;\n    return result;\n}\n// Returns the scale factor of the format based on the \"%\" and scaling \",\" chars in the format\nfunction getCustomFormatScale(format, formatMeta) {\n    if (formatMeta.scale > -1) {\n        return formatMeta.scale;\n    }\n    var result = getCustomFormatPartsPerScale(format, formatMeta);\n    if (formatMeta.hasCommas) {\n        var dotIndex = format.indexOf(\".\");\n        if (dotIndex === -1) {\n            dotIndex = format.length;\n        }\n        for (var i = dotIndex - 1; i > -1; i--) {\n            var char = format.charAt(i);\n            if (char === \",\") {\n                result = result / 1000;\n            }\n            else {\n                break;\n            }\n        }\n    }\n    formatMeta.scale = result;\n    return result;\n}\nfunction fuseNumberWithCustomFormat(value, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized) {\n    var suppressModifyValue = !!nonScientificOverrideFormat;\n    var formatParts = format.split(\".\", 2);\n    if (formatParts.length === 2) {\n        var wholeFormat = formatParts[0];\n        var fractionFormat = formatParts[1];\n        var displayUnit = \"\";\n        // Remove display unit from value before splitting on \".\" as localized display units sometimes end with \".\"\n        if (nonScientificOverrideFormat) {\n            displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, \"\");\n            value = value.replace(displayUnit, \"\");\n        }\n        var globalizedDecimalSeparator = numberFormatInfo[\".\"];\n        var decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : \".\";\n        var valueParts = value.split(decimalSeparator, 2);\n        var wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];\n        var fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : \"\";\n        fractionValue = fractionValue.replace(TrailingZerosRegex, \"\");\n        var wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);\n        var fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);\n        if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === \"\")\n            return wholeFormattedValue + fractionFormattedValue.value;\n        return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;\n    }\n    return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);\n}\nfunction fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue) {\n    var groupSymbolIndex = format.indexOf(\",\");\n    var enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf(\"0\"), format.lastIndexOf(\"#\")) && numberFormatInfo[\",\"];\n    var groupDigitCount = 0;\n    var groupIndex = 0;\n    var groupSizes = numberFormatInfo.groupSizes || [3];\n    var groupSize = groupSizes[0];\n    var groupSeparator = numberFormatInfo[\",\"];\n    var sign = \"\";\n    var firstChar = value.charAt(0);\n    if (firstChar === \"+\" || firstChar === \"-\") {\n        sign = numberFormatInfo[firstChar];\n        value = value.substring(1);\n    }\n    var isZero = value === \"0\";\n    var result = \"\";\n    var leftBuffer = \"\";\n    var vi = value.length - 1;\n    var fmtOnly = true;\n    // Iterate through format chars and replace 0 and # with the digits from the value string\n    for (var fi = format.length - 1; fi > -1; fi--) {\n        var formatChar = format.charAt(fi);\n        switch (formatChar) {\n            case ZeroPlaceholder:\n            case DigitPlaceholder:\n                fmtOnly = false;\n                if (leftBuffer !== \"\") {\n                    result = leftBuffer + result;\n                    leftBuffer = \"\";\n                }\n                if (!suppressModifyValue) {\n                    if (vi > -1 || formatChar === ZeroPlaceholder) {\n                        if (enableGroups) {\n                            // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,\n                            if (groupDigitCount === groupSize) {\n                                result = groupSeparator + result;\n                                groupIndex++;\n                                if (groupIndex < groupSizes.length) {\n                                    groupSize = groupSizes[groupIndex];\n                                }\n                                groupDigitCount = 1;\n                            }\n                            else {\n                                groupDigitCount++;\n                            }\n                        }\n                    }\n                    if (vi > -1) {\n                        if (isZero && formatChar === DigitPlaceholder) {\n                            // Special case - if we need to format a zero value and the # symbol is used - we don't copy it into the result)\n                        }\n                        else {\n                            result = value.charAt(vi) + result;\n                        }\n                        vi--;\n                    }\n                    else if (formatChar !== DigitPlaceholder) {\n                        result = formatChar + result;\n                    }\n                }\n                break;\n            case \",\":\n                // We should skip all the , chars\n                break;\n            default:\n                leftBuffer = formatChar + leftBuffer;\n                break;\n        }\n    }\n    // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result\n    if (!suppressModifyValue) {\n        if (vi > -1 && result !== \"\") {\n            if (enableGroups) {\n                while (vi > -1) {\n                    if (groupDigitCount === groupSize) {\n                        result = groupSeparator + result;\n                        groupIndex++;\n                        if (groupIndex < groupSizes.length) {\n                            groupSize = groupSizes[groupIndex];\n                        }\n                        groupDigitCount = 1;\n                    }\n                    else {\n                        groupDigitCount++;\n                    }\n                    result = value.charAt(vi) + result;\n                    vi--;\n                }\n            }\n            else {\n                result = value.substring(0, vi + 1) + result;\n            }\n        }\n        // Insert sign in front of the leftBuffer and result\n        return sign + leftBuffer + result;\n    }\n    if (fmtOnly)\n        // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.\n        return sign + leftBuffer + result;\n    return sign + leftBuffer + value + result;\n}\nfunction fuseNumberWithCustomFormatRight(value, format, suppressModifyValue) {\n    var formatLength = format.length;\n    var valueLength = value.length;\n    if (suppressModifyValue) {\n        var lastChar = format.charAt(formatLength - 1);\n        if (!lastChar.match(NumericPlaceholderRegex))\n            return {\n                value: value + lastChar,\n                fmtOnly: value === \"\",\n            };\n        return {\n            value: value,\n            fmtOnly: value === \"\",\n        };\n    }\n    var result = \"\", fmtOnly = true, vi = 0;\n    for (var fi = 0; fi < formatLength; fi++) {\n        var formatChar = format.charAt(fi);\n        if (vi < valueLength) {\n            switch (formatChar) {\n                case ZeroPlaceholder:\n                case DigitPlaceholder:\n                    result += value[vi++];\n                    fmtOnly = false;\n                    break;\n                default:\n                    result += formatChar;\n            }\n        }\n        else {\n            if (formatChar !== DigitPlaceholder) {\n                result += formatChar;\n                fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);\n            }\n        }\n    }\n    return {\n        value: result,\n        fmtOnly: fmtOnly,\n    };\n}\nfunction localize(value, dictionary) {\n    var plus = dictionary[\"+\"];\n    var minus = dictionary[\"-\"];\n    var dot = dictionary[\".\"];\n    var comma = dictionary[\",\"];\n    if (plus === \"+\" && minus === \"-\" && dot === \".\" && comma === \",\") {\n        return value;\n    }\n    var count = value.length;\n    var result = \"\";\n    for (var i = 0; i < count; i++) {\n        var char = value.charAt(i);\n        switch (char) {\n            case \"+\":\n                result = result + plus;\n                break;\n            case \"-\":\n                result = result + minus;\n                break;\n            case \".\":\n                result = result + dot;\n                break;\n            case \",\":\n                result = result + comma;\n                break;\n            default:\n                result = result + char;\n                break;\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=numberFormat.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.familyInfo = exports.font = exports.formattingService = exports.displayUnitSystemType = exports.dateTimeSequence = exports.displayUnitSystem = exports.dateUtils = exports.wordBreaker = exports.textUtil = exports.textMeasurementService = exports.stringExtensions = exports.valueFormatter = exports.formatting = exports.interfaces = void 0;\nvar formatting = require(\"./formatting\");\nexports.formatting = formatting;\nvar valueFormatter = require(\"./valueFormatter\");\nexports.valueFormatter = valueFormatter;\nvar stringExtensions = require(\"./stringExtensions\");\nexports.stringExtensions = stringExtensions;\nvar textMeasurementService = require(\"./textMeasurementService\");\nexports.textMeasurementService = textMeasurementService;\nvar interfaces = require(\"./interfaces\");\nexports.interfaces = interfaces;\nvar font = require(\"./font/family\");\nexports.font = font;\nvar familyInfo = require(\"./font/familyInfo\");\nexports.familyInfo = familyInfo;\nvar textUtil = require(\"./textUtil\");\nexports.textUtil = textUtil;\nvar dateUtils = require(\"./date/dateUtils\");\nexports.dateUtils = dateUtils;\nvar dateTimeSequence = require(\"./date/dateTimeSequence\");\nexports.dateTimeSequence = dateTimeSequence;\nvar displayUnitSystem = require(\"./displayUnitSystem/displayUnitSystem\");\nexports.displayUnitSystem = displayUnitSystem;\nvar displayUnitSystemType = require(\"./displayUnitSystem/displayUnitSystemType\");\nexports.displayUnitSystemType = displayUnitSystemType;\nvar formattingService = require(\"./formattingService/formattingService\");\nexports.formattingService = formattingService;\nvar wordBreaker = require(\"./wordBreaker\");\nexports.wordBreaker = wordBreaker;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=interfaces.js.map","\"use strict\";\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ephemeralStorageService = exports.EphemeralStorageService = void 0;\nvar EphemeralStorageService = /** @class */ (function () {\n    function EphemeralStorageService(clearCacheInterval) {\n        this.cache = {};\n        this.clearCacheInterval = (clearCacheInterval != null)\n            ? clearCacheInterval\n            : EphemeralStorageService.defaultClearCacheInterval;\n        this.clearCache();\n    }\n    EphemeralStorageService.prototype.getData = function (key) {\n        return this.cache[key];\n    };\n    EphemeralStorageService.prototype.setData = function (key, data) {\n        var _this = this;\n        this.cache[key] = data;\n        if (this.clearCacheTimerId == null) {\n            this.clearCacheTimerId = setTimeout(function () { return _this.clearCache(); }, this.clearCacheInterval);\n        }\n    };\n    EphemeralStorageService.prototype.clearCache = function () {\n        this.cache = {};\n        this.clearCacheTimerId = undefined;\n    };\n    EphemeralStorageService.defaultClearCacheInterval = (1000 * 60 * 60 * 24); // 1 day\n    return EphemeralStorageService;\n}());\nexports.EphemeralStorageService = EphemeralStorageService;\nexports.ephemeralStorageService = new EphemeralStorageService();\n//# sourceMappingURL=ephemeralStorageService.js.map","\"use strict\";\n/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stripTagDelimiters = exports.deriveClsCompliantName = exports.stringifyAsPrettyJSON = exports.normalizeFileName = exports.escapeStringForRegex = exports.constructNameFromList = exports.findUniqueName = exports.ensureUniqueNames = exports.replaceAll = exports.repeat = exports.getLengthDifference = exports.trimWhitespace = exports.trimTrailingWhitespace = exports.isWhitespace = exports.containsWhitespace = exports.isNullOrUndefinedOrWhiteSpaceString = exports.isNullOrEmpty = exports.stringToArrayBuffer = exports.normalizeCase = exports.containsIgnoreCase = exports.contains = exports.startsWith = exports.startsWithIgnoreCase = exports.equalIgnoreCase = exports.format = exports.endsWith = void 0;\n/* eslint-disable no-useless-escape */\nvar HtmlTagRegex = new RegExp(\"[<>]\", \"g\");\n/**\n * Checks if a string ends with a sub-string.\n */\nfunction endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\nexports.endsWith = endsWith;\nfunction format() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var s = args[0];\n    if (isNullOrUndefinedOrWhiteSpaceString(s))\n        return s;\n    for (var i = 0; i < args.length - 1; i++) {\n        var reg = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"gm\");\n        s = s.replace(reg, args[i + 1]);\n    }\n    return s;\n}\nexports.format = format;\n/**\n * Compares two strings for equality, ignoring case.\n */\nfunction equalIgnoreCase(a, b) {\n    return normalizeCase(a) === normalizeCase(b);\n}\nexports.equalIgnoreCase = equalIgnoreCase;\nfunction startsWithIgnoreCase(a, b) {\n    var normalizedSearchString = normalizeCase(b);\n    return normalizeCase(a).indexOf(normalizedSearchString) === 0;\n}\nexports.startsWithIgnoreCase = startsWithIgnoreCase;\nfunction startsWith(a, b) {\n    return a.indexOf(b) === 0;\n}\nexports.startsWith = startsWith;\n// Determines whether a string contains a specified substring (by case-sensitive comparison).\nfunction contains(source, substring) {\n    if (source == null)\n        return false;\n    return source.indexOf(substring) !== -1;\n}\nexports.contains = contains;\n// Determines whether a string contains a specified substring (while ignoring case).\nfunction containsIgnoreCase(source, substring) {\n    if (source == null)\n        return false;\n    return contains(normalizeCase(source), normalizeCase(substring));\n}\nexports.containsIgnoreCase = containsIgnoreCase;\n/**\n * Normalizes case for a string.\n * Used by equalIgnoreCase method.\n */\nfunction normalizeCase(value) {\n    return value.toUpperCase();\n}\nexports.normalizeCase = normalizeCase;\n/**\n * Receives a string and returns an ArrayBuffer of its characters.\n * @return An ArrayBuffer of the string's characters.\n * If the string is empty or null or undefined - returns null.\n */\nfunction stringToArrayBuffer(str) {\n    if (isNullOrEmpty(str)) {\n        return null;\n    }\n    var buffer = new ArrayBuffer(str.length);\n    var bufferView = new Uint8Array(buffer);\n    for (var i = 0, strLen = str.length; i < strLen; i++) {\n        bufferView[i] = str.charCodeAt(i);\n    }\n    return bufferView;\n}\nexports.stringToArrayBuffer = stringToArrayBuffer;\n/**\n * Is string null or empty or undefined?\n * @return True if the value is null or undefined or empty string,\n * otherwise false.\n */\nfunction isNullOrEmpty(value) {\n    return (value == null) || (value.length === 0);\n}\nexports.isNullOrEmpty = isNullOrEmpty;\n/**\n * Returns true if the string is null, undefined, empty, or only includes white spaces.\n * @return True if the str is null, undefined, empty, or only includes white spaces,\n * otherwise false.\n */\nfunction isNullOrUndefinedOrWhiteSpaceString(str) {\n    return isNullOrEmpty(str) || isNullOrEmpty(str.trim());\n}\nexports.isNullOrUndefinedOrWhiteSpaceString = isNullOrUndefinedOrWhiteSpaceString;\n/**\n * Returns a value indicating whether the str contains any whitespace.\n */\nfunction containsWhitespace(str) {\n    var expr = /\\s/;\n    return expr.test(str);\n}\nexports.containsWhitespace = containsWhitespace;\n/**\n * Returns a value indicating whether the str is a whitespace string.\n */\nfunction isWhitespace(str) {\n    return str.trim() === \"\";\n}\nexports.isWhitespace = isWhitespace;\n/**\n * Returns the string with any trailing whitespace from str removed.\n */\nfunction trimTrailingWhitespace(str) {\n    return str.replace(/\\s+$/, \"\");\n}\nexports.trimTrailingWhitespace = trimTrailingWhitespace;\n/**\n * Returns the string with any leading and trailing whitespace from str removed.\n */\nfunction trimWhitespace(str) {\n    return str.replace(/^\\s+/, \"\").replace(/\\s+$/, \"\");\n}\nexports.trimWhitespace = trimWhitespace;\n/**\n * Returns length difference between the two provided strings.\n */\nfunction getLengthDifference(left, right) {\n    return Math.abs(left.length - right.length);\n}\nexports.getLengthDifference = getLengthDifference;\n/**\n * Repeat char or string several times.\n * @param char The string to repeat.\n * @param count How many times to repeat the string.\n */\nfunction repeat(char, count) {\n    var result = \"\";\n    for (var i = 0; i < count; i++) {\n        result += char;\n    }\n    return result;\n}\nexports.repeat = repeat;\n/**\n * Replace all the occurrences of the textToFind in the text with the textToReplace.\n * @param text The original string.\n * @param textToFind Text to find in the original string.\n * @param textToReplace New text replacing the textToFind.\n */\nfunction replaceAll(text, textToFind, textToReplace) {\n    if (!textToFind)\n        return text;\n    var pattern = escapeStringForRegex(textToFind);\n    return text.replace(new RegExp(pattern, \"gi\"), textToReplace);\n}\nexports.replaceAll = replaceAll;\nfunction ensureUniqueNames(names) {\n    var usedNames = {};\n    // Make sure we are giving fair chance for all columns to stay with their original name\n    // First we fill the used names map to contain all the original unique names from the list.\n    for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {\n        var name_1 = names_1[_i];\n        usedNames[name_1] = false;\n    }\n    var uniqueNames = [];\n    // Now we go over all names and find a unique name for each\n    for (var _a = 0, names_2 = names; _a < names_2.length; _a++) {\n        var name_2 = names_2[_a];\n        var uniqueName = name_2;\n        // If the (original) column name is already taken lets try to find another name\n        if (usedNames[uniqueName]) {\n            var counter = 0;\n            // Find a name that is not already in the map\n            while (usedNames[uniqueName] !== undefined) {\n                uniqueName = name_2 + \".\" + (++counter);\n            }\n        }\n        uniqueNames.push(uniqueName);\n        usedNames[uniqueName] = true;\n    }\n    return uniqueNames;\n}\nexports.ensureUniqueNames = ensureUniqueNames;\n/**\n * Returns a name that is not specified in the values.\n */\nfunction findUniqueName(usedNames, baseName) {\n    // Find a unique name\n    var i = 0, uniqueName = baseName;\n    while (usedNames[uniqueName]) {\n        uniqueName = baseName + (++i);\n    }\n    return uniqueName;\n}\nexports.findUniqueName = findUniqueName;\nfunction constructNameFromList(list, separator, maxCharacter) {\n    var labels = [];\n    var exceeded;\n    var length = 0;\n    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n        var item = list_1[_i];\n        if (length + item.length > maxCharacter && labels.length > 0) {\n            exceeded = true;\n            break;\n        }\n        labels.push(item);\n        length += item.length;\n    }\n    var separatorWithSpace = \" \" + separator + \" \";\n    var name = labels.join(separatorWithSpace);\n    if (exceeded)\n        name += separatorWithSpace + \"...\";\n    return name;\n}\nexports.constructNameFromList = constructNameFromList;\nfunction escapeStringForRegex(s) {\n    return s.replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, \"\\\\$1\");\n}\nexports.escapeStringForRegex = escapeStringForRegex;\n/**\n * Remove file name reserved characters <>:\"/\\|?* from input string.\n */\nfunction normalizeFileName(fileName) {\n    return fileName.replace(/[\\<\\>\\:\"\\/\\\\\\|\\?*]/g, \"\");\n}\nexports.normalizeFileName = normalizeFileName;\n/**\n * Similar to JSON.stringify, but strips away escape sequences so that the resulting\n * string is human-readable (and parsable by JSON formatting/validating tools).\n */\nfunction stringifyAsPrettyJSON(object) {\n    // let specialCharacterRemover = (key: string, value: string) => value.replace(/[^\\w\\s]/gi, \"\");\n    return JSON.stringify(object /*, specialCharacterRemover*/);\n}\nexports.stringifyAsPrettyJSON = stringifyAsPrettyJSON;\n/**\n * Derive a CLS-compliant name from a specified string.  If no allowed characters are present, return a fallback string instead.\n * (6708134): this should have a fully Unicode-aware implementation\n */\nfunction deriveClsCompliantName(input, fallback) {\n    var result = input.replace(/^[^A-Za-z]*/g, \"\").replace(/[ :\\.\\/\\\\\\-\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000]/g, \"_\").replace(/[\\W]/g, \"\");\n    return result.length > 0 ? result : fallback;\n}\nexports.deriveClsCompliantName = deriveClsCompliantName;\n// Performs cheap sanitization by stripping away HTML tag (<>) characters.\nfunction stripTagDelimiters(s) {\n    return s.replace(HtmlTagRegex, \"\");\n}\nexports.stripTagDelimiters = stripTagDelimiters;\n//# sourceMappingURL=stringExtensions.js.map","\"use strict\";\n/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wordBreakOverflowingText = exports.wordBreak = exports.svgEllipsis = exports.getTailoredTextOrDefault = exports.getDivElementWidth = exports.getSvgMeasurementProperties = exports.getMeasurementProperties = exports.measureSvgTextElementWidth = exports.estimateSvgTextHeight = exports.estimateSvgTextBaselineDelta = exports.measureSvgTextHeight = exports.measureSvgTextRect = exports.measureSvgTextWidth = exports.removeSpanElement = void 0;\n// powerbi.extensibility.utils.type\nvar powerbi_visuals_utils_typeutils_1 = require(\"powerbi-visuals-utils-typeutils\");\n// powerbi.extensibility.utils.formatting\nvar wordBreaker = require(\"./wordBreaker\");\nvar ephemeralStorageService_1 = require(\"./storageService/ephemeralStorageService\");\nvar ellipsis = \"...\";\nvar spanElement;\nvar svgTextElement;\nvar canvasCtx;\nvar fallbackFontFamily;\n/**\n * Idempotent function for adding the elements to the DOM.\n */\nfunction ensureDOM() {\n    if (spanElement) {\n        return;\n    }\n    spanElement = document.createElement(\"span\");\n    document.body.appendChild(spanElement);\n    // The style hides the svg element from the canvas, preventing canvas from scrolling down to show svg black square.\n    /* eslint-disable-next-line powerbi-visuals/no-http-string */\n    var svgElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    svgElement.setAttribute(\"height\", \"0\");\n    svgElement.setAttribute(\"width\", \"0\");\n    svgElement.setAttribute(\"position\", \"absolute\");\n    svgElement.style.top = \"0px\";\n    svgElement.style.left = \"0px\";\n    svgElement.style.position = \"absolute\";\n    svgElement.style.height = \"0px\";\n    svgElement.style.width = \"0px\";\n    /* eslint-disable-next-line powerbi-visuals/no-http-string */\n    svgTextElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n    svgElement.appendChild(svgTextElement);\n    document.body.appendChild(svgElement);\n    var canvasElement = document.createElement(\"canvas\");\n    canvasCtx = canvasElement.getContext(\"2d\");\n    var style = window.getComputedStyle(svgTextElement);\n    if (style) {\n        fallbackFontFamily = style.fontFamily;\n    }\n    else {\n        fallbackFontFamily = \"\";\n    }\n}\n/**\n * Removes spanElement from DOM.\n */\nfunction removeSpanElement() {\n    if (spanElement && spanElement.remove) {\n        spanElement.remove();\n    }\n    spanElement = null;\n}\nexports.removeSpanElement = removeSpanElement;\n/**\n * Measures the width of the text with the given SVG text properties.\n * @param textProperties The text properties to use for text measurement.\n * @param text The text to measure.\n */\nfunction measureSvgTextWidth(textProperties, text) {\n    ensureDOM();\n    canvasCtx.font =\n        (textProperties.fontStyle || \"\") + \" \" +\n            (textProperties.fontVariant || \"\") + \" \" +\n            (textProperties.fontWeight || \"\") + \" \" +\n            textProperties.fontSize + \" \" +\n            (textProperties.fontFamily || fallbackFontFamily);\n    return canvasCtx.measureText(text || textProperties.text).width;\n}\nexports.measureSvgTextWidth = measureSvgTextWidth;\n/**\n * Return the rect with the given SVG text properties.\n * @param textProperties The text properties to use for text measurement.\n * @param text The text to measure.\n */\nfunction measureSvgTextRect(textProperties, text) {\n    ensureDOM();\n    // Removes DOM elements faster than innerHTML\n    while (svgTextElement.firstChild) {\n        svgTextElement.removeChild(svgTextElement.firstChild);\n    }\n    svgTextElement.setAttribute(\"style\", null);\n    svgTextElement.style.visibility = \"hidden\";\n    svgTextElement.style.fontFamily = textProperties.fontFamily || fallbackFontFamily;\n    svgTextElement.style.fontVariant = textProperties.fontVariant;\n    svgTextElement.style.fontSize = textProperties.fontSize;\n    svgTextElement.style.fontWeight = textProperties.fontWeight;\n    svgTextElement.style.fontStyle = textProperties.fontStyle;\n    svgTextElement.style.whiteSpace = textProperties.whiteSpace || \"nowrap\";\n    svgTextElement.appendChild(document.createTextNode(text || textProperties.text));\n    // We're expecting the browser to give a synchronous measurement here\n    // We're using SVGTextElement because it works across all browsers\n    return svgTextElement.getBBox();\n}\nexports.measureSvgTextRect = measureSvgTextRect;\n/**\n * Measures the height of the text with the given SVG text properties.\n * @param textProperties The text properties to use for text measurement.\n * @param text The text to measure.\n */\nfunction measureSvgTextHeight(textProperties, text) {\n    return measureSvgTextRect(textProperties, text).height;\n}\nexports.measureSvgTextHeight = measureSvgTextHeight;\n/**\n * Returns the text Rect with the given SVG text properties.\n * Does NOT return text width; obliterates text value\n * @param {TextProperties} textProperties - The text properties to use for text measurement\n */\nfunction estimateSvgTextRect(textProperties) {\n    var propertiesKey = textProperties.fontFamily + textProperties.fontSize;\n    var rect = ephemeralStorageService_1.ephemeralStorageService.getData(propertiesKey);\n    if (rect == null) {\n        // To estimate we check the height of a particular character, once it is cached, subsequent\n        // calls should always get the height from the cache (regardless of the text).\n        var estimatedTextProperties = {\n            fontFamily: textProperties.fontFamily,\n            fontSize: textProperties.fontSize,\n            text: \"M\",\n        };\n        rect = exports.measureSvgTextRect(estimatedTextProperties);\n        // NOTE: In some cases (disconnected/hidden DOM) we may provide incorrect measurement results (zero sized bounding-box), so\n        // we only store values in the cache if we are confident they are correct.\n        if (rect.height > 0)\n            ephemeralStorageService_1.ephemeralStorageService.setData(propertiesKey, rect);\n    }\n    return rect;\n}\n/**\n * Returns the text Rect with the given SVG text properties.\n * @param {TextProperties} textProperties - The text properties to use for text measurement\n */\nfunction estimateSvgTextBaselineDelta(textProperties) {\n    var rect = estimateSvgTextRect(textProperties);\n    return rect.y + rect.height;\n}\nexports.estimateSvgTextBaselineDelta = estimateSvgTextBaselineDelta;\n/**\n * Estimates the height of the text with the given SVG text properties.\n * @param {TextProperties} textProperties - The text properties to use for text measurement\n */\nfunction estimateSvgTextHeight(textProperties, tightFightForNumeric) {\n    if (tightFightForNumeric === void 0) { tightFightForNumeric = false; }\n    var height = estimateSvgTextRect(textProperties).height;\n    // replace it with new baseline calculation\n    if (tightFightForNumeric)\n        height *= 0.7;\n    return height;\n}\nexports.estimateSvgTextHeight = estimateSvgTextHeight;\n/**\n * Measures the width of the svgElement.\n * @param svgElement The SVGTextElement to be measured.\n */\nfunction measureSvgTextElementWidth(svgElement) {\n    return measureSvgTextWidth(getSvgMeasurementProperties(svgElement));\n}\nexports.measureSvgTextElementWidth = measureSvgTextElementWidth;\n/**\n * Fetches the text measurement properties of the given DOM element.\n * @param element The selector for the DOM Element.\n */\nfunction getMeasurementProperties(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        text: element.value || element.textContent,\n        fontFamily: style.fontFamily,\n        fontSize: style.fontSize,\n        fontWeight: style.fontWeight,\n        fontStyle: style.fontStyle,\n        fontVariant: style.fontVariant,\n        whiteSpace: style.whiteSpace\n    };\n}\nexports.getMeasurementProperties = getMeasurementProperties;\n/**\n * Fetches the text measurement properties of the given SVG text element.\n * @param element The SVGTextElement to be measured.\n */\nfunction getSvgMeasurementProperties(element) {\n    var style = window.getComputedStyle(element);\n    if (style) {\n        return {\n            text: element.textContent,\n            fontFamily: style.fontFamily,\n            fontSize: style.fontSize,\n            fontWeight: style.fontWeight,\n            fontStyle: style.fontStyle,\n            fontVariant: style.fontVariant,\n            whiteSpace: style.whiteSpace\n        };\n    }\n    else {\n        return {\n            text: element.textContent,\n            fontFamily: \"\",\n            fontSize: \"0\",\n        };\n    }\n}\nexports.getSvgMeasurementProperties = getSvgMeasurementProperties;\n/**\n * Returns the width of a div element.\n * @param element The div element.\n */\nfunction getDivElementWidth(element) {\n    var style = window.getComputedStyle(element);\n    if (style)\n        return style.width;\n    else\n        return \"0\";\n}\nexports.getDivElementWidth = getDivElementWidth;\n/**\n * Compares labels text size to the available size and renders ellipses when the available size is smaller.\n * @param textProperties The text properties (including text content) to use for text measurement.\n * @param maxWidth The maximum width available for rendering the text.\n */\nfunction getTailoredTextOrDefault(textProperties, maxWidth) {\n    ensureDOM();\n    var strLength = textProperties.text.length;\n    if (strLength === 0) {\n        return textProperties.text;\n    }\n    var width = measureSvgTextWidth(textProperties);\n    if (width < maxWidth) {\n        return textProperties.text;\n    }\n    var ellipsesWidth = measureSvgTextWidth(textProperties, ellipsis);\n    if (ellipsesWidth >= width) {\n        return textProperties.text;\n    }\n    // Create a copy of the textProperties so we don't modify the one that's passed in.\n    var copiedTextProperties = powerbi_visuals_utils_typeutils_1.prototype.inherit(textProperties);\n    // Take the properties and apply them to svgTextElement\n    // Then, do the binary search to figure out the substring we want\n    // Set the substring on textElement argument\n    var text = copiedTextProperties.text = ellipsis + copiedTextProperties.text;\n    var min = 1;\n    var max = text.length;\n    var i = ellipsis.length;\n    while (min <= max) {\n        // num | 0 preferred to Math.floor(num) for performance benefits\n        i = (min + max) / 2 | 0;\n        copiedTextProperties.text = text.substring(0, i);\n        width = measureSvgTextWidth(copiedTextProperties);\n        if (maxWidth > width) {\n            min = i + 1;\n        }\n        else if (maxWidth < width) {\n            max = i - 1;\n        }\n        else {\n            break;\n        }\n    }\n    // Since the search algorithm almost never finds an exact match,\n    // it will pick one of the closest two, which could result in a\n    // value bigger with than 'maxWidth' thus we need to go back by\n    // one to guarantee a smaller width than 'maxWidth'.\n    copiedTextProperties.text = text.substring(0, i);\n    width = measureSvgTextWidth(copiedTextProperties);\n    if (width > maxWidth) {\n        i--;\n    }\n    return textProperties.text.substring(0, i - ellipsis.length) + ellipsis;\n}\nexports.getTailoredTextOrDefault = getTailoredTextOrDefault;\n/**\n * Compares labels text size to the available size and renders ellipses when the available size is smaller.\n * @param textElement The SVGTextElement containing the text to render.\n * @param maxWidth The maximum width available for rendering the text.\n */\nfunction svgEllipsis(textElement, maxWidth) {\n    var properties = getSvgMeasurementProperties(textElement);\n    var originalText = properties.text;\n    var tailoredText = getTailoredTextOrDefault(properties, maxWidth);\n    if (originalText !== tailoredText) {\n        textElement.textContent = tailoredText;\n    }\n}\nexports.svgEllipsis = svgEllipsis;\n/**\n * Word break textContent of <text> SVG element into <tspan>s\n * Each tspan will be the height of a single line of text\n * @param textElement - the SVGTextElement containing the text to wrap\n * @param maxWidth - the maximum width available\n * @param maxHeight - the maximum height available (defaults to single line)\n * @param linePadding - (optional) padding to add to line height\n */\nfunction wordBreak(textElement, maxWidth, maxHeight, linePadding) {\n    if (linePadding === void 0) { linePadding = 0; }\n    var properties = getSvgMeasurementProperties(textElement);\n    var height = estimateSvgTextHeight(properties) + linePadding;\n    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));\n    // Save y of parent textElement to apply as first tspan dy\n    var firstDY = textElement ? textElement.getAttribute(\"y\") : null;\n    // Store and clear text content\n    var labelText = textElement ? textElement.textContent : null;\n    textElement.textContent = null;\n    // Append a tspan for each word broken section\n    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);\n    var fragment = document.createDocumentFragment();\n    for (var i = 0, ilen = words.length; i < ilen; i++) {\n        var dy = i === 0 ? firstDY : height;\n        properties.text = words[i];\n        /* eslint-disable-next-line powerbi-visuals/no-http-string */\n        var textElement_1 = document.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n        textElement_1.setAttribute(\"x\", \"0\");\n        textElement_1.setAttribute(\"dy\", dy ? dy.toString() : null);\n        textElement_1.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));\n        fragment.appendChild(textElement_1);\n    }\n    textElement.appendChild(fragment);\n}\nexports.wordBreak = wordBreak;\n/**\n * Word break textContent of span element into <span>s\n * Each span will be the height of a single line of text\n * @param textElement - the element containing the text to wrap\n * @param maxWidth - the maximum width available\n * @param maxHeight - the maximum height available (defaults to single line)\n * @param linePadding - (optional) padding to add to line height\n */\nfunction wordBreakOverflowingText(textElement, maxWidth, maxHeight, linePadding) {\n    if (linePadding === void 0) { linePadding = 0; }\n    var properties = getSvgMeasurementProperties(textElement);\n    var height = estimateSvgTextHeight(properties) + linePadding;\n    var maxNumLines = Math.max(1, Math.floor(maxHeight / height));\n    // Store and clear text content\n    var labelText = textElement.textContent;\n    textElement.textContent = null;\n    // Append a span for each word broken section\n    var words = wordBreaker.splitByWidth(labelText, properties, measureSvgTextWidth, maxWidth, maxNumLines);\n    var fragment = document.createDocumentFragment();\n    for (var i = 0; i < words.length; i++) {\n        var span = document.createElement(\"span\");\n        span.style.overflow = \"hidden\";\n        span.style.whiteSpace = \"nowrap\";\n        span.style.textOverflow = \"ellipsis\";\n        span.style.display = \"block\";\n        span.style.width = powerbi_visuals_utils_typeutils_1.pixelConverter.toString(maxWidth);\n        span.appendChild(document.createTextNode(words[i]));\n        span.appendChild(document.createTextNode(getTailoredTextOrDefault(properties, maxWidth)));\n        fragment.appendChild(span);\n    }\n    textElement.appendChild(fragment);\n}\nexports.wordBreakOverflowingText = wordBreakOverflowingText;\n//# sourceMappingURL=textMeasurementService.js.map","\"use strict\";\n/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceSpaceWithNBSP = exports.removeEllipses = exports.removeBreakingSpaces = void 0;\n/**\n * Contains functions/constants to aid in text manupilation.\n */\n/**\n * Remove breaking spaces from given string and replace by none breaking space (&nbsp).\n */\nfunction removeBreakingSpaces(str) {\n    return str.toString().replace(new RegExp(\" \", \"g\"), \"&nbsp\");\n}\nexports.removeBreakingSpaces = removeBreakingSpaces;\n/**\n * Remove ellipses from a given string\n */\nfunction removeEllipses(str) {\n    return str.replace(/(…)|(\\.\\.\\.)/g, \"\");\n}\nexports.removeEllipses = removeEllipses;\n/**\n* Replace every whitespace (0x20) with Non-Breaking Space (0xA0)\n    * @param {string} txt String to replace White spaces\n    * @returns Text after replcing white spaces\n    */\nfunction replaceSpaceWithNBSP(txt) {\n    if (txt != null) {\n        return txt.replace(/ /g, \"\\xA0\");\n    }\n}\nexports.replaceSpaceWithNBSP = replaceSpaceWithNBSP;\n//# sourceMappingURL=textUtil.js.map","\"use strict\";\n/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateExactDigitsPrecision = exports.getDisplayUnits = exports.formatListOr = exports.formatListAnd = exports.getFormatStringByColumn = exports.getFormatString = exports.createDisplayUnitSystem = exports.formatVariantMeasureValue = exports.format = exports.create = exports.checkValueInBounds = exports.createDefaultFormatter = exports.setLocaleOptions = exports.getFormatMetadata = exports.getLocalizedString = exports.DefaultDateFormat = exports.DefaultNumericFormat = exports.DefaultIntegerFormat = void 0;\nvar displayUnitSystem_1 = require(\"./displayUnitSystem/displayUnitSystem\");\nvar displayUnitSystemType_1 = require(\"./displayUnitSystem/displayUnitSystemType\");\nvar stringExtensions = require(\"./stringExtensions\");\nvar formattingService_1 = require(\"./formattingService/formattingService\");\nvar dateTimeSequence_1 = require(\"./date/dateTimeSequence\");\nvar powerbi_visuals_utils_typeutils_1 = require(\"powerbi-visuals-utils-typeutils\");\nvar powerbi_visuals_utils_dataviewutils_1 = require(\"powerbi-visuals-utils-dataviewutils\");\n// powerbi.extensibility.utils.type\nvar ValueType = powerbi_visuals_utils_typeutils_1.valueType.ValueType;\nvar PrimitiveType = powerbi_visuals_utils_typeutils_1.valueType.PrimitiveType;\nvar StringExtensions = stringExtensions;\nvar BeautifiedFormat = {\n    \"0.00 %;-0.00 %;0.00 %\": \"Percentage\",\n    \"0.0 %;-0.0 %;0.0 %\": \"Percentage1\",\n};\nexports.DefaultIntegerFormat = \"g\";\nexports.DefaultNumericFormat = \"#,0.00\";\nexports.DefaultDateFormat = \"d\";\nvar defaultLocalizedStrings = {\n    \"NullValue\": \"(Blank)\",\n    \"BooleanTrue\": \"True\",\n    \"BooleanFalse\": \"False\",\n    \"NaNValue\": \"NaN\",\n    \"InfinityValue\": \"+Infinity\",\n    \"NegativeInfinityValue\": \"-Infinity\",\n    \"RestatementComma\": \"{0}, {1}\",\n    \"RestatementCompoundAnd\": \"{0} and {1}\",\n    \"RestatementCompoundOr\": \"{0} or {1}\",\n    \"DisplayUnitSystem_EAuto_Title\": \"Auto\",\n    \"DisplayUnitSystem_E0_Title\": \"None\",\n    \"DisplayUnitSystem_E3_LabelFormat\": \"{0}K\",\n    \"DisplayUnitSystem_E3_Title\": \"Thousands\",\n    \"DisplayUnitSystem_E6_LabelFormat\": \"{0}M\",\n    \"DisplayUnitSystem_E6_Title\": \"Millions\",\n    \"DisplayUnitSystem_E9_LabelFormat\": \"{0}bn\",\n    \"DisplayUnitSystem_E9_Title\": \"Billions\",\n    \"DisplayUnitSystem_E12_LabelFormat\": \"{0}T\",\n    \"DisplayUnitSystem_E12_Title\": \"Trillions\",\n    \"Percentage\": \"#,0.##%\",\n    \"Percentage1\": \"#,0.#%\",\n    \"TableTotalLabel\": \"Total\",\n    \"Tooltip_HighlightedValueDisplayName\": \"Highlighted\",\n    \"Funnel_PercentOfFirst\": \"Percent of first\",\n    \"Funnel_PercentOfPrevious\": \"Percent of previous\",\n    \"Funnel_PercentOfFirst_Highlight\": \"Percent of first (highlighted)\",\n    \"Funnel_PercentOfPrevious_Highlight\": \"Percent of previous (highlighted)\",\n    // Geotagging strings\n    \"GeotaggingString_Continent\": \"continent\",\n    \"GeotaggingString_Continents\": \"continents\",\n    \"GeotaggingString_Country\": \"country\",\n    \"GeotaggingString_Countries\": \"countries\",\n    \"GeotaggingString_State\": \"state\",\n    \"GeotaggingString_States\": \"states\",\n    \"GeotaggingString_City\": \"city\",\n    \"GeotaggingString_Cities\": \"cities\",\n    \"GeotaggingString_Town\": \"town\",\n    \"GeotaggingString_Towns\": \"towns\",\n    \"GeotaggingString_Province\": \"province\",\n    \"GeotaggingString_Provinces\": \"provinces\",\n    \"GeotaggingString_County\": \"county\",\n    \"GeotaggingString_Counties\": \"counties\",\n    \"GeotaggingString_Village\": \"village\",\n    \"GeotaggingString_Villages\": \"villages\",\n    \"GeotaggingString_Post\": \"post\",\n    \"GeotaggingString_Zip\": \"zip\",\n    \"GeotaggingString_Code\": \"code\",\n    \"GeotaggingString_Place\": \"place\",\n    \"GeotaggingString_Places\": \"places\",\n    \"GeotaggingString_Address\": \"address\",\n    \"GeotaggingString_Addresses\": \"addresses\",\n    \"GeotaggingString_Street\": \"street\",\n    \"GeotaggingString_Streets\": \"streets\",\n    \"GeotaggingString_Longitude\": \"longitude\",\n    \"GeotaggingString_Longitude_Short\": \"lon\",\n    \"GeotaggingString_Longitude_Short2\": \"long\",\n    \"GeotaggingString_Latitude\": \"latitude\",\n    \"GeotaggingString_Latitude_Short\": \"lat\",\n    \"GeotaggingString_PostalCode\": \"postal code\",\n    \"GeotaggingString_PostalCodes\": \"postal codes\",\n    \"GeotaggingString_ZipCode\": \"zip code\",\n    \"GeotaggingString_ZipCodes\": \"zip codes\",\n    \"GeotaggingString_Territory\": \"territory\",\n    \"GeotaggingString_Territories\": \"territories\",\n};\nfunction beautify(format) {\n    var key = BeautifiedFormat[format];\n    if (key)\n        return defaultLocalizedStrings[key] || format;\n    return format;\n}\nfunction describeUnit(exponent) {\n    var exponentLookup = (exponent === -1) ? \"Auto\" : exponent.toString();\n    var title = defaultLocalizedStrings[\"DisplayUnitSystem_E\" + exponentLookup + \"_Title\"];\n    var format = (exponent <= 0) ? \"{0}\" : defaultLocalizedStrings[\"DisplayUnitSystem_E\" + exponentLookup + \"_LabelFormat\"];\n    if (title || format)\n        return { title: title, format: format };\n}\nfunction getLocalizedString(stringId) {\n    return defaultLocalizedStrings[stringId];\n}\nexports.getLocalizedString = getLocalizedString;\n// NOTE: Define default locale options, but these can be overriden by setLocaleOptions.\nvar localizationOptions = {\n    nullValue: defaultLocalizedStrings[\"NullValue\"],\n    trueValue: defaultLocalizedStrings[\"BooleanTrue\"],\n    falseValue: defaultLocalizedStrings[\"BooleanFalse\"],\n    NaN: defaultLocalizedStrings[\"NaNValue\"],\n    infinity: defaultLocalizedStrings[\"InfinityValue\"],\n    negativeInfinity: defaultLocalizedStrings[\"NegativeInfinityValue\"],\n    beautify: function (format) { return beautify(format); },\n    describe: function (exponent) { return describeUnit(exponent); },\n    restatementComma: defaultLocalizedStrings[\"RestatementComma\"],\n    restatementCompoundAnd: defaultLocalizedStrings[\"RestatementCompoundAnd\"],\n    restatementCompoundOr: defaultLocalizedStrings[\"RestatementCompoundOr\"],\n};\nvar MaxScaledDecimalPlaces = 2;\nvar MaxValueForDisplayUnitRounding = 1000;\nvar MinIntegerValueForDisplayUnits = 10000;\nvar MinPrecisionForDisplayUnits = 2;\nvar DateTimeMetadataColumn = {\n    displayName: \"\",\n    type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime),\n};\nfunction getFormatMetadata(format) {\n    return formattingService_1.numberFormat.getCustomFormatMetadata(format);\n}\nexports.getFormatMetadata = getFormatMetadata;\nfunction setLocaleOptions(options) {\n    localizationOptions = options;\n    displayUnitSystem_1.DefaultDisplayUnitSystem.RESET();\n    displayUnitSystem_1.WholeUnitsDisplayUnitSystem.RESET();\n}\nexports.setLocaleOptions = setLocaleOptions;\nfunction createDefaultFormatter(formatString, allowFormatBeautification, cultureSelector) {\n    var formatBeautified = allowFormatBeautification\n        ? localizationOptions.beautify(formatString)\n        : formatString;\n    return {\n        format: function (value) {\n            if (value == null) {\n                return localizationOptions.nullValue;\n            }\n            return formatCore({\n                value: value,\n                cultureSelector: cultureSelector,\n                format: formatBeautified\n            });\n        }\n    };\n}\nexports.createDefaultFormatter = createDefaultFormatter;\n/**\n * Check that provided value is in provided bounds. If not -- replace it by minimal or maximal replacement value\n * @param targetNum checking value\n * @param min minimal bound of value\n * @param max maximal bound of value\n * @param lessMinReplacement value that will be returned if checking value is lesser than minimal\n * @param greaterMaxReplacement value that will be returned if checking value is greater than maximal\n */\nfunction checkValueInBounds(targetNum, min, max, lessMinReplacement, greaterMaxReplacement) {\n    if (lessMinReplacement === void 0) { lessMinReplacement = min; }\n    if (greaterMaxReplacement === void 0) { greaterMaxReplacement = max; }\n    if (max !== undefined && max !== null) {\n        targetNum = targetNum <= max ? targetNum : greaterMaxReplacement;\n    }\n    if (min !== undefined && min !== null) {\n        targetNum = targetNum > min ? targetNum : lessMinReplacement;\n    }\n    return targetNum;\n}\nexports.checkValueInBounds = checkValueInBounds;\n// Creates an IValueFormatter to be used for a range of values.\nfunction create(options) {\n    var format = options.allowFormatBeautification\n        ? localizationOptions.beautify(options.format)\n        : options.format;\n    var cultureSelector = options.cultureSelector;\n    if (shouldUseNumericDisplayUnits(options)) {\n        var displayUnitSystem_2 = createDisplayUnitSystem(options.displayUnitSystemType);\n        var singleValueFormattingMode_1 = !!options.formatSingleValues;\n        displayUnitSystem_2.update(Math.max(Math.abs(options.value || 0), Math.abs(options.value2 || 0)));\n        var forcePrecision_1 = options.precision != null;\n        var decimals_1;\n        if (forcePrecision_1)\n            decimals_1 = -options.precision;\n        else if (displayUnitSystem_2.displayUnit && displayUnitSystem_2.displayUnit.value > 1)\n            decimals_1 = -MaxScaledDecimalPlaces;\n        return {\n            format: function (value) {\n                var formattedValue = getStringFormat(value, true /*nullsAreBlank*/);\n                if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {\n                    return formattedValue;\n                }\n                // Round to Double.DEFAULT_PRECISION\n                if (value\n                    && !displayUnitSystem_2.isScalingUnit()\n                    && Math.abs(value) < MaxValueForDisplayUnitRounding\n                    && !forcePrecision_1) {\n                    value = powerbi_visuals_utils_typeutils_1.double.roundToPrecision(value);\n                }\n                if (singleValueFormattingMode_1) {\n                    return displayUnitSystem_2.formatSingleValue(value, format, decimals_1, forcePrecision_1, cultureSelector);\n                }\n                else {\n                    return displayUnitSystem_2.format(value, format, decimals_1, forcePrecision_1, cultureSelector);\n                }\n            },\n            displayUnit: displayUnitSystem_2.displayUnit,\n            options: options\n        };\n    }\n    if (shouldUseDateUnits(options.value, options.value2, options.tickCount)) {\n        var unit_1 = dateTimeSequence_1.DateTimeSequence.GET_INTERVAL_UNIT(options.value /* minDate */, options.value2 /* maxDate */, options.tickCount);\n        return {\n            format: function (value) {\n                if (value == null) {\n                    return localizationOptions.nullValue;\n                }\n                var formatString = formattingService_1.formattingService.dateFormatString(unit_1);\n                return formatCore({\n                    value: value,\n                    cultureSelector: cultureSelector,\n                    format: formatString,\n                });\n            },\n            options: options\n        };\n    }\n    return createDefaultFormatter(format, false, cultureSelector);\n}\nexports.create = create;\nfunction format(value, format, allowFormatBeautification, cultureSelector) {\n    if (value == null) {\n        return localizationOptions.nullValue;\n    }\n    var formatString = allowFormatBeautification\n        ? localizationOptions.beautify(format)\n        : format;\n    return formatCore({\n        value: value,\n        cultureSelector: cultureSelector,\n        format: formatString\n    });\n}\nexports.format = format;\n/**\n * Value formatting function to handle variant measures.\n * For a Date/Time value within a non-date/time field, it's formatted with the default date/time formatString instead of as a number\n * @param {any} value Value to be formatted\n * @param {DataViewMetadataColumn} column Field which the value belongs to\n * @param {DataViewObjectPropertyIdentifier} formatStringProp formatString Property ID\n * @param {boolean} nullsAreBlank? Whether to show \"(Blank)\" instead of empty string for null values\n * @returns Formatted value\n */\nfunction formatVariantMeasureValue(value, column, formatStringProp, nullsAreBlank, cultureSelector) {\n    // If column type is not datetime, but the value is of time datetime,\n    // then use the default date format string\n    if (!(column && column.type && column.type.dateTime) && value instanceof Date) {\n        var valueFormat = getFormatString(DateTimeMetadataColumn, null, false);\n        return formatCore({\n            value: value,\n            nullsAreBlank: nullsAreBlank,\n            cultureSelector: cultureSelector,\n            format: valueFormat\n        });\n    }\n    else {\n        var valueFormat = getFormatString(column, formatStringProp);\n        return formatCore({\n            value: value,\n            nullsAreBlank: nullsAreBlank,\n            cultureSelector: cultureSelector,\n            format: valueFormat\n        });\n    }\n}\nexports.formatVariantMeasureValue = formatVariantMeasureValue;\nfunction createDisplayUnitSystem(displayUnitSystemType) {\n    if (displayUnitSystemType == null)\n        return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);\n    switch (displayUnitSystemType) {\n        case displayUnitSystemType_1.DisplayUnitSystemType.Default:\n            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);\n        case displayUnitSystemType_1.DisplayUnitSystemType.WholeUnits:\n            return new displayUnitSystem_1.WholeUnitsDisplayUnitSystem(localizationOptions.describe);\n        case displayUnitSystemType_1.DisplayUnitSystemType.Verbose:\n            return new displayUnitSystem_1.NoDisplayUnitSystem();\n        case displayUnitSystemType_1.DisplayUnitSystemType.DataLabels:\n            return new displayUnitSystem_1.DataLabelsDisplayUnitSystem(localizationOptions.describe);\n        default:\n            return new displayUnitSystem_1.DefaultDisplayUnitSystem(localizationOptions.describe);\n    }\n}\nexports.createDisplayUnitSystem = createDisplayUnitSystem;\nfunction shouldUseNumericDisplayUnits(options) {\n    var value = options.value;\n    var value2 = options.value2;\n    var format = options.format;\n    // For singleValue visuals like card, gauge we don't want to roundoff data to the nearest thousands so format the whole number / integers below 10K to not use display units\n    if (options.formatSingleValues && format) {\n        if (Math.abs(value) < MinIntegerValueForDisplayUnits) {\n            var isCustomFormat = !formattingService_1.numberFormat.isStandardFormat(format);\n            if (isCustomFormat) {\n                var precision = formattingService_1.numberFormat.getCustomFormatMetadata(format, true /*calculatePrecision*/).precision;\n                if (precision < MinPrecisionForDisplayUnits)\n                    return false;\n            }\n            else if (powerbi_visuals_utils_typeutils_1.double.isInteger(value))\n                return false;\n        }\n    }\n    if ((typeof value === \"number\") || (typeof value2 === \"number\")) {\n        return true;\n    }\n}\nfunction shouldUseDateUnits(value, value2, tickCount) {\n    // must check both value and value2 because we'll need to get an interval for date units\n    return (value instanceof Date) && (value2 instanceof Date) && (tickCount !== undefined && tickCount !== null);\n}\n/*\n    * Get the column format. Order of precendence is:\n    *  1. Column format\n    *  2. Default PowerView policy for column type\n    */\nfunction getFormatString(column, formatStringProperty, suppressTypeFallback) {\n    if (column) {\n        if (formatStringProperty) {\n            var propertyValue = powerbi_visuals_utils_dataviewutils_1.dataViewObjects.getValue(column.objects, formatStringProperty);\n            if (propertyValue)\n                return propertyValue;\n        }\n        if (!suppressTypeFallback) {\n            var columnType = column.type;\n            if (columnType) {\n                if (columnType.dateTime)\n                    return exports.DefaultDateFormat;\n                if (columnType.integer) {\n                    if (columnType.temporal && columnType.temporal.year)\n                        return \"0\";\n                    return exports.DefaultIntegerFormat;\n                }\n                if (columnType.numeric)\n                    return exports.DefaultNumericFormat;\n            }\n        }\n    }\n}\nexports.getFormatString = getFormatString;\nfunction getFormatStringByColumn(column, suppressTypeFallback) {\n    if (column) {\n        if (column.format) {\n            return column.format;\n        }\n        if (!suppressTypeFallback) {\n            var columnType = column.type;\n            if (columnType) {\n                if (columnType.dateTime) {\n                    return exports.DefaultDateFormat;\n                }\n                if (columnType.integer) {\n                    if (columnType.temporal && columnType.temporal.year) {\n                        return \"0\";\n                    }\n                    return exports.DefaultIntegerFormat;\n                }\n                if (columnType.numeric) {\n                    return exports.DefaultNumericFormat;\n                }\n            }\n        }\n    }\n    return undefined;\n}\nexports.getFormatStringByColumn = getFormatStringByColumn;\nfunction formatListCompound(strings, conjunction) {\n    var result;\n    if (!strings) {\n        return null;\n    }\n    var length = strings.length;\n    if (length > 0) {\n        result = strings[0];\n        var lastIndex = length - 1;\n        for (var i = 1, len = lastIndex; i < len; i++) {\n            var value = strings[i];\n            result = StringExtensions.format(localizationOptions.restatementComma, result, value);\n        }\n        if (length > 1) {\n            var value = strings[lastIndex];\n            result = StringExtensions.format(conjunction, result, value);\n        }\n    }\n    else {\n        result = null;\n    }\n    return result;\n}\n// The returned string will look like 'A, B, ..., and C'\nfunction formatListAnd(strings) {\n    return formatListCompound(strings, localizationOptions.restatementCompoundAnd);\n}\nexports.formatListAnd = formatListAnd;\n// The returned string will look like 'A, B, ..., or C'\nfunction formatListOr(strings) {\n    return formatListCompound(strings, localizationOptions.restatementCompoundOr);\n}\nexports.formatListOr = formatListOr;\nfunction formatCore(options) {\n    var value = options.value, format = options.format, nullsAreBlank = options.nullsAreBlank, cultureSelector = options.cultureSelector;\n    var formattedValue = getStringFormat(value, nullsAreBlank ? nullsAreBlank : false);\n    if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue)) {\n        return formattedValue;\n    }\n    return formattingService_1.formattingService.formatValue(value, format, cultureSelector);\n}\nfunction getStringFormat(value, nullsAreBlank) {\n    if (value == null && nullsAreBlank) {\n        return localizationOptions.nullValue;\n    }\n    if (value === true) {\n        return localizationOptions.trueValue;\n    }\n    if (value === false) {\n        return localizationOptions.falseValue;\n    }\n    if (typeof value === \"number\" && isNaN(value)) {\n        return localizationOptions.NaN;\n    }\n    if (value === Number.NEGATIVE_INFINITY) {\n        return localizationOptions.negativeInfinity;\n    }\n    if (value === Number.POSITIVE_INFINITY) {\n        return localizationOptions.infinity;\n    }\n    return \"\";\n}\nfunction getDisplayUnits(displayUnitSystemType) {\n    var displayUnitSystem = createDisplayUnitSystem(displayUnitSystemType);\n    return displayUnitSystem.units;\n}\nexports.getDisplayUnits = getDisplayUnits;\n/**\n * Precision calculating function to build values showing minimum 3 digits as 3.56 or 25.7 or 754 or 2345\n * @param {number} inputValue Value to be basement for precision calculation\n * @param {string} format Format that will be used for value formatting (to detect percentage values)\n * @param {number} displayUnits Dispaly units that will be used for value formatting (to correctly calculate precision)\n * @param {number} digitsNum Number of visible digits, including digits before separator\n * @returns calculated precision\n */\nfunction calculateExactDigitsPrecision(inputValue, format, displayUnits, digitsNum) {\n    if (!inputValue && inputValue !== 0) {\n        return 0;\n    }\n    var precision = 0;\n    var inPercent = format && format.indexOf(\"%\") !== -1;\n    var value = inPercent ? inputValue * 100 : inputValue;\n    value = displayUnits > 0 ? value / displayUnits : value;\n    var leftPartLength = parseInt(value).toString().length;\n    if ((inPercent || displayUnits > 0) && leftPartLength >= digitsNum) {\n        return 0;\n    }\n    // Auto units, calculate final value \n    if (displayUnits === 0) {\n        var unitsDegree = Math.floor(leftPartLength / 3);\n        unitsDegree = leftPartLength % 3 === 0 ? unitsDegree - 1 : unitsDegree;\n        var divider = Math.pow(1000, unitsDegree);\n        if (divider > 0) {\n            value = value / divider;\n        }\n    }\n    leftPartLength = parseInt(value).toString().length;\n    var restOfDiv = leftPartLength % digitsNum;\n    if (restOfDiv === 0) {\n        precision = 0;\n    }\n    else {\n        precision = digitsNum - restOfDiv;\n    }\n    return precision;\n}\nexports.calculateExactDigitsPrecision = calculateExactDigitsPrecision;\n//# sourceMappingURL=valueFormatter.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.splitByWidth = exports.getMaxWordWidth = exports.wordCount = exports.hasBreakers = exports.find = void 0;\nvar SPACE = \" \";\nvar BREAKERS_REGEX = /[\\s\\n]+/g;\nfunction search(index, content, backward) {\n    if (backward) {\n        for (var i = index - 1; i > -1; i--) {\n            if (hasBreakers(content[i]))\n                return i + 1;\n        }\n    }\n    else {\n        for (var i = index, ilen = content.length; i < ilen; i++) {\n            if (hasBreakers(content[i]))\n                return i;\n        }\n    }\n    return backward ? 0 : content.length;\n}\n/**\n * Find the word nearest the cursor specified within content\n * @param index - point within content to search forward/backward from\n * @param content - string to search\n*/\nfunction find(index, content) {\n    var result = { start: 0, end: 0 };\n    if (content.length === 0) {\n        return result;\n    }\n    result.start = search(index, content, true);\n    result.end = search(index, content, false);\n    return result;\n}\nexports.find = find;\n/**\n * Test for presence of breakers within content\n * @param content - string to test\n*/\nfunction hasBreakers(content) {\n    BREAKERS_REGEX.lastIndex = 0;\n    return BREAKERS_REGEX.test(content);\n}\nexports.hasBreakers = hasBreakers;\n/**\n * Count the number of pieces when broken by BREAKERS_REGEX\n * ~2.7x faster than WordBreaker.split(content).length\n * @param content - string to break and count\n*/\nfunction wordCount(content) {\n    var count = 1;\n    BREAKERS_REGEX.lastIndex = 0;\n    BREAKERS_REGEX.exec(content);\n    while (BREAKERS_REGEX.lastIndex !== 0) {\n        count++;\n        BREAKERS_REGEX.exec(content);\n    }\n    return count;\n}\nexports.wordCount = wordCount;\nfunction getMaxWordWidth(content, textWidthMeasurer, properties) {\n    var words = split(content);\n    var maxWidth = 0;\n    for (var _i = 0, words_1 = words; _i < words_1.length; _i++) {\n        var w = words_1[_i];\n        properties.text = w;\n        maxWidth = Math.max(maxWidth, textWidthMeasurer(properties));\n    }\n    return maxWidth;\n}\nexports.getMaxWordWidth = getMaxWordWidth;\nfunction split(content) {\n    return content.split(BREAKERS_REGEX);\n}\nfunction getWidth(content, properties, textWidthMeasurer) {\n    properties.text = content;\n    return textWidthMeasurer(properties);\n}\nfunction truncate(content, properties, truncator, maxWidth) {\n    properties.text = content;\n    return truncator(properties, maxWidth);\n}\n/**\n * Split content by breakers (words) and greedy fit as many words\n * into each index in the result based on max width and number of lines\n * e.g. Each index in result corresponds to a line of content\n *      when used by AxisHelper.LabelLayoutStrategy.wordBreak\n * @param content - string to split\n * @param properties - text properties to be used by @param:textWidthMeasurer\n * @param textWidthMeasurer - function to calculate width of given text content\n * @param maxWidth - maximum allowed width of text content in each result\n * @param maxNumLines - maximum number of results we will allow, valid values must be greater than 0\n * @param truncator - (optional) if specified, used as a function to truncate content to a given width\n*/\nfunction splitByWidth(content, properties, textWidthMeasurer, maxWidth, maxNumLines, truncator) {\n    // Default truncator returns string as-is\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n    truncator = truncator ? truncator : function (properties, maxWidth) { return properties.text; };\n    var result = [];\n    var words = split(content);\n    var usedWidth = 0;\n    var wordsInLine = [];\n    for (var _i = 0, words_2 = words; _i < words_2.length; _i++) {\n        var word = words_2[_i];\n        // Last line? Just add whatever is left\n        if ((maxNumLines > 0) && (result.length >= maxNumLines - 1)) {\n            wordsInLine.push(word);\n            continue;\n        }\n        // Determine width if we add this word\n        // Account for SPACE we will add when joining...\n        var wordWidth = wordsInLine.length === 0\n            ? getWidth(word, properties, textWidthMeasurer)\n            : getWidth(SPACE + word, properties, textWidthMeasurer);\n        // If width would exceed max width,\n        // then push used words and start new split result\n        if (usedWidth + wordWidth > maxWidth) {\n            // Word alone exceeds max width, just add it.\n            if (wordsInLine.length === 0) {\n                result.push(truncate(word, properties, truncator, maxWidth));\n                usedWidth = 0;\n                wordsInLine = [];\n                continue;\n            }\n            result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));\n            usedWidth = 0;\n            wordsInLine = [];\n        }\n        // ...otherwise, add word and continue\n        wordsInLine.push(word);\n        usedWidth += wordWidth;\n    }\n    // Push remaining words onto result (if any)\n    if (wordsInLine && wordsInLine.length) {\n        result.push(truncate(wordsInLine.join(SPACE), properties, truncator, maxWidth));\n    }\n    return result;\n}\nexports.splitByWidth = splitByWidth;\n//# sourceMappingURL=wordBreaker.js.map","/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n/**\n * Module Double contains a set of constants and precision based utility methods\n * for dealing with doubles and their decimal garbage in the javascript.\n */\n// Constants.\nexport const MIN_VALUE = -Number.MAX_VALUE;\nexport const MAX_VALUE = Number.MAX_VALUE;\nexport const MIN_EXP = -308;\nexport const MAX_EXP = 308;\nexport const EPSILON = 1E-323;\nexport const DEFAULT_PRECISION = 0.0001;\nexport const DEFAULT_PRECISION_IN_DECIMAL_DIGITS = 12;\nexport const LOG_E_10 = Math.log(10);\nexport const POSITIVE_POWERS = [\n    1E0, 1E1, 1E2, 1E3, 1E4, 1E5, 1E6, 1E7, 1E8, 1E9, 1E10, 1E11, 1E12, 1E13, 1E14, 1E15, 1E16, 1E17, 1E18, 1E19, 1E20, 1E21, 1E22, 1E23, 1E24, 1E25, 1E26, 1E27, 1E28, 1E29, 1E30, 1E31, 1E32, 1E33, 1E34, 1E35, 1E36, 1E37, 1E38, 1E39, 1E40, 1E41, 1E42, 1E43, 1E44, 1E45, 1E46, 1E47, 1E48, 1E49, 1E50, 1E51, 1E52, 1E53, 1E54, 1E55, 1E56, 1E57, 1E58, 1E59, 1E60, 1E61, 1E62, 1E63, 1E64, 1E65, 1E66, 1E67, 1E68, 1E69, 1E70, 1E71, 1E72, 1E73, 1E74, 1E75, 1E76, 1E77, 1E78, 1E79, 1E80, 1E81, 1E82, 1E83, 1E84, 1E85, 1E86, 1E87, 1E88, 1E89, 1E90, 1E91, 1E92, 1E93, 1E94, 1E95, 1E96, 1E97, 1E98, 1E99,\n    1E100, 1E101, 1E102, 1E103, 1E104, 1E105, 1E106, 1E107, 1E108, 1E109, 1E110, 1E111, 1E112, 1E113, 1E114, 1E115, 1E116, 1E117, 1E118, 1E119, 1E120, 1E121, 1E122, 1E123, 1E124, 1E125, 1E126, 1E127, 1E128, 1E129, 1E130, 1E131, 1E132, 1E133, 1E134, 1E135, 1E136, 1E137, 1E138, 1E139, 1E140, 1E141, 1E142, 1E143, 1E144, 1E145, 1E146, 1E147, 1E148, 1E149, 1E150, 1E151, 1E152, 1E153, 1E154, 1E155, 1E156, 1E157, 1E158, 1E159, 1E160, 1E161, 1E162, 1E163, 1E164, 1E165, 1E166, 1E167, 1E168, 1E169, 1E170, 1E171, 1E172, 1E173, 1E174, 1E175, 1E176, 1E177, 1E178, 1E179, 1E180, 1E181, 1E182, 1E183, 1E184, 1E185, 1E186, 1E187, 1E188, 1E189, 1E190, 1E191, 1E192, 1E193, 1E194, 1E195, 1E196, 1E197, 1E198, 1E199,\n    1E200, 1E201, 1E202, 1E203, 1E204, 1E205, 1E206, 1E207, 1E208, 1E209, 1E210, 1E211, 1E212, 1E213, 1E214, 1E215, 1E216, 1E217, 1E218, 1E219, 1E220, 1E221, 1E222, 1E223, 1E224, 1E225, 1E226, 1E227, 1E228, 1E229, 1E230, 1E231, 1E232, 1E233, 1E234, 1E235, 1E236, 1E237, 1E238, 1E239, 1E240, 1E241, 1E242, 1E243, 1E244, 1E245, 1E246, 1E247, 1E248, 1E249, 1E250, 1E251, 1E252, 1E253, 1E254, 1E255, 1E256, 1E257, 1E258, 1E259, 1E260, 1E261, 1E262, 1E263, 1E264, 1E265, 1E266, 1E267, 1E268, 1E269, 1E270, 1E271, 1E272, 1E273, 1E274, 1E275, 1E276, 1E277, 1E278, 1E279, 1E280, 1E281, 1E282, 1E283, 1E284, 1E285, 1E286, 1E287, 1E288, 1E289, 1E290, 1E291, 1E292, 1E293, 1E294, 1E295, 1E296, 1E297, 1E298, 1E299,\n    1E300, 1E301, 1E302, 1E303, 1E304, 1E305, 1E306, 1E307, 1E308\n];\nexport const NEGATIVE_POWERS = [\n    1E0, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7, 1E-8, 1E-9, 1E-10, 1E-11, 1E-12, 1E-13, 1E-14, 1E-15, 1E-16, 1E-17, 1E-18, 1E-19, 1E-20, 1E-21, 1E-22, 1E-23, 1E-24, 1E-25, 1E-26, 1E-27, 1E-28, 1E-29, 1E-30, 1E-31, 1E-32, 1E-33, 1E-34, 1E-35, 1E-36, 1E-37, 1E-38, 1E-39, 1E-40, 1E-41, 1E-42, 1E-43, 1E-44, 1E-45, 1E-46, 1E-47, 1E-48, 1E-49, 1E-50, 1E-51, 1E-52, 1E-53, 1E-54, 1E-55, 1E-56, 1E-57, 1E-58, 1E-59, 1E-60, 1E-61, 1E-62, 1E-63, 1E-64, 1E-65, 1E-66, 1E-67, 1E-68, 1E-69, 1E-70, 1E-71, 1E-72, 1E-73, 1E-74, 1E-75, 1E-76, 1E-77, 1E-78, 1E-79, 1E-80, 1E-81, 1E-82, 1E-83, 1E-84, 1E-85, 1E-86, 1E-87, 1E-88, 1E-89, 1E-90, 1E-91, 1E-92, 1E-93, 1E-94, 1E-95, 1E-96, 1E-97, 1E-98, 1E-99,\n    1E-100, 1E-101, 1E-102, 1E-103, 1E-104, 1E-105, 1E-106, 1E-107, 1E-108, 1E-109, 1E-110, 1E-111, 1E-112, 1E-113, 1E-114, 1E-115, 1E-116, 1E-117, 1E-118, 1E-119, 1E-120, 1E-121, 1E-122, 1E-123, 1E-124, 1E-125, 1E-126, 1E-127, 1E-128, 1E-129, 1E-130, 1E-131, 1E-132, 1E-133, 1E-134, 1E-135, 1E-136, 1E-137, 1E-138, 1E-139, 1E-140, 1E-141, 1E-142, 1E-143, 1E-144, 1E-145, 1E-146, 1E-147, 1E-148, 1E-149, 1E-150, 1E-151, 1E-152, 1E-153, 1E-154, 1E-155, 1E-156, 1E-157, 1E-158, 1E-159, 1E-160, 1E-161, 1E-162, 1E-163, 1E-164, 1E-165, 1E-166, 1E-167, 1E-168, 1E-169, 1E-170, 1E-171, 1E-172, 1E-173, 1E-174, 1E-175, 1E-176, 1E-177, 1E-178, 1E-179, 1E-180, 1E-181, 1E-182, 1E-183, 1E-184, 1E-185, 1E-186, 1E-187, 1E-188, 1E-189, 1E-190, 1E-191, 1E-192, 1E-193, 1E-194, 1E-195, 1E-196, 1E-197, 1E-198, 1E-199,\n    1E-200, 1E-201, 1E-202, 1E-203, 1E-204, 1E-205, 1E-206, 1E-207, 1E-208, 1E-209, 1E-210, 1E-211, 1E-212, 1E-213, 1E-214, 1E-215, 1E-216, 1E-217, 1E-218, 1E-219, 1E-220, 1E-221, 1E-222, 1E-223, 1E-224, 1E-225, 1E-226, 1E-227, 1E-228, 1E-229, 1E-230, 1E-231, 1E-232, 1E-233, 1E-234, 1E-235, 1E-236, 1E-237, 1E-238, 1E-239, 1E-240, 1E-241, 1E-242, 1E-243, 1E-244, 1E-245, 1E-246, 1E-247, 1E-248, 1E-249, 1E-250, 1E-251, 1E-252, 1E-253, 1E-254, 1E-255, 1E-256, 1E-257, 1E-258, 1E-259, 1E-260, 1E-261, 1E-262, 1E-263, 1E-264, 1E-265, 1E-266, 1E-267, 1E-268, 1E-269, 1E-270, 1E-271, 1E-272, 1E-273, 1E-274, 1E-275, 1E-276, 1E-277, 1E-278, 1E-279, 1E-280, 1E-281, 1E-282, 1E-283, 1E-284, 1E-285, 1E-286, 1E-287, 1E-288, 1E-289, 1E-290, 1E-291, 1E-292, 1E-293, 1E-294, 1E-295, 1E-296, 1E-297, 1E-298, 1E-299,\n    1E-300, 1E-301, 1E-302, 1E-303, 1E-304, 1E-305, 1E-306, 1E-307, 1E-308, 1E-309, 1E-310, 1E-311, 1E-312, 1E-313, 1E-314, 1E-315, 1E-316, 1E-317, 1E-318, 1E-319, 1E-320, 1E-321, 1E-322, 1E-323, 1E-324\n];\n/**\n * Returns powers of 10.\n * Unlike the Math.pow this function produces no decimal garbage.\n * @param exp Exponent.\n */\nexport function pow10(exp) {\n    // Positive & zero\n    if (exp >= 0) {\n        if (exp < POSITIVE_POWERS.length) {\n            return POSITIVE_POWERS[exp];\n        }\n        else {\n            return Infinity;\n        }\n    }\n    // Negative\n    exp = -exp;\n    if (exp > 0 && exp < NEGATIVE_POWERS.length) { // if exp==int.MIN_VALUE then changing the sign will overflow and keep the number negative - we need to check for exp > 0 to filter out this corner case\n        return NEGATIVE_POWERS[exp];\n    }\n    else {\n        return 0;\n    }\n}\n/**\n * Returns the 10 base logarithm of the number.\n * Unlike Math.log function this produces integer results with no decimal garbage.\n * @param val Positive value or zero.\n */\n// eslint-disable-next-line max-lines-per-function\nexport function log10(val) {\n    // Fast Log10() algorithm\n    if (val > 1 && val < 1E16) {\n        if (val < 1E8) {\n            if (val < 1E4) {\n                if (val < 1E2) {\n                    if (val < 1E1) {\n                        return 0;\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else {\n                    if (val < 1E3) {\n                        return 2;\n                    }\n                    else {\n                        return 3;\n                    }\n                }\n            }\n            else {\n                if (val < 1E6) {\n                    if (val < 1E5) {\n                        return 4;\n                    }\n                    else {\n                        return 5;\n                    }\n                }\n                else {\n                    if (val < 1E7) {\n                        return 6;\n                    }\n                    else {\n                        return 7;\n                    }\n                }\n            }\n        }\n        else {\n            if (val < 1E12) {\n                if (val < 1E10) {\n                    if (val < 1E9) {\n                        return 8;\n                    }\n                    else {\n                        return 9;\n                    }\n                }\n                else {\n                    if (val < 1E11) {\n                        return 10;\n                    }\n                    else {\n                        return 11;\n                    }\n                }\n            }\n            else {\n                if (val < 1E14) {\n                    if (val < 1E13) {\n                        return 12;\n                    }\n                    else {\n                        return 13;\n                    }\n                }\n                else {\n                    if (val < 1E15) {\n                        return 14;\n                    }\n                    else {\n                        return 15;\n                    }\n                }\n            }\n        }\n    }\n    if (val > 1E-16 && val < 1) {\n        if (val < 1E-8) {\n            if (val < 1E-12) {\n                if (val < 1E-14) {\n                    if (val < 1E-15) {\n                        return -16;\n                    }\n                    else {\n                        return -15;\n                    }\n                }\n                else {\n                    if (val < 1E-13) {\n                        return -14;\n                    }\n                    else {\n                        return -13;\n                    }\n                }\n            }\n            else {\n                if (val < 1E-10) {\n                    if (val < 1E-11) {\n                        return -12;\n                    }\n                    else {\n                        return -11;\n                    }\n                }\n                else {\n                    if (val < 1E-9) {\n                        return -10;\n                    }\n                    else {\n                        return -9;\n                    }\n                }\n            }\n        }\n        else {\n            if (val < 1E-4) {\n                if (val < 1E-6) {\n                    if (val < 1E-7) {\n                        return -8;\n                    }\n                    else {\n                        return -7;\n                    }\n                }\n                else {\n                    if (val < 1E-5) {\n                        return -6;\n                    }\n                    else {\n                        return -5;\n                    }\n                }\n            }\n            else {\n                if (val < 1E-2) {\n                    if (val < 1E-3) {\n                        return -4;\n                    }\n                    else {\n                        return -3;\n                    }\n                }\n                else {\n                    if (val < 1E-1) {\n                        return -2;\n                    }\n                    else {\n                        return -1;\n                    }\n                }\n            }\n        }\n    }\n    // JS Math provides only natural log function so we need to calc the 10 base logarithm:\n    // logb(x) = logk(x)/logk(b);\n    const log10 = Math.log(val) / LOG_E_10;\n    return floorWithPrecision(log10);\n}\n/**\n * Returns a power of 10 representing precision of the number based on the number of meaningful decimal digits.\n * For example the precision of 56,263.3767 with the 6 meaningful decimal digit is 0.1.\n * @param x Value.\n * @param decimalDigits How many decimal digits are meaningfull.\n */\nexport function getPrecision(x, decimalDigits) {\n    if (decimalDigits === undefined) {\n        decimalDigits = DEFAULT_PRECISION_IN_DECIMAL_DIGITS;\n    }\n    if (!x || !isFinite(x)) {\n        return undefined;\n    }\n    const exp = log10(Math.abs(x));\n    if (exp < MIN_EXP) {\n        return 0;\n    }\n    const precisionExp = Math.max(exp - decimalDigits, -NEGATIVE_POWERS.length + 1);\n    return pow10(precisionExp);\n}\n/**\n * Checks if a delta between 2 numbers is less than provided precision.\n * @param x One value.\n * @param y Another value.\n * @param precision Precision value.\n */\nexport function equalWithPrecision(x, y, precision) {\n    precision = detectPrecision(precision, x, y);\n    return x === y || Math.abs(x - y) < precision;\n}\n/**\n * Checks if a first value is less than another taking\n * into account the loose precision based equality.\n * @param x One value.\n * @param y Another value.\n * @param precision Precision value.\n */\nexport function lessWithPrecision(x, y, precision) {\n    precision = detectPrecision(precision, x, y);\n    return x < y && Math.abs(x - y) > precision;\n}\n/**\n * Checks if a first value is less or equal than another taking\n * into account the loose precision based equality.\n * @param x One value.\n * @param y Another value.\n * @param precision Precision value.\n */\nexport function lessOrEqualWithPrecision(x, y, precision) {\n    precision = detectPrecision(precision, x, y);\n    return x < y || Math.abs(x - y) < precision;\n}\n/**\n * Checks if a first value is greater than another taking\n * into account the loose precision based equality.\n * @param x One value.\n * @param y Another value.\n * @param precision Precision value.\n */\nexport function greaterWithPrecision(x, y, precision) {\n    precision = detectPrecision(precision, x, y);\n    return x > y && Math.abs(x - y) > precision;\n}\n/**\n * Checks if a first value is greater or equal to another taking\n * into account the loose precision based equality.\n * @param x One value.\n * @param y Another value.\n * @param precision Precision value.\n */\nexport function greaterOrEqualWithPrecision(x, y, precision) {\n    precision = detectPrecision(precision, x, y);\n    return x > y || Math.abs(x - y) < precision;\n}\n/**\n * Floors the number unless it's withing the precision distance from the higher int.\n * @param x One value.\n * @param precision Precision value.\n */\nexport function floorWithPrecision(x, precision) {\n    precision = precision != null ? precision : DEFAULT_PRECISION;\n    const roundX = Math.round(x);\n    if (Math.abs(x - roundX) < precision) {\n        return roundX;\n    }\n    else {\n        return Math.floor(x);\n    }\n}\n/**\n * Ceils the number unless it's withing the precision distance from the lower int.\n * @param x One value.\n * @param precision Precision value.\n */\nexport function ceilWithPrecision(x, precision) {\n    precision = detectPrecision(precision, DEFAULT_PRECISION);\n    const roundX = Math.round(x);\n    if (Math.abs(x - roundX) < precision) {\n        return roundX;\n    }\n    else {\n        return Math.ceil(x);\n    }\n}\n/**\n * Floors the number to the provided precision.\n * For example 234,578 floored to 1,000 precision is 234,000.\n * @param x One value.\n * @param precision Precision value.\n */\nexport function floorToPrecision(x, precision) {\n    precision = detectPrecision(precision, DEFAULT_PRECISION);\n    if (precision === 0 || x === 0) {\n        return x;\n    }\n    // Precision must be a Power of 10\n    return Math.floor(x / precision) * precision;\n}\n/**\n * Ceils the number to the provided precision.\n * For example 234,578 floored to 1,000 precision is 235,000.\n * @param x One value.\n * @param precision Precision value.\n */\nexport function ceilToPrecision(x, precision) {\n    precision = detectPrecision(precision, DEFAULT_PRECISION);\n    if (precision === 0 || x === 0) {\n        return x;\n    }\n    // Precision must be a Power of 10\n    return Math.ceil(x / precision) * precision;\n}\n/**\n * Rounds the number to the provided precision.\n * For example 234,578 floored to 1,000 precision is 235,000.\n * @param x One value.\n * @param precision Precision value.\n */\nexport function roundToPrecision(x, precision) {\n    precision = detectPrecision(precision, DEFAULT_PRECISION);\n    if (precision === 0 || x === 0) {\n        return x;\n    }\n    // Precision must be a Power of 10\n    let result = Math.round(x / precision) * precision;\n    const decimalDigits = Math.round(log10(Math.abs(x)) - log10(precision)) + 1;\n    if (decimalDigits > 0 && decimalDigits < 16) {\n        result = parseFloat(result.toPrecision(decimalDigits));\n    }\n    return result;\n}\n/**\n * Returns the value making sure that it's restricted to the provided range.\n * @param x One value.\n * @param min Range min boundary.\n * @param max Range max boundary.\n */\nexport function ensureInRange(x, min, max) {\n    if (x === undefined || x === null) {\n        return x;\n    }\n    if (x < min) {\n        return min;\n    }\n    if (x > max) {\n        return max;\n    }\n    return x;\n}\n/**\n * Rounds the value - this method is actually faster than Math.round - used in the graphics utils.\n * @param x Value to round.\n */\nexport function round(x) {\n    return (0.5 + x) << 0;\n}\n/**\n * Projects the value from the source range into the target range.\n * @param value Value to project.\n * @param fromMin Minimum of the source range.\n * @param toMin Minimum of the target range.\n * @param toMax Maximum of the target range.\n */\nexport function project(value, fromMin, fromSize, toMin, toSize) {\n    if (fromSize === 0 || toSize === 0) {\n        if (fromMin <= value && value <= fromMin + fromSize) {\n            return toMin;\n        }\n        else {\n            return NaN;\n        }\n    }\n    const relativeX = (value - fromMin) / fromSize;\n    const projectedX = toMin + relativeX * toSize;\n    return projectedX;\n}\n/**\n * Removes decimal noise.\n * @param value Value to be processed.\n */\nexport function removeDecimalNoise(value) {\n    return roundToPrecision(value, getPrecision(value));\n}\n/**\n * Checks whether the number is integer.\n * @param value Value to be checked.\n */\nexport function isInteger(value) {\n    return value !== null && value % 1 === 0;\n}\n/**\n * Dividing by increment will give us count of increments\n * Round out the rough edges into even integer\n * Multiply back by increment to get rounded value\n * e.g. Rounder.toIncrement(0.647291, 0.05) => 0.65\n * @param value - value to round to nearest increment\n * @param increment - smallest increment to round toward\n */\nexport function toIncrement(value, increment) {\n    return Math.round(value / increment) * increment;\n}\n/**\n * Overrides the given precision with defaults if necessary. Exported only for tests\n *\n * precision defined returns precision\n * x defined with y undefined returns twelve digits of precision based on x\n * x defined but zero with y defined; returns twelve digits of precision based on y\n * x and y defined retursn twelve digits of precision based on the minimum of the two\n * if no applicable precision is found based on those (such as x and y being zero), the default precision is used\n */\nexport function detectPrecision(precision, x, y) {\n    if (precision !== undefined) {\n        return precision;\n    }\n    let calculatedPrecision;\n    if (!y) {\n        calculatedPrecision = getPrecision(x);\n    }\n    else if (!x) {\n        calculatedPrecision = getPrecision(y);\n    }\n    else {\n        calculatedPrecision = getPrecision(Math.min(Math.abs(x), Math.abs(y)));\n    }\n    return calculatedPrecision || DEFAULT_PRECISION;\n}\n//# sourceMappingURL=double.js.map","/**\n * Returns items that exist in target and other.\n */\nexport function intersect(target, other) {\n    const result = [];\n    for (let i = target.length - 1; i >= 0; --i) {\n        if (other.indexOf(target[i]) !== -1) {\n            result.push(target[i]);\n        }\n    }\n    return result;\n}\n/**\n * Return elements exists in target but not exists in other.\n */\nexport function diff(target, other) {\n    const result = [];\n    for (let i = target.length - 1; i >= 0; --i) {\n        const value = target[i];\n        if (other.indexOf(value) === -1) {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/**\n * Return an array with only the distinct items in the source.\n */\nexport function distinct(source) {\n    const result = [];\n    for (let i = 0, len = source.length; i < len; i++) {\n        const value = source[i];\n        if (result.indexOf(value) === -1) {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/**\n * Pushes content of source onto target,\n * for parts of course that do not already exist in target.\n */\nexport function union(target, source) {\n    for (let i = 0, len = source.length; i < len; ++i) {\n        unionSingle(target, source[i]);\n    }\n}\n/**\n * Pushes value onto target, if value does not already exist in target.\n */\nexport function unionSingle(target, value) {\n    if (target.indexOf(value) < 0) {\n        target.push(value);\n    }\n}\n/**\n * Returns an array with a range of items from source,\n * including the startIndex & endIndex.\n */\nexport function range(source, startIndex, endIndex) {\n    const result = [];\n    for (let i = startIndex; i <= endIndex; ++i) {\n        result.push(source[i]);\n    }\n    return result;\n}\n/**\n * Returns an array that includes items from source, up to the specified count.\n */\nexport function take(source, count) {\n    const result = [];\n    for (let i = 0; i < count; ++i) {\n        result.push(source[i]);\n    }\n    return result;\n}\nexport function copy(source) {\n    return take(source, source.length);\n}\n/**\n  * Returns a value indicating whether the arrays have the same values in the same sequence.\n  */\nexport function sequenceEqual(left, right, comparison) {\n    // Normalize falsy to null\n    if (!left) {\n        left = null;\n    }\n    if (!right) {\n        right = null;\n    }\n    // T can be same as U, and it is possible for left and right to be the same array object...\n    if (left === right) {\n        return true;\n    }\n    if (!!left !== !!right) {\n        return false;\n    }\n    const len = left.length;\n    if (len !== right.length) {\n        return false;\n    }\n    let i = 0;\n    while (i < len && comparison(left[i], right[i])) {\n        ++i;\n    }\n    return i === len;\n}\n/**\n * Returns null if the specified array is empty.\n * Otherwise returns the specified array.\n */\nexport function emptyToNull(array) {\n    if (array && array.length === 0) {\n        return null;\n    }\n    return array;\n}\nexport function indexOf(array, predicate) {\n    for (let i = 0, len = array.length; i < len; ++i) {\n        if (predicate(array[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Returns a copy of the array rotated by the specified offset.\n */\nexport function rotate(array, offset) {\n    if (offset === 0)\n        return array.slice();\n    const rotated = array.slice(offset);\n    Array.prototype.push.apply(rotated, array.slice(0, offset));\n    return rotated;\n}\nexport function createWithId() {\n    return extendWithId([]);\n}\nexport function extendWithId(array) {\n    const extended = array;\n    extended.withId = withId;\n    return extended;\n}\n/**\n * Finds and returns the first item with a matching ID.\n */\nexport function findWithId(array, id) {\n    for (let i = 0, len = array.length; i < len; i++) {\n        const item = array[i];\n        if (item.id === id)\n            return item;\n    }\n}\nfunction withId(id) {\n    return findWithId(this, id);\n}\nexport function createWithName() {\n    return extendWithName([]);\n}\nexport function extendWithName(array) {\n    const extended = array;\n    extended.withName = withName;\n    return extended;\n}\nexport function findItemWithName(array, name) {\n    const index = indexWithName(array, name);\n    if (index >= 0)\n        return array[index];\n}\nexport function indexWithName(array, name) {\n    for (let i = 0, len = array.length; i < len; i++) {\n        const item = array[i];\n        if (item.name === name)\n            return i;\n    }\n    return -1;\n}\n/**\n * Inserts a number in sorted order into a list of numbers already in sorted order.\n * @returns True if the item was added, false if it already existed.\n */\nexport function insertSorted(list, value) {\n    const len = list.length;\n    // NOTE: iterate backwards because incoming values tend to be sorted already.\n    for (let i = len - 1; i >= 0; i--) {\n        const diff = list[i] - value;\n        if (diff === 0)\n            return false;\n        if (diff > 0)\n            continue;\n        // diff < 0\n        list.splice(i + 1, 0, value);\n        return true;\n    }\n    list.unshift(value);\n    return true;\n}\n/**\n * Removes the first occurrence of a value from a list if it exists.\n * @returns True if the value was removed, false if it did not exist in the list.\n */\nexport function removeFirst(list, value) {\n    const index = list.indexOf(value);\n    if (index < 0)\n        return false;\n    list.splice(index, 1);\n    return true;\n}\n/**\n * Finds and returns the first item with a matching name.\n */\nfunction withName(name) {\n    return findItemWithName(this, name);\n}\n/**\n * Deletes all items from the array.\n */\nexport function clear(array) {\n    if (!array)\n        return;\n    while (array.length > 0)\n        array.pop();\n}\nexport function isUndefinedOrEmpty(array) {\n    if (!array || array.length === 0) {\n        return true;\n    }\n    return false;\n}\nexport function swap(array, firstIndex, secondIndex) {\n    const temp = array[firstIndex];\n    array[firstIndex] = array[secondIndex];\n    array[secondIndex] = temp;\n}\nexport function isInArray(array, lookupItem, compareCallback) {\n    return array.some(item => compareCallback(item, lookupItem));\n}\n/** Checks if the given object is an Array, and looking all the way up the prototype chain. */\nexport function isArrayOrInheritedArray(obj) {\n    let nextPrototype = obj;\n    while (nextPrototype != null) {\n        if (Array.isArray(nextPrototype))\n            return true;\n        nextPrototype = Object.getPrototypeOf(nextPrototype);\n    }\n    return false;\n}\n/**\n * Returns true if the specified values array is sorted in an order as determined by the specified compareFunction.\n */\nexport function isSorted(values, compareFunction) {\n    const ilen = values.length;\n    if (ilen >= 2) {\n        for (let i = 1; i < ilen; i++) {\n            if (compareFunction(values[i - 1], values[i]) > 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**\n * Returns true if the specified number values array is sorted in ascending order\n * (or descending order if the specified descendingOrder is truthy).\n */\nexport function isSortedNumeric(values, descendingOrder) {\n    const compareFunction = descendingOrder ?\n        (a, b) => b - a :\n        (a, b) => a - b;\n    return isSorted(values, compareFunction);\n}\n/**\n * Ensures that the given T || T[] is in array form, either returning the array or\n * converting single items into an array of length one.\n */\nexport function ensureArray(value) {\n    if (Array.isArray(value)) {\n        return value;\n    }\n    return [value];\n}\n//# sourceMappingURL=arrayExtensions.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.\nimport { isInteger } from \"../double\";\n/**\n * Extensions for Enumerations.\n */\n/**\n * Gets a value indicating whether the value has the bit flags set.\n */\nexport function hasFlag(value, flag) {\n    return (value & flag) === flag;\n}\n/**\n * Sets a value of a flag without modifying any other flags.\n */\nexport function setFlag(value, flag) {\n    return value |= flag;\n}\n/**\n * Resets a value of a flag without modifying any other flags.\n */\nexport function resetFlag(value, flag) {\n    return value &= ~flag;\n}\n/**\n * According to the TypeScript Handbook, this is safe to do.\n */\nexport function toString(enumType, value) {\n    return enumType[value];\n}\n/**\n * Returns the number of 1's in the specified value that is a set of binary bit flags.\n */\nexport function getBitCount(value) {\n    if (!isInteger(value))\n        return 0;\n    let bitCount = 0;\n    let shiftingValue = value;\n    while (shiftingValue !== 0) {\n        if ((shiftingValue & 1) === 1) {\n            bitCount++;\n        }\n        shiftingValue = shiftingValue >>> 1;\n    }\n    return bitCount;\n}\n//# sourceMappingURL=enumExtensions.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.\nexport function XOR(a, b) {\n    return (a || b) && !(a && b);\n}\n//# sourceMappingURL=logicExtensions.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.\n/**\n * Runs exec on regex starting from 0 index\n * This is the expected behavior but RegExp actually remember\n * the last index they stopped at (found match at) and will\n * return unexpected results when run in sequence.\n * @param regex - regular expression object\n * @param value - string to search wiht regex\n * @param start - index within value to start regex\n */\nexport function run(regex, value, start) {\n    regex.lastIndex = start || 0;\n    return regex.exec(value);\n}\n//# sourceMappingURL=regExpExtensions.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/**\n * Extensions to String class.\n */\n/**\n * Checks if a string ends with a sub-string.\n */\nexport function endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n//# sourceMappingURL=stringExtensions.js.map","import * as arrayExtensions from \"./extensions/arrayExtensions\";\nimport * as enumExtensions from \"./extensions/enumExtensions\";\nimport * as logicExtensions from \"./extensions/logicExtensions\";\nimport * as regExpExtensions from \"./extensions/regExpExtensions\";\nimport * as stringExtensions from \"./extensions/stringExtensions\";\nimport * as numericSequence from \"./numericSequence/numericSequence\";\nimport * as numericSequenceRange from \"./numericSequence/numericSequenceRange\";\nimport * as double from \"./double\";\nimport * as jsonComparer from \"./jsonComparer\";\nimport * as pixelConverter from \"./pixelConverter\";\nimport * as prototype from \"./prototype\";\nimport * as textSizeDefaults from \"./textSizeDefaults\";\nimport * as valueType from \"./valueType\";\nexport { arrayExtensions, enumExtensions, logicExtensions, regExpExtensions, stringExtensions, numericSequence, numericSequenceRange, double, jsonComparer, pixelConverter, prototype, textSizeDefaults, valueType };\n//# sourceMappingURL=index.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.\n/**\n * Performs JSON-style comparison of two objects.\n */\nexport function equals(x, y) {\n    if (x === y)\n        return true;\n    return JSON.stringify(x) === JSON.stringify(y);\n}\n//# sourceMappingURL=jsonComparer.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nimport * as Double from \"../double\";\nimport { NumericSequenceRange } from \"./numericSequenceRange\";\nexport class NumericSequence {\n    // eslint-disable-next-line max-lines-per-function\n    static calculate(range, expectedCount, maxAllowedMargin, minPower, useZeroRefPoint, steps) {\n        const result = new NumericSequence();\n        if (expectedCount === undefined)\n            expectedCount = 10;\n        else\n            expectedCount = Double.ensureInRange(expectedCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);\n        if (minPower === undefined)\n            minPower = Double.MIN_EXP;\n        if (useZeroRefPoint === undefined)\n            useZeroRefPoint = false;\n        if (maxAllowedMargin === undefined)\n            maxAllowedMargin = 1;\n        if (steps === undefined)\n            steps = [1, 2, 5];\n        // Handle single stop case\n        if (range.forcedSingleStop) {\n            result.interval = range.getSize();\n            result.intervalOffset = result.interval - (range.forcedSingleStop - range.min);\n            result.min = range.min;\n            result.max = range.max;\n            result.sequence = [range.forcedSingleStop];\n            return result;\n        }\n        let interval = 0;\n        let min = 0;\n        let max = 9;\n        const canExtendMin = maxAllowedMargin > 0 && !range.hasFixedMin;\n        const canExtendMax = maxAllowedMargin > 0 && !range.hasFixedMax;\n        const size = range.getSize();\n        let exp = Double.log10(size);\n        // Account for Exp of steps\n        const stepExp = Double.log10(steps[0]);\n        exp = exp - stepExp;\n        // Account for MaxCount\n        const expectedCountExp = Double.log10(expectedCount);\n        exp = exp - expectedCountExp;\n        // Account for MinPower\n        exp = Math.max(exp, minPower - stepExp + 1);\n        let count = undefined;\n        // Create array of \"good looking\" numbers\n        if (interval !== 0) {\n            // If explicit interval is defined - use it instead of the steps array.\n            const power = Double.pow10(exp);\n            const roundMin = Double.floorToPrecision(range.min, power);\n            const roundMax = Double.ceilToPrecision(range.max, power);\n            const roundRange = NumericSequenceRange.calculateFixedRange(roundMin, roundMax);\n            roundRange.shrinkByStep(range, interval);\n            min = roundRange.min;\n            max = roundRange.max;\n            count = Math.floor(roundRange.getSize() / interval);\n        }\n        else {\n            // No interval defined -> find optimal interval\n            let dexp;\n            for (dexp = 0; dexp < 3; dexp++) {\n                const e = exp + dexp;\n                const power = Double.pow10(e);\n                const roundMin = Double.floorToPrecision(range.min, power);\n                const roundMax = Double.ceilToPrecision(range.max, power);\n                // Go throught the steps array looking for the smallest step that produces the right interval count.\n                const stepsCount = steps.length;\n                const stepPower = Double.pow10(e - 1);\n                for (let i = 0; i < stepsCount; i++) {\n                    const step = steps[i] * stepPower;\n                    const roundRange = NumericSequenceRange.calculateFixedRange(roundMin, roundMax, useZeroRefPoint);\n                    roundRange.shrinkByStep(range, step);\n                    // If the range is based on Data we might need to extend it to provide nice data margins.\n                    if (canExtendMin && range.min === roundRange.min && maxAllowedMargin >= 1)\n                        roundRange.min -= step;\n                    if (canExtendMax && range.max === roundRange.max && maxAllowedMargin >= 1)\n                        roundRange.max += step;\n                    // Count the intervals\n                    count = Double.ceilWithPrecision(roundRange.getSize() / step, Double.DEFAULT_PRECISION);\n                    if (count <= expectedCount || (dexp === 2 && i === stepsCount - 1) || (expectedCount === 1 && count === 2 && (step > range.getSize() || (range.min < 0 && range.max > 0 && step * 2 >= range.getSize())))) {\n                        interval = step;\n                        min = roundRange.min;\n                        max = roundRange.max;\n                        break;\n                    }\n                }\n                // Increase the scale power until the interval is found\n                if (interval !== 0)\n                    break;\n            }\n        }\n        // Avoid extreme count cases (>1000 ticks)\n        if (count > expectedCount * 32 || count > NumericSequence.MAX_COUNT) {\n            count = Math.min(expectedCount * 32, NumericSequence.MAX_COUNT);\n            interval = (max - min) / count;\n        }\n        result.min = min;\n        result.max = max;\n        result.interval = interval;\n        result.intervalOffset = min - range.min;\n        result.maxAllowedMargin = maxAllowedMargin;\n        result.canExtendMin = canExtendMin;\n        result.canExtendMax = canExtendMax;\n        // Fill in the Sequence\n        const precision = Double.getPrecision(interval, 0);\n        result.precision = precision;\n        const sequence = [];\n        let x = Double.roundToPrecision(min, precision);\n        sequence.push(x);\n        for (let i = 0; i < count; i++) {\n            x = Double.roundToPrecision(x + interval, precision);\n            sequence.push(x);\n        }\n        result.sequence = sequence;\n        result.trimMinMax(range.min, range.max);\n        return result;\n    }\n    /**\n     * Calculates the sequence of int numbers which are mapped to the multiples of the units grid.\n     * @min - The minimum of the range.\n     * @max - The maximum of the range.\n     * @maxCount - The max count of intervals.\n     * @steps - array of intervals.\n     */\n    static calculateUnits(min, max, maxCount, steps) {\n        // Initialization actions\n        maxCount = Double.ensureInRange(maxCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);\n        if (min === max) {\n            max = min + 1;\n        }\n        let stepCount = 0;\n        let step = 0;\n        // Calculate step\n        for (let i = 0; i < steps.length; i++) {\n            step = steps[i];\n            const maxStepCount = Double.ceilWithPrecision(max / step);\n            const minStepCount = Double.floorWithPrecision(min / step);\n            stepCount = maxStepCount - minStepCount;\n            if (stepCount <= maxCount) {\n                break;\n            }\n        }\n        // Calculate the offset\n        let offset = -min;\n        offset = offset % step;\n        // Create sequence\n        const result = new NumericSequence();\n        result.sequence = [];\n        for (let x = min + offset;; x += step) {\n            result.sequence.push(x);\n            if (x >= max)\n                break;\n        }\n        result.interval = step;\n        result.intervalOffset = offset;\n        result.min = result.sequence[0];\n        result.max = result.sequence[result.sequence.length - 1];\n        return result;\n    }\n    trimMinMax(min, max) {\n        const minMargin = (min - this.min) / this.interval;\n        const maxMargin = (this.max - max) / this.interval;\n        const marginPrecision = 0.001;\n        if (!this.canExtendMin || (minMargin > this.maxAllowedMargin && minMargin > marginPrecision)) {\n            this.min = min;\n        }\n        if (!this.canExtendMax || (maxMargin > this.maxAllowedMargin && maxMargin > marginPrecision)) {\n            this.max = max;\n        }\n    }\n}\nNumericSequence.MIN_COUNT = 1;\nNumericSequence.MAX_COUNT = 1000;\n//# sourceMappingURL=numericSequence.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nimport * as Double from \"../double\";\nexport class NumericSequenceRange {\n    _ensureIncludeZero() {\n        if (this.includeZero) {\n            // fixed min and max has higher priority than includeZero\n            if (this.min > 0 && !this.hasFixedMin) {\n                this.min = 0;\n            }\n            if (this.max < 0 && !this.hasFixedMax) {\n                this.max = 0;\n            }\n        }\n    }\n    _ensureNotEmpty() {\n        if (this.min === this.max) {\n            if (!this.min) {\n                this.min = 0;\n                this.max = NumericSequenceRange.DEFAULT_MAX;\n                this.hasFixedMin = true;\n                this.hasFixedMax = true;\n            }\n            else {\n                // We are dealing with a single data value (includeZero is not set)\n                // In order to fix the range we need to extend it in both directions by half of the interval.\n                // Interval is calculated based on the number:\n                // 1. Integers below 10,000 are extended by 0.5: so the [2006-2006] empty range is extended to [2005.5-2006.5] range and the ForsedSingleStop=2006\n                // 2. Other numbers are extended by half of their power: [700,001-700,001] => [650,001-750,001] and the ForsedSingleStop=null as we want the intervals to be calculated to cover the range.\n                const value = this.min;\n                const exp = Double.log10(Math.abs(value));\n                let step;\n                if (exp >= 0 && exp < 4) {\n                    step = 0.5;\n                    this.forcedSingleStop = value;\n                }\n                else {\n                    step = Double.pow10(exp) / 2;\n                    this.forcedSingleStop = null;\n                }\n                this.min = value - step;\n                this.max = value + step;\n            }\n        }\n    }\n    _ensureDirection() {\n        if (this.min > this.max) {\n            const temp = this.min;\n            this.min = this.max;\n            this.max = temp;\n        }\n    }\n    getSize() {\n        return this.max - this.min;\n    }\n    shrinkByStep(range, step) {\n        let oldCount = this.min / step;\n        let newCount = range.min / step;\n        let deltaCount = Math.floor(newCount - oldCount);\n        this.min += deltaCount * step;\n        oldCount = this.max / step;\n        newCount = range.max / step;\n        deltaCount = Math.ceil(newCount - oldCount);\n        this.max += deltaCount * step;\n    }\n    static calculate(dataMin, dataMax, fixedMin, fixedMax, includeZero) {\n        const result = new NumericSequenceRange();\n        result.includeZero = includeZero ? true : false;\n        result.hasDataRange = hasValue(dataMin) && hasValue(dataMax);\n        result.hasFixedMin = hasValue(fixedMin);\n        result.hasFixedMax = hasValue(fixedMax);\n        dataMin = Double.ensureInRange(dataMin, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);\n        dataMax = Double.ensureInRange(dataMax, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);\n        // Calculate the range using the min, max, dataRange\n        if (result.hasFixedMin && result.hasFixedMax) {\n            result.min = fixedMin;\n            result.max = fixedMax;\n        }\n        else if (result.hasFixedMin) {\n            result.min = fixedMin;\n            result.max = dataMax > fixedMin ? dataMax : fixedMin;\n        }\n        else if (result.hasFixedMax) {\n            result.min = dataMin < fixedMax ? dataMin : fixedMax;\n            result.max = fixedMax;\n        }\n        else if (result.hasDataRange) {\n            result.min = dataMin;\n            result.max = dataMax;\n        }\n        else {\n            result.min = 0;\n            result.max = 0;\n        }\n        result._ensureIncludeZero();\n        result._ensureNotEmpty();\n        result._ensureDirection();\n        if (result.min === 0) {\n            result.hasFixedMin = true; // If the range starts from zero we should prevent extending the intervals into the negative range\n        }\n        else if (result.max === 0) {\n            result.hasFixedMax = true; // If the range ends at zero we should prevent extending the intervals into the positive range\n        }\n        return result;\n    }\n    static calculateDataRange(dataMin, dataMax, includeZero) {\n        if (!hasValue(dataMin) || !hasValue(dataMax)) {\n            return NumericSequenceRange.calculateFixedRange(0, NumericSequenceRange.DEFAULT_MAX);\n        }\n        else {\n            return NumericSequenceRange.calculate(dataMin, dataMax, null, null, includeZero);\n        }\n    }\n    static calculateFixedRange(fixedMin, fixedMax, includeZero) {\n        const result = new NumericSequenceRange();\n        result.hasDataRange = false;\n        result.includeZero = includeZero;\n        result.min = fixedMin;\n        result.max = fixedMax;\n        result._ensureIncludeZero();\n        result._ensureNotEmpty();\n        result._ensureDirection();\n        result.hasFixedMin = true;\n        result.hasFixedMax = true;\n        return result;\n    }\n}\nNumericSequenceRange.DEFAULT_MAX = 10;\nNumericSequenceRange.MIN_SUPPORTED_DOUBLE = -1E307;\nNumericSequenceRange.MAX_SUPPORTED_DOUBLE = 1E307;\n/** Note: Exported for testability */\nexport function hasValue(value) {\n    return value !== undefined && value !== null;\n}\n//# sourceMappingURL=numericSequenceRange.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\nconst PxPtRatio = 4 / 3;\nconst PixelString = \"px\";\n/**\n * Appends 'px' to the end of number value for use as pixel string in styles\n */\nexport function toString(px) {\n    return px + PixelString;\n}\n/**\n * Converts point value (pt) to pixels\n * Returns a string for font-size property\n * e.g. fromPoint(8) => '24px'\n */\nexport function fromPoint(pt) {\n    return toString(fromPointToPixel(pt));\n}\n/**\n * Converts point value (pt) to pixels\n * Returns a number for font-size property\n * e.g. fromPoint(8) => 24px\n */\nexport function fromPointToPixel(pt) {\n    return (PxPtRatio * pt);\n}\n/**\n * Converts pixel value (px) to pt\n * e.g. toPoint(24) => 8\n */\nexport function toPoint(px) {\n    return px / PxPtRatio;\n}\n//# sourceMappingURL=pixelConverter.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n/**\n * Returns a new object with the provided obj as its prototype.\n */\nexport function inherit(obj, extension) {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    function wrapCtor() { }\n    wrapCtor.prototype = obj;\n    const inherited = new wrapCtor();\n    if (extension)\n        extension(inherited);\n    return inherited;\n}\n/**\n * Returns a new object with the provided obj as its prototype\n * if, and only if, the prototype has not been previously set\n */\nexport function inheritSingle(obj) {\n    const proto = Object.getPrototypeOf(obj);\n    if (proto === Object.prototype || proto === Array.prototype)\n        obj = inherit(obj);\n    return obj;\n}\n/**\n * Uses the provided callback function to selectively replace contents in the provided array.\n * @return A new array with those values overriden\n * or undefined if no overrides are necessary.\n */\nexport function overrideArray(prototype, override) {\n    if (!prototype)\n        return;\n    let overwritten;\n    for (let i = 0, len = prototype.length; i < len; i++) {\n        const value = override(prototype[i]);\n        if (value) {\n            if (!overwritten)\n                overwritten = inherit(prototype);\n            overwritten[i] = value;\n        }\n    }\n    return overwritten;\n}\n//# sourceMappingURL=prototype.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n// NOTE: this file includes standalone utilities that should have no dependencies on external libraries, including jQuery.\n/**\n * Values are in terms of 'pt'\n * Convert to pixels using PixelConverter.fromPoint\n */\n/**\n * Stored in terms of 'pt'\n * Convert to pixels using PixelConverter.fromPoint\n */\nexport const TextSizeMin = 8;\n/**\n * Stored in terms of 'pt'\n * Convert to pixels using PixelConverter.fromPoint\n */\nexport const TextSizeMax = 40;\nconst TextSizeRange = TextSizeMax - TextSizeMin;\n/**\n * Returns the percentage of this value relative to the TextSizeMax\n * @param textSize - should be given in terms of 'pt'\n */\nexport function getScale(textSize) {\n    return (textSize - TextSizeMin) / TextSizeRange;\n}\n//# sourceMappingURL=textSizeDefaults.js.map","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n// powerbi.extensibility.utils.type\nimport * as EnumExtensions from \"./extensions/enumExtensions\";\nimport { equals } from \"./jsonComparer\";\n/** Describes a data value type, including a primitive type and extended type if any (derived from data category). */\nexport class ValueType {\n    /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */\n    constructor(underlyingType, category, enumType, variantTypes) {\n        this.underlyingType = underlyingType;\n        this.category = category;\n        if (EnumExtensions.hasFlag(underlyingType, ExtendedType.Temporal)) {\n            this.temporalType = new TemporalType(underlyingType);\n        }\n        if (EnumExtensions.hasFlag(underlyingType, ExtendedType.Geography)) {\n            this.geographyType = new GeographyType(underlyingType);\n        }\n        if (EnumExtensions.hasFlag(underlyingType, ExtendedType.Miscellaneous)) {\n            this.miscType = new MiscellaneousType(underlyingType);\n        }\n        if (EnumExtensions.hasFlag(underlyingType, ExtendedType.Formatting)) {\n            this.formattingType = new FormattingType(underlyingType);\n        }\n        if (EnumExtensions.hasFlag(underlyingType, ExtendedType.Enumeration)) {\n            this.enumType = enumType;\n        }\n        if (EnumExtensions.hasFlag(underlyingType, ExtendedType.Scripting)) {\n            this.scriptingType = new ScriptType(underlyingType);\n        }\n        if (EnumExtensions.hasFlag(underlyingType, ExtendedType.Variant)) {\n            this.variationTypes = variantTypes;\n        }\n    }\n    /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */\n    static fromDescriptor(descriptor) {\n        descriptor = descriptor || {};\n        // Simplified primitive types\n        if (descriptor.text)\n            return ValueType.fromExtendedType(ExtendedType.Text);\n        if (descriptor.integer)\n            return ValueType.fromExtendedType(ExtendedType.Integer);\n        if (descriptor.numeric)\n            return ValueType.fromExtendedType(ExtendedType.Double);\n        if (descriptor.bool)\n            return ValueType.fromExtendedType(ExtendedType.Boolean);\n        if (descriptor.dateTime)\n            return ValueType.fromExtendedType(ExtendedType.DateTime);\n        if (descriptor.duration)\n            return ValueType.fromExtendedType(ExtendedType.Duration);\n        if (descriptor.binary)\n            return ValueType.fromExtendedType(ExtendedType.Binary);\n        if (descriptor.none)\n            return ValueType.fromExtendedType(ExtendedType.None);\n        // Extended types\n        if (descriptor.scripting) {\n            if (descriptor.scripting.source)\n                return ValueType.fromExtendedType(ExtendedType.ScriptSource);\n        }\n        if (descriptor.enumeration)\n            return ValueType.fromEnum(descriptor.enumeration);\n        if (descriptor.temporal) {\n            if (descriptor.temporal.year)\n                return ValueType.fromExtendedType(ExtendedType.Years_Integer);\n            if (descriptor.temporal.quarter)\n                return ValueType.fromExtendedType(ExtendedType.Quarters_Integer);\n            if (descriptor.temporal.month)\n                return ValueType.fromExtendedType(ExtendedType.Months_Integer);\n            if (descriptor.temporal.day)\n                return ValueType.fromExtendedType(ExtendedType.DayOfMonth_Integer);\n            if (descriptor.temporal.paddedDateTableDate)\n                return ValueType.fromExtendedType(ExtendedType.PaddedDateTableDates);\n        }\n        if (descriptor.geography) {\n            if (descriptor.geography.address)\n                return ValueType.fromExtendedType(ExtendedType.Address);\n            if (descriptor.geography.city)\n                return ValueType.fromExtendedType(ExtendedType.City);\n            if (descriptor.geography.continent)\n                return ValueType.fromExtendedType(ExtendedType.Continent);\n            if (descriptor.geography.country)\n                return ValueType.fromExtendedType(ExtendedType.Country);\n            if (descriptor.geography.county)\n                return ValueType.fromExtendedType(ExtendedType.County);\n            if (descriptor.geography.region)\n                return ValueType.fromExtendedType(ExtendedType.Region);\n            if (descriptor.geography.postalCode)\n                return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);\n            if (descriptor.geography.stateOrProvince)\n                return ValueType.fromExtendedType(ExtendedType.StateOrProvince);\n            if (descriptor.geography.place)\n                return ValueType.fromExtendedType(ExtendedType.Place);\n            if (descriptor.geography.latitude)\n                return ValueType.fromExtendedType(ExtendedType.Latitude_Double);\n            if (descriptor.geography.longitude)\n                return ValueType.fromExtendedType(ExtendedType.Longitude_Double);\n        }\n        if (descriptor.misc) {\n            if (descriptor.misc.image)\n                return ValueType.fromExtendedType(ExtendedType.Image);\n            if (descriptor.misc.imageUrl)\n                return ValueType.fromExtendedType(ExtendedType.ImageUrl);\n            if (descriptor.misc.webUrl)\n                return ValueType.fromExtendedType(ExtendedType.WebUrl);\n            if (descriptor.misc.barcode)\n                return ValueType.fromExtendedType(ExtendedType.Barcode_Text);\n        }\n        if (descriptor.formatting) {\n            if (descriptor.formatting.color)\n                return ValueType.fromExtendedType(ExtendedType.Color);\n            if (descriptor.formatting.formatString)\n                return ValueType.fromExtendedType(ExtendedType.FormatString);\n            if (descriptor.formatting.alignment)\n                return ValueType.fromExtendedType(ExtendedType.Alignment);\n            if (descriptor.formatting.labelDisplayUnits)\n                return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);\n            if (descriptor.formatting.fontSize)\n                return ValueType.fromExtendedType(ExtendedType.FontSize);\n            if (descriptor.formatting.labelDensity)\n                return ValueType.fromExtendedType(ExtendedType.LabelDensity);\n        }\n        if (descriptor.extendedType) {\n            return ValueType.fromExtendedType(descriptor.extendedType);\n        }\n        if (descriptor.operations) {\n            if (descriptor.operations.searchEnabled)\n                return ValueType.fromExtendedType(ExtendedType.SearchEnabled);\n        }\n        if (descriptor.variant) {\n            const variantTypes = descriptor.variant.map((variantType) => ValueType.fromDescriptor(variantType));\n            return ValueType.fromVariant(variantTypes);\n        }\n        return ValueType.fromExtendedType(ExtendedType.Null);\n    }\n    /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */\n    static fromExtendedType(extendedType) {\n        extendedType = extendedType || ExtendedType.Null;\n        const primitiveType = getPrimitiveType(extendedType), category = getCategoryFromExtendedType(extendedType);\n        return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);\n    }\n    /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */\n    static fromPrimitiveTypeAndCategory(primitiveType, category) {\n        primitiveType = primitiveType || PrimitiveType.Null;\n        category = category || null;\n        let id = primitiveType.toString();\n        if (category)\n            id += \"|\" + category;\n        return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));\n    }\n    /** Creates a ValueType to describe the given IEnumType. */\n    static fromEnum(enumType) {\n        return new ValueType(ExtendedType.Enumeration, null, enumType);\n    }\n    /** Creates a ValueType to describe the given Variant type. */\n    static fromVariant(variantTypes) {\n        return new ValueType(ExtendedType.Variant, /* category */ null, /* enumType */ null, variantTypes);\n    }\n    /** Determines if the specified type is compatible from at least one of the otherTypes. */\n    static isCompatibleTo(typeDescriptor, otherTypes) {\n        const valueType = ValueType.fromDescriptor(typeDescriptor);\n        for (const otherType of otherTypes) {\n            const otherValueType = ValueType.fromDescriptor(otherType);\n            if (otherValueType.isCompatibleFrom(valueType))\n                return true;\n        }\n        return false;\n    }\n    /** Determines if the instance ValueType is convertable from the 'other' ValueType. */\n    isCompatibleFrom(other) {\n        const otherPrimitiveType = other.primitiveType;\n        if (this === other ||\n            this.primitiveType === otherPrimitiveType ||\n            otherPrimitiveType === PrimitiveType.Null ||\n            // Return true if both types are numbers\n            (this.numeric && other.numeric))\n            return true;\n        return false;\n    }\n    /**\n     * Determines if the instance ValueType is equal to the 'other' ValueType\n     * @param {ValueType} other the other ValueType to check equality against\n     * @returns True if the instance ValueType is equal to the 'other' ValueType\n     */\n    equals(other) {\n        return equals(this, other);\n    }\n    /** Gets the exact primitive type of this ValueType. */\n    get primitiveType() {\n        return getPrimitiveType(this.underlyingType);\n    }\n    /** Gets the exact extended type of this ValueType. */\n    get extendedType() {\n        return this.underlyingType;\n    }\n    /** Gets the data category string (if any) for this ValueType. */\n    get categoryString() {\n        return this.category;\n    }\n    // Simplified primitive types\n    /** Indicates whether the type represents text values. */\n    get text() {\n        return this.primitiveType === PrimitiveType.Text;\n    }\n    /** Indicates whether the type represents any numeric value. */\n    get numeric() {\n        return EnumExtensions.hasFlag(this.underlyingType, ExtendedType.Numeric);\n    }\n    /** Indicates whether the type represents integer numeric values. */\n    get integer() {\n        return this.primitiveType === PrimitiveType.Integer;\n    }\n    /** Indicates whether the type represents Boolean values. */\n    get bool() {\n        return this.primitiveType === PrimitiveType.Boolean;\n    }\n    /** Indicates whether the type represents any date/time values. */\n    get dateTime() {\n        return this.primitiveType === PrimitiveType.DateTime ||\n            this.primitiveType === PrimitiveType.Date ||\n            this.primitiveType === PrimitiveType.Time;\n    }\n    /** Indicates whether the type represents duration values. */\n    get duration() {\n        return this.primitiveType === PrimitiveType.Duration;\n    }\n    /** Indicates whether the type represents binary values. */\n    get binary() {\n        return this.primitiveType === PrimitiveType.Binary;\n    }\n    /** Indicates whether the type represents none values. */\n    get none() {\n        return this.primitiveType === PrimitiveType.None;\n    }\n    // Extended types\n    /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */\n    get temporal() {\n        return this.temporalType;\n    }\n    /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */\n    get geography() {\n        return this.geographyType;\n    }\n    /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */\n    get misc() {\n        return this.miscType;\n    }\n    /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */\n    get formatting() {\n        return this.formattingType;\n    }\n    /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */\n    get enumeration() {\n        return this.enumType;\n    }\n    get scripting() {\n        return this.scriptingType;\n    }\n    /** Returns an array describing the variant values represented by the type, if it represents an Variant type. */\n    get variant() {\n        return this.variationTypes;\n    }\n}\nValueType.typeCache = {};\nexport class ScriptType {\n    constructor(underlyingType) {\n        this.underlyingType = underlyingType;\n    }\n    get source() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);\n    }\n}\nexport class TemporalType {\n    constructor(underlyingType) {\n        this.underlyingType = underlyingType;\n    }\n    get year() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Years);\n    }\n    get quarter() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Quarters);\n    }\n    get month() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Months);\n    }\n    get day() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.DayOfMonth);\n    }\n    get paddedDateTableDate() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PaddedDateTableDates);\n    }\n}\nexport class GeographyType {\n    constructor(underlyingType) {\n        this.underlyingType = underlyingType;\n    }\n    get address() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);\n    }\n    get city() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);\n    }\n    get continent() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);\n    }\n    get country() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);\n    }\n    get county() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);\n    }\n    get region() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);\n    }\n    get postalCode() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);\n    }\n    get stateOrProvince() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);\n    }\n    get place() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);\n    }\n    get latitude() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);\n    }\n    get longitude() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);\n    }\n}\nexport class MiscellaneousType {\n    constructor(underlyingType) {\n        this.underlyingType = underlyingType;\n    }\n    get image() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);\n    }\n    get imageUrl() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);\n    }\n    get webUrl() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);\n    }\n    get barcode() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Barcode);\n    }\n}\nexport class FormattingType {\n    constructor(underlyingType) {\n        this.underlyingType = underlyingType;\n    }\n    get color() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);\n    }\n    get formatString() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);\n    }\n    get alignment() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);\n    }\n    get labelDisplayUnits() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);\n    }\n    get fontSize() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);\n    }\n    get labelDensity() {\n        return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);\n    }\n}\n/** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */\nexport var PrimitiveType;\n(function (PrimitiveType) {\n    PrimitiveType[PrimitiveType[\"Null\"] = 0] = \"Null\";\n    PrimitiveType[PrimitiveType[\"Text\"] = 1] = \"Text\";\n    PrimitiveType[PrimitiveType[\"Decimal\"] = 2] = \"Decimal\";\n    PrimitiveType[PrimitiveType[\"Double\"] = 3] = \"Double\";\n    PrimitiveType[PrimitiveType[\"Integer\"] = 4] = \"Integer\";\n    PrimitiveType[PrimitiveType[\"Boolean\"] = 5] = \"Boolean\";\n    PrimitiveType[PrimitiveType[\"Date\"] = 6] = \"Date\";\n    PrimitiveType[PrimitiveType[\"DateTime\"] = 7] = \"DateTime\";\n    PrimitiveType[PrimitiveType[\"DateTimeZone\"] = 8] = \"DateTimeZone\";\n    PrimitiveType[PrimitiveType[\"Time\"] = 9] = \"Time\";\n    PrimitiveType[PrimitiveType[\"Duration\"] = 10] = \"Duration\";\n    PrimitiveType[PrimitiveType[\"Binary\"] = 11] = \"Binary\";\n    PrimitiveType[PrimitiveType[\"None\"] = 12] = \"None\";\n    PrimitiveType[PrimitiveType[\"Variant\"] = 13] = \"Variant\";\n})(PrimitiveType || (PrimitiveType = {}));\nvar PrimitiveTypeStrings;\n(function (PrimitiveTypeStrings) {\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Null\"] = 0] = \"Null\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Text\"] = 1] = \"Text\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Decimal\"] = 2] = \"Decimal\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Double\"] = 3] = \"Double\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Integer\"] = 4] = \"Integer\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Boolean\"] = 5] = \"Boolean\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Date\"] = 6] = \"Date\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"DateTime\"] = 7] = \"DateTime\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"DateTimeZone\"] = 8] = \"DateTimeZone\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Time\"] = 9] = \"Time\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Duration\"] = 10] = \"Duration\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Binary\"] = 11] = \"Binary\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"None\"] = 12] = \"None\";\n    PrimitiveTypeStrings[PrimitiveTypeStrings[\"Variant\"] = 13] = \"Variant\";\n})(PrimitiveTypeStrings || (PrimitiveTypeStrings = {}));\n/** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */\nexport var ExtendedType;\n(function (ExtendedType) {\n    // Flags (1 << 8-15 range [0xFF00])\n    // Important: Enum members must be declared before they are used in TypeScript.\n    ExtendedType[ExtendedType[\"Numeric\"] = 256] = \"Numeric\";\n    ExtendedType[ExtendedType[\"Temporal\"] = 512] = \"Temporal\";\n    ExtendedType[ExtendedType[\"Geography\"] = 1024] = \"Geography\";\n    ExtendedType[ExtendedType[\"Miscellaneous\"] = 2048] = \"Miscellaneous\";\n    ExtendedType[ExtendedType[\"Formatting\"] = 4096] = \"Formatting\";\n    ExtendedType[ExtendedType[\"Scripting\"] = 8192] = \"Scripting\";\n    // Primitive types (0-255 range [0xFF] | flags)\n    // The member names and base values must match those in PrimitiveType.\n    ExtendedType[ExtendedType[\"Null\"] = 0] = \"Null\";\n    ExtendedType[ExtendedType[\"Text\"] = 1] = \"Text\";\n    ExtendedType[ExtendedType[\"Decimal\"] = 258] = \"Decimal\";\n    ExtendedType[ExtendedType[\"Double\"] = 259] = \"Double\";\n    ExtendedType[ExtendedType[\"Integer\"] = 260] = \"Integer\";\n    ExtendedType[ExtendedType[\"Boolean\"] = 5] = \"Boolean\";\n    ExtendedType[ExtendedType[\"Date\"] = 518] = \"Date\";\n    ExtendedType[ExtendedType[\"DateTime\"] = 519] = \"DateTime\";\n    ExtendedType[ExtendedType[\"DateTimeZone\"] = 520] = \"DateTimeZone\";\n    ExtendedType[ExtendedType[\"Time\"] = 521] = \"Time\";\n    ExtendedType[ExtendedType[\"Duration\"] = 10] = \"Duration\";\n    ExtendedType[ExtendedType[\"Binary\"] = 11] = \"Binary\";\n    ExtendedType[ExtendedType[\"None\"] = 12] = \"None\";\n    ExtendedType[ExtendedType[\"Variant\"] = 13] = \"Variant\";\n    // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)\n    // Temporal\n    ExtendedType[ExtendedType[\"Years\"] = 66048] = \"Years\";\n    ExtendedType[ExtendedType[\"Years_Text\"] = 66049] = \"Years_Text\";\n    ExtendedType[ExtendedType[\"Years_Integer\"] = 66308] = \"Years_Integer\";\n    ExtendedType[ExtendedType[\"Years_Date\"] = 66054] = \"Years_Date\";\n    ExtendedType[ExtendedType[\"Years_DateTime\"] = 66055] = \"Years_DateTime\";\n    ExtendedType[ExtendedType[\"Months\"] = 131584] = \"Months\";\n    ExtendedType[ExtendedType[\"Months_Text\"] = 131585] = \"Months_Text\";\n    ExtendedType[ExtendedType[\"Months_Integer\"] = 131844] = \"Months_Integer\";\n    ExtendedType[ExtendedType[\"Months_Date\"] = 131590] = \"Months_Date\";\n    ExtendedType[ExtendedType[\"Months_DateTime\"] = 131591] = \"Months_DateTime\";\n    ExtendedType[ExtendedType[\"PaddedDateTableDates\"] = 197127] = \"PaddedDateTableDates\";\n    ExtendedType[ExtendedType[\"Quarters\"] = 262656] = \"Quarters\";\n    ExtendedType[ExtendedType[\"Quarters_Text\"] = 262657] = \"Quarters_Text\";\n    ExtendedType[ExtendedType[\"Quarters_Integer\"] = 262916] = \"Quarters_Integer\";\n    ExtendedType[ExtendedType[\"Quarters_Date\"] = 262662] = \"Quarters_Date\";\n    ExtendedType[ExtendedType[\"Quarters_DateTime\"] = 262663] = \"Quarters_DateTime\";\n    ExtendedType[ExtendedType[\"DayOfMonth\"] = 328192] = \"DayOfMonth\";\n    ExtendedType[ExtendedType[\"DayOfMonth_Text\"] = 328193] = \"DayOfMonth_Text\";\n    ExtendedType[ExtendedType[\"DayOfMonth_Integer\"] = 328452] = \"DayOfMonth_Integer\";\n    ExtendedType[ExtendedType[\"DayOfMonth_Date\"] = 328198] = \"DayOfMonth_Date\";\n    ExtendedType[ExtendedType[\"DayOfMonth_DateTime\"] = 328199] = \"DayOfMonth_DateTime\";\n    // Geography\n    ExtendedType[ExtendedType[\"Address\"] = 6554625] = \"Address\";\n    ExtendedType[ExtendedType[\"City\"] = 6620161] = \"City\";\n    ExtendedType[ExtendedType[\"Continent\"] = 6685697] = \"Continent\";\n    ExtendedType[ExtendedType[\"Country\"] = 6751233] = \"Country\";\n    ExtendedType[ExtendedType[\"County\"] = 6816769] = \"County\";\n    ExtendedType[ExtendedType[\"Region\"] = 6882305] = \"Region\";\n    ExtendedType[ExtendedType[\"PostalCode\"] = 6947840] = \"PostalCode\";\n    ExtendedType[ExtendedType[\"PostalCode_Text\"] = 6947841] = \"PostalCode_Text\";\n    ExtendedType[ExtendedType[\"PostalCode_Integer\"] = 6948100] = \"PostalCode_Integer\";\n    ExtendedType[ExtendedType[\"StateOrProvince\"] = 7013377] = \"StateOrProvince\";\n    ExtendedType[ExtendedType[\"Place\"] = 7078913] = \"Place\";\n    ExtendedType[ExtendedType[\"Latitude\"] = 7144448] = \"Latitude\";\n    ExtendedType[ExtendedType[\"Latitude_Decimal\"] = 7144706] = \"Latitude_Decimal\";\n    ExtendedType[ExtendedType[\"Latitude_Double\"] = 7144707] = \"Latitude_Double\";\n    ExtendedType[ExtendedType[\"Longitude\"] = 7209984] = \"Longitude\";\n    ExtendedType[ExtendedType[\"Longitude_Decimal\"] = 7210242] = \"Longitude_Decimal\";\n    ExtendedType[ExtendedType[\"Longitude_Double\"] = 7210243] = \"Longitude_Double\";\n    // Miscellaneous\n    ExtendedType[ExtendedType[\"Image\"] = 13109259] = \"Image\";\n    ExtendedType[ExtendedType[\"ImageUrl\"] = 13174785] = \"ImageUrl\";\n    ExtendedType[ExtendedType[\"WebUrl\"] = 13240321] = \"WebUrl\";\n    ExtendedType[ExtendedType[\"Barcode\"] = 13305856] = \"Barcode\";\n    ExtendedType[ExtendedType[\"Barcode_Text\"] = 13305857] = \"Barcode_Text\";\n    ExtendedType[ExtendedType[\"Barcode_Integer\"] = 13306116] = \"Barcode_Integer\";\n    // Formatting\n    ExtendedType[ExtendedType[\"Color\"] = 19664897] = \"Color\";\n    ExtendedType[ExtendedType[\"FormatString\"] = 19730433] = \"FormatString\";\n    ExtendedType[ExtendedType[\"Alignment\"] = 20058113] = \"Alignment\";\n    ExtendedType[ExtendedType[\"LabelDisplayUnits\"] = 20123649] = \"LabelDisplayUnits\";\n    ExtendedType[ExtendedType[\"FontSize\"] = 20189443] = \"FontSize\";\n    ExtendedType[ExtendedType[\"LabelDensity\"] = 20254979] = \"LabelDensity\";\n    // Enumeration\n    ExtendedType[ExtendedType[\"Enumeration\"] = 26214401] = \"Enumeration\";\n    // Scripting\n    ExtendedType[ExtendedType[\"ScriptSource\"] = 32776193] = \"ScriptSource\";\n    // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type\n    // (e.g. Year_Integer or Latitude_Double above)\n    // Operations\n    ExtendedType[ExtendedType[\"SearchEnabled\"] = 65541] = \"SearchEnabled\";\n})(ExtendedType || (ExtendedType = {}));\nvar ExtendedTypeStrings;\n(function (ExtendedTypeStrings) {\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Numeric\"] = 256] = \"Numeric\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Temporal\"] = 512] = \"Temporal\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Geography\"] = 1024] = \"Geography\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Miscellaneous\"] = 2048] = \"Miscellaneous\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Formatting\"] = 4096] = \"Formatting\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Scripting\"] = 8192] = \"Scripting\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Null\"] = 0] = \"Null\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Text\"] = 1] = \"Text\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Decimal\"] = 258] = \"Decimal\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Double\"] = 259] = \"Double\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Integer\"] = 260] = \"Integer\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Boolean\"] = 5] = \"Boolean\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Date\"] = 518] = \"Date\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"DateTime\"] = 519] = \"DateTime\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"DateTimeZone\"] = 520] = \"DateTimeZone\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Time\"] = 521] = \"Time\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Duration\"] = 10] = \"Duration\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Binary\"] = 11] = \"Binary\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"None\"] = 12] = \"None\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Variant\"] = 13] = \"Variant\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Years\"] = 66048] = \"Years\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Years_Text\"] = 66049] = \"Years_Text\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Years_Integer\"] = 66308] = \"Years_Integer\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Years_Date\"] = 66054] = \"Years_Date\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Years_DateTime\"] = 66055] = \"Years_DateTime\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Months\"] = 131584] = \"Months\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Months_Text\"] = 131585] = \"Months_Text\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Months_Integer\"] = 131844] = \"Months_Integer\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Months_Date\"] = 131590] = \"Months_Date\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Months_DateTime\"] = 131591] = \"Months_DateTime\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"PaddedDateTableDates\"] = 197127] = \"PaddedDateTableDates\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Quarters\"] = 262656] = \"Quarters\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Quarters_Text\"] = 262657] = \"Quarters_Text\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Quarters_Integer\"] = 262916] = \"Quarters_Integer\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Quarters_Date\"] = 262662] = \"Quarters_Date\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Quarters_DateTime\"] = 262663] = \"Quarters_DateTime\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"DayOfMonth\"] = 328192] = \"DayOfMonth\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"DayOfMonth_Text\"] = 328193] = \"DayOfMonth_Text\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"DayOfMonth_Integer\"] = 328452] = \"DayOfMonth_Integer\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"DayOfMonth_Date\"] = 328198] = \"DayOfMonth_Date\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"DayOfMonth_DateTime\"] = 328199] = \"DayOfMonth_DateTime\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Address\"] = 6554625] = \"Address\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"City\"] = 6620161] = \"City\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Continent\"] = 6685697] = \"Continent\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Country\"] = 6751233] = \"Country\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"County\"] = 6816769] = \"County\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Region\"] = 6882305] = \"Region\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"PostalCode\"] = 6947840] = \"PostalCode\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"PostalCode_Text\"] = 6947841] = \"PostalCode_Text\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"PostalCode_Integer\"] = 6948100] = \"PostalCode_Integer\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"StateOrProvince\"] = 7013377] = \"StateOrProvince\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Place\"] = 7078913] = \"Place\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Latitude\"] = 7144448] = \"Latitude\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Latitude_Decimal\"] = 7144706] = \"Latitude_Decimal\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Latitude_Double\"] = 7144707] = \"Latitude_Double\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Longitude\"] = 7209984] = \"Longitude\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Longitude_Decimal\"] = 7210242] = \"Longitude_Decimal\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Longitude_Double\"] = 7210243] = \"Longitude_Double\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Image\"] = 13109259] = \"Image\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"ImageUrl\"] = 13174785] = \"ImageUrl\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"WebUrl\"] = 13240321] = \"WebUrl\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Barcode\"] = 13305856] = \"Barcode\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Barcode_Text\"] = 13305857] = \"Barcode_Text\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Barcode_Integer\"] = 13306116] = \"Barcode_Integer\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Color\"] = 19664897] = \"Color\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"FormatString\"] = 19730433] = \"FormatString\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Alignment\"] = 20058113] = \"Alignment\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"LabelDisplayUnits\"] = 20123649] = \"LabelDisplayUnits\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"FontSize\"] = 20189443] = \"FontSize\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"LabelDensity\"] = 20254979] = \"LabelDensity\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"Enumeration\"] = 26214401] = \"Enumeration\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"ScriptSource\"] = 32776193] = \"ScriptSource\";\n    ExtendedTypeStrings[ExtendedTypeStrings[\"SearchEnabled\"] = 65541] = \"SearchEnabled\";\n})(ExtendedTypeStrings || (ExtendedTypeStrings = {}));\nconst PrimitiveTypeMask = 0xFF;\nconst PrimitiveTypeWithFlagsMask = 0xFFFF;\nconst PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;\nfunction getPrimitiveType(extendedType) {\n    return extendedType & PrimitiveTypeMask;\n}\nfunction isPrimitiveType(extendedType) {\n    return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;\n}\nfunction getCategoryFromExtendedType(extendedType) {\n    if (isPrimitiveType(extendedType))\n        return null;\n    let category = ExtendedTypeStrings[extendedType];\n    if (category) {\n        // Check for ExtendedType declaration without a primitive type.\n        // If exists, use it as category (e.g. Longitude rather than Longitude_Double)\n        // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)\n        const delimIdx = category.lastIndexOf(\"_\");\n        if (delimIdx > 0) {\n            const baseCategory = category.slice(0, delimIdx);\n            if (ExtendedTypeStrings[baseCategory]) {\n                category = baseCategory;\n            }\n        }\n    }\n    return category || null;\n}\nfunction toExtendedType(primitiveType, category) {\n    const primitiveString = PrimitiveTypeStrings[primitiveType];\n    let t = ExtendedTypeStrings[primitiveString];\n    if (t == null) {\n        t = ExtendedType.Null;\n    }\n    if (primitiveType && category) {\n        let categoryType = ExtendedTypeStrings[category];\n        if (categoryType) {\n            const categoryPrimitiveType = getPrimitiveType(categoryType);\n            if (categoryPrimitiveType === PrimitiveType.Null) {\n                // Category supports multiple primitive types, check if requested primitive type is supported\n                // (note: important to use t here rather than primitiveType as it may include primitive type flags)\n                categoryType = t | categoryType;\n                if (ExtendedTypeStrings[categoryType]) {\n                    t = categoryType;\n                }\n            }\n            else if (categoryPrimitiveType === primitiveType) {\n                // Primitive type matches the single supported type for the category\n                t = categoryType;\n            }\n        }\n    }\n    return t;\n}\nfunction matchesExtendedTypeWithAnyPrimitive(a, b) {\n    return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);\n}\n//# sourceMappingURL=valueType.js.map","import { VisualFormattingSettingsModel } from \"./settings\";\n\nexport function setStyle(settings: VisualFormattingSettingsModel) {\n  const style = document.documentElement.style;\n\n  style.setProperty(\"--default-color\", `${settings.dataPointCard.defaultColor.value.value}`);\n  style.setProperty(\"--font-size\", `${settings.dataPointCard.fontSize.value}px`);\n}\n","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\"use strict\";\n\nimport { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\n\nimport FormattingSettingsCard = formattingSettings.Card;\nimport FormattingSettingsSlice = formattingSettings.Slice;\nimport FormattingSettingsModel = formattingSettings.Model;\nimport { VDataTtem } from \"./interface\";\nimport { dataViewWildcard } from \"powerbi-visuals-utils-dataviewutils\";\n/**\n * Data Point Formatting Card\n */\nclass DataPointCardSettings extends FormattingSettingsCard {\n  defaultColor = new formattingSettings.ColorPicker({\n    name: \"defaultColor\",\n    displayName: \"Default color\",\n    value: { value: \"\" },\n  });\n\n  fontSize = new formattingSettings.NumUpDown({\n    name: \"fontSize\",\n    displayName: \"Text Size\",\n    value: 12,\n  });\n\n  circleWidth = new formattingSettings.NumUpDown({\n    name: \"circleWidth\",\n    displayName: \"circle Width\",\n    value: 10,\n  });\n\n  name: string = \"dataPoint\";\n  displayName: string = \"Lollipop settings\";\n  slices: Array<FormattingSettingsSlice> = [this.defaultColor, this.fontSize, this.circleWidth];\n}\n\n/**\n * visual settings model class\n *\n */\nexport class VisualFormattingSettingsModel extends FormattingSettingsModel {\n  // Create formatting settings model formatting cards\n  dataPointCard = new DataPointCardSettings();\n\n  cards = [this.dataPointCard];\n\n  populateColorSelector(dataPoints: VDataTtem[]) {\n    let slices = this.dataPointCard.slices;\n    if (dataPoints) {\n      slices.push(\n        new formattingSettings.ColorPicker({\n          name: \"dataPointColor\",\n          displayName: \"Datapoint color\",\n          value: { value: `${dataPoints.forEach((data) => data.color)}` },\n          selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),\n          // altConstantSelector: selection.getSelector(),\n          instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule,\n        })\n      );\n    }\n  }\n}\n","\"use strict\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport { VData, VDataTtem } from \"./interface\";\n\nexport function transformData(options: VisualUpdateOptions, defaultColor: string): VData {\n  let data: VData;\n  try {\n    const dv = options.dataViews[0].categorical;\n    const minValue = Math.min(<number>dv.values[0].minLocal, <number>dv.values[1].minLocal);\n    const maxValue = Math.max(<number>dv.values[0].maxLocal, <number>dv.values[1].maxLocal);\n    const target = <number>dv.values[1].values[0];\n    const items: VDataTtem[] = [];\n    let color: string;\n    dv.categories[0].values.forEach((value, index) => {\n      try {\n        color = dv.categories[0].objects[index].dataPoint.dataPointColor[\"solid\"].color;\n        console.log(color);\n      } catch (error) {\n        color = defaultColor;\n      }\n      items.push({\n        category: <string>dv.categories[0].values[index],\n        value: <number>dv.values[0].values[index],\n        color,\n      });\n    });\n    data = {\n      items,\n      minValue,\n      maxValue,\n      target,\n      formatString: dv.values[0].source.format || \"\",\n    };\n  } catch (error) {\n    data = {\n      items: [],\n      minValue: 0,\n      maxValue: 0,\n      target: 0,\n      formatString: \"\",\n    };\n  }\n  return data;\n}\n","/*\n *  Power BI Visual CLI\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\"use strict\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\nimport \"./../style/visual.less\";\nimport { sampleData } from \"./sampleData\";\nimport { VData } from \"./interface\";\nimport { transformData } from \"./transformData\";\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport IVisual = powerbi.extensibility.visual.IVisual;\nimport IVisualHost = powerbi.extensibility.visual.IVisualHost;\nimport { Selection, select } from \"d3-selection\";\nimport { ScalePoint, scalePoint, ScaleLinear, scaleLinear } from \"d3-scale\";\nimport { VisualFormattingSettingsModel } from \"./settings\";\nimport { setStyle } from \"./setStyle\";\nimport { valueFormatter, textMeasurementService } from \"powerbi-visuals-utils-formattingutils\";\nimport measureSvgTextWidth = textMeasurementService.measureSvgTextWidth;\n\nexport class Visual implements IVisual {\n  private target: HTMLElement;\n  private formattingSettings: VisualFormattingSettingsModel;\n  private formattingSettingsService: FormattingSettingsService;\n  private data: VData;\n  private svg: Selection<SVGElement, any, HTMLElement, any>;\n  private scaleX: ScalePoint<string>;\n  private dim: [number, number];\n  private scaleY: ScaleLinear<number, number>;\n  private host: IVisualHost;\n\n  constructor(options: VisualConstructorOptions) {\n    this.formattingSettingsService = new FormattingSettingsService();\n    this.target = options.element;\n    this.host = options.host;\n    if (document) {\n      this.svg = select(this.target).append(\"svg\");\n    }\n  }\n\n  public update(options: VisualUpdateOptions) {\n    this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);\n    setStyle(this.formattingSettings);\n    console.log(options);\n    this.data = transformData(options, this.formattingSettings.dataPointCard.defaultColor.value.value);\n    this.formattingSettings.populateColorSelector(this.data.items);\n\n    const width = options.viewport.width;\n    const height = options.viewport.height;\n    this.dim = [options.viewport.width, options.viewport.height];\n\n    this.svg.attr(\"width\", width);\n    this.svg.attr(\"height\", height);\n\n    const targetLabelWidth = this.getTextWidth(this.formatMeasure(this.data.target, this.data.formatString));\n\n    this.scaleX = scalePoint()\n      .domain(Array.from(this.data.items, (d) => d.category))\n      .range([0, this.dim[0] - targetLabelWidth])\n      .padding(0.5);\n\n    this.scaleY = scaleLinear()\n      .domain([this.data.minValue, this.data.maxValue])\n      .range([this.dim[1] - 10, 0 + 10]); // 10 is radius value\n\n    this.drawTarget();\n    this.drawTargetLabel();\n    this.drawConnectors();\n    this.drawDataPoints();\n    this.drawCategoryLabels();\n  }\n\n  private drawTarget() {\n    let targetLine = this.svg.selectAll(\"line.target-line\").data([this.data.target]);\n\n    targetLine\n      .enter()\n      .append(\"line\")\n      .classed(\"target-line\", true)\n      .attr(\"x1\", 0)\n      .attr(\"y1\", this.scaleY(this.data.target))\n      .attr(\"x2\", this.scaleX.range()[1])\n      .attr(\"y2\", this.scaleY(this.data.target));\n\n    targetLine.attr(\"x1\", 0).attr(\"y1\", this.scaleY(this.data.target)).attr(\"x2\", this.scaleX.range()[1]).attr(\"y2\", this.scaleY(this.data.target));\n\n    targetLine.exit().remove();\n  }\n\n  private drawTargetLabel() {\n    let targetLabel = this.svg.selectAll(\"text.target-label\").data([this.data.target]);\n    targetLabel\n      .enter()\n      .append(\"text\")\n      .classed(\"target-label\", true)\n      .attr(\"x\", this.scaleX.range()[1] + 12 / 2) // 12 is fontsize\n      .attr(\"y\", this.scaleY(this.data.target))\n      .attr(\"font-size\", `${12}px`)\n      .attr(\"font-family\", \"sans-serif\")\n      .text(this.formatMeasure(this.data.target, this.data.formatString));\n\n    targetLabel\n      .attr(\"x\", this.scaleX.range()[1] + 12 / 2) // 12 is fontsize\n      .attr(\"y\", this.scaleY(this.data.target))\n      .attr(\"font-size\", \"12pt\")\n      .attr(\"font-family\", \"sans-serif\")\n      .text(this.formatMeasure(this.data.target, this.data.formatString));\n  }\n\n  private drawDataPoints() {\n    const dataPoints = this.svg.selectAll(\"circle.data-point\").data(this.data.items);\n    dataPoints\n      .enter()\n      .append(\"circle\")\n      .classed(\"data-point\", true)\n      .attr(\"cx\", (d) => {\n        console.log(d.color);\n        return this.scaleX(d.category);\n      })\n      .attr(\"cy\", (d) => this.scaleY(d.value))\n      .attr(\"r\", 10)\n      .style(\"fill\", (d) => d.color)\n      .on(\"mouseover.tooltip\", (e) => {\n        console.log(event); // Log the D3 event object\n        const d = <{ category: string; value: number }>select(e.target).data()[0];\n\n        this.host.tooltipService.show({\n          coordinates: [e.clientX, e.clientY],\n          identities: [],\n          isTouchEvent: false,\n          dataItems: [\n            {\n              displayName: d.category,\n              value: this.formatMeasure(d.value, this.data.formatString),\n            },\n          ],\n        });\n      });\n\n    dataPoints\n      .attr(\"cx\", (d) => this.scaleX(d.category))\n      .attr(\"cy\", (d) => this.scaleY(d.value))\n      .attr(\"r\", 10)\n      .style(\"fill\", (d) => d.color);\n\n    dataPoints.exit().remove();\n  }\n\n  private drawConnectors() {\n    const connectors = this.svg.selectAll(\"line.connector\").data(this.data.items);\n\n    connectors\n      .enter()\n      .append(\"line\")\n      .classed(\"connector\", true)\n      .attr(\"ix\", (d, i) => i)\n      .attr(\"x1\", (d) => this.scaleX(d.category))\n      .attr(\"y1\", (d) => this.scaleY(this.data.target))\n      .attr(\"x2\", (d) => this.scaleX(d.category))\n      .attr(\"y2\", (d) => {\n        if (Math.abs(this.scaleY(this.data.target) - this.scaleY(d.value)) <= 10) {\n          // 10 is radius value\n          return this.scaleY(this.data.target);\n        } else if (this.scaleY(this.data.target)) {\n          return this.scaleY(d.value) + 10; // 10 is radius value\n        } else {\n          return this.scaleY(d.value) - 10; // 10 is radius value\n        }\n      });\n\n    connectors\n      .attr(\"x1\", (d) => this.scaleX(d.category))\n      .attr(\"y1\", (d) => this.scaleY(this.data.target))\n      .attr(\"x2\", (d) => this.scaleX(d.category))\n      .attr(\"y2\", (d) => {\n        if (Math.abs(this.scaleY(this.data.target) - this.scaleY(d.value)) <= 10) {\n          // 10 is radius value\n          return this.scaleY(this.data.target);\n        } else if (this.scaleY(this.data.target)) {\n          return this.scaleY(d.value) + 10; // 10 is radius value\n        } else {\n          return this.scaleY(d.value) - 10; // 10 is radius value\n        }\n      });\n\n    connectors.exit().remove();\n\n    return connectors;\n  }\n\n  private drawCategoryLabels() {\n    const catLabels = this.svg.selectAll(\"text.category-label\").data(this.data.items);\n\n    catLabels\n      .enter()\n      .append(\"text\")\n      .classed(\"category-label\", true)\n      .attr(\"x\", (d) => this.scaleX(d.category))\n      .attr(\"y\", (d) => {\n        if (d.value >= this.data.target) {\n          return this.scaleY(this.data.target) + 12; // 12 is fontSize\n        } else {\n          return this.scaleY(this.data.target) - 12;\n        }\n      })\n      .text((d) => d.category);\n\n    catLabels\n      .attr(\"x\", (d) => this.scaleX(d.category))\n      .attr(\"y\", (d) => {\n        if (d.value >= this.data.target) {\n          return this.scaleY(this.data.target) + 12; // 12 is fontSize\n        } else {\n          return this.scaleY(this.data.target) - 12;\n        }\n      })\n      .text((d) => d.category);\n\n    catLabels.exit().remove();\n  }\n\n  private formatMeasure(measures: number, fs: string): string {\n    const formatter = valueFormatter.create({ format: fs });\n    return formatter.format(measures);\n  }\n\n  private getTextWidth(txt: string): number {\n    const textProperties = {\n      test: txt,\n      fontFamily: \"sans-serif\",\n      fontSize: \"12pt\",\n    };\n    return measureSvgTextWidth(textProperties);\n  }\n\n  /**\n   * Returns properties pane formatting model content hierarchies, properties and latest formatting values, Then populate properties pane.\n   * This method is called once every time we open properties pane or when the user edit any format property.\n   */\n  public getFormattingModel(): powerbi.visuals.FormattingModel {\n    return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\n  }\n}\n","module.exports = Function('return this')();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar lollipopVisualTraining32641A0A2EA74DA98690D8E336030B97_DEBUG: IVisualPlugin = {\n    name: 'lollipopVisualTraining32641A0A2EA74DA98690D8E336030B97_DEBUG',\n    displayName: 'lollipopVisual_ Training',\n    class: 'Visual',\n    apiVersion: '5.1.0',\n    create: (options: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"lollipopVisualTraining32641A0A2EA74DA98690D8E336030B97_DEBUG\"] = lollipopVisualTraining32641A0A2EA74DA98690D8E336030B97_DEBUG;\n}\nexport default lollipopVisualTraining32641A0A2EA74DA98690D8E336030B97_DEBUG;"],"names":[],"sourceRoot":""}